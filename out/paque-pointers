# 1 "../drivers/of/of_net.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 378 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./../include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "./../include/linux/kconfig.h" 2
# 74 "./../include/linux/kconfig.h"
# 1 "../include/linux/compiler_types.h" 1
# 58 "../include/linux/compiler_types.h"
# 1 "../include/linux/compiler-gcc.h" 1
# 59 "../include/linux/compiler_types.h" 2
# 78 "../include/linux/compiler_types.h"
# 1 "../include/linux/compiler-clang.h" 1
# 79 "../include/linux/compiler_types.h" 2
# 99 "../include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 75 "./../include/linux/kconfig.h" 2
# 2 "<built-in>" 2
# 1 "../drivers/of/of_net.c" 2







# 1 "../include/linux/etherdevice.h" 1
# 25 "../include/linux/etherdevice.h"
# 1 "../include/linux/if_ether.h" 1
# 23 "../include/linux/if_ether.h"
# 1 "../include/linux/skbuff.h" 1
# 17 "../include/linux/skbuff.h"
# 1 "../include/linux/kernel.h" 1





# 1 "/home/master/kernel/clang/lib/clang/17/include/stdarg.h" 1 3
# 14 "/home/master/kernel/clang/lib/clang/17/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;







typedef __builtin_va_list va_list;
# 7 "../include/linux/kernel.h" 2
# 1 "../include/linux/linkage.h" 1





# 1 "../include/linux/stringify.h" 1
# 7 "../include/linux/linkage.h" 2
# 1 "../include/linux/export.h" 1
# 27 "../include/linux/export.h"
struct kernel_symbol
{
 unsigned long value;
 const char *name;
};
# 8 "../include/linux/linkage.h" 2
# 1 "../arch/arm64/include/asm/linkage.h" 1
# 9 "../include/linux/linkage.h" 2
# 8 "../include/linux/kernel.h" 2
# 1 "../include/linux/stddef.h" 1




# 1 "../include/uapi/linux/stddef.h" 1
# 6 "../include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 9 "../include/linux/kernel.h" 2
# 1 "../include/linux/types.h" 1





# 1 "../include/uapi/linux/types.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 1 "../include/uapi/asm-generic/types.h" 1






# 1 "../include/asm-generic/int-ll64.h" 1
# 11 "../include/asm-generic/int-ll64.h"
# 1 "../include/uapi/asm-generic/int-ll64.h" 1
# 12 "../include/uapi/asm-generic/int-ll64.h"
# 1 "../arch/arm64/include/uapi/asm/bitsperlong.h" 1
# 22 "../arch/arm64/include/uapi/asm/bitsperlong.h"
# 1 "../include/asm-generic/bitsperlong.h" 1




# 1 "../include/uapi/asm-generic/bitsperlong.h" 1
# 6 "../include/asm-generic/bitsperlong.h" 2
# 23 "../arch/arm64/include/uapi/asm/bitsperlong.h" 2
# 13 "../include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "../include/asm-generic/int-ll64.h" 2




typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;
# 8 "../include/uapi/asm-generic/types.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/types.h" 2
# 6 "../include/uapi/linux/types.h" 2








# 1 "../include/uapi/linux/posix_types.h" 1
# 25 "../include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "../arch/arm64/include/uapi/asm/posix_types.h" 1




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


# 1 "../include/uapi/asm-generic/posix_types.h" 1
# 15 "../include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 59 "../include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_old_dev_t;
# 72 "../include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 10 "../arch/arm64/include/uapi/asm/posix_types.h" 2
# 37 "../include/uapi/linux/posix_types.h" 2
# 15 "../include/uapi/linux/types.h" 2
# 29 "../include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 7 "../include/linux/types.h" 2
# 16 "../include/linux/types.h"
typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef __u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 58 "../include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef __u8 u_int8_t;
typedef __s8 int8_t;
typedef __u16 u_int16_t;
typedef __s16 int16_t;
typedef __u32 u_int32_t;
typedef __s32 int32_t;



typedef __u8 uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;


typedef __u64 uint64_t;
typedef __u64 u_int64_t;
typedef __s64 int64_t;
# 137 "../include/linux/types.h"
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
# 156 "../include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned gfp_t;
typedef unsigned fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;


typedef struct {
 long counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 226 "../include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);
# 10 "../include/linux/kernel.h" 2
# 1 "../include/linux/compiler.h" 1
# 180 "../include/linux/compiler.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}
# 198 "../include/linux/compiler.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size_nocheck(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
 case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
 case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
 case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
 default:
  __asm__ __volatile__("": : :"memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("": : :"memory");
 }
}
# 240 "../include/linux/compiler.h"
# 1 "../arch/arm64/include/asm/barrier.h" 1
# 48 "../arch/arm64/include/asm/barrier.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long array_index_mask_nospec(unsigned long idx,
          unsigned long sz)
{
 unsigned long mask;

 asm volatile(
 "	cmp	%1, %2\n"
 "	sbc	%0, xzr, xzr\n"
 : "=r" (mask)
 : "r" (idx), "Ir" (sz)
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return mask;
}
# 156 "../arch/arm64/include/asm/barrier.h"
# 1 "../include/asm-generic/barrier.h" 1
# 20 "../include/asm-generic/barrier.h"
# 1 "../include/linux/compiler.h" 1
# 21 "../include/asm-generic/barrier.h" 2
# 157 "../arch/arm64/include/asm/barrier.h" 2
# 241 "../include/linux/compiler.h" 2
# 1 "../include/linux/kasan-checks.h" 1








static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_check_read(const volatile void *p, unsigned int size)
{ }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_check_write(const volatile void *p, unsigned int size)
{ }
# 242 "../include/linux/compiler.h" 2
# 261 "../include/linux/compiler.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 11 "../include/linux/kernel.h" 2
# 1 "../include/linux/bitops.h" 1



# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 5 "../include/linux/bitops.h" 2
# 1 "../include/linux/bits.h" 1
# 6 "../include/linux/bitops.h" 2




extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "../arch/arm64/include/asm/bitops.h" 1
# 29 "../arch/arm64/include/asm/bitops.h"
extern void set_bit(int nr, volatile unsigned long *p);
extern void clear_bit(int nr, volatile unsigned long *p);
extern void change_bit(int nr, volatile unsigned long *p);
extern int test_and_set_bit(int nr, volatile unsigned long *p);
extern int test_and_clear_bit(int nr, volatile unsigned long *p);
extern int test_and_change_bit(int nr, volatile unsigned long *p);

# 1 "../include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "../include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 37 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-ffs.h" 1
# 13 "../include/asm-generic/bitops/builtin-ffs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int ffs(int x)
{
 return __builtin_ffs(x);
}
# 38 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "../include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 39 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-fls.h" 1
# 12 "../include/asm-generic/bitops/builtin-fls.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls(int x)
{
 return x ? sizeof(x) * 8 - __builtin_clz(x) : 0;
}
# 40 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/ffz.h" 1
# 42 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/fls64.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/fls64.h" 2
# 27 "../include/asm-generic/bitops/fls64.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 43 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/find.h" 1
# 15 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
  size, unsigned long offset);
# 29 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned
  long size, unsigned long offset);
# 44 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/sched.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "../include/asm-generic/bitops/sched.h" 2






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "../include/asm-generic/bitops/sched.h"
}
# 46 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/hweight.h" 1




# 1 "../include/asm-generic/bitops/arch_hweight.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/arch_hweight.h" 2

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "../include/asm-generic/bitops/hweight.h" 2
# 1 "../include/asm-generic/bitops/const_hweight.h" 1
# 7 "../include/asm-generic/bitops/hweight.h" 2
# 47 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/lock.h" 1
# 48 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/non-atomic.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/non-atomic.h" 2
# 16 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 41 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __change_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 58 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 77 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __test_and_change_bit(int nr,
         volatile unsigned long *addr)
{
 unsigned long mask = (1UL << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_bit(int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 50 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/le.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/le.h" 2
# 1 "../arch/arm64/include/uapi/asm/byteorder.h" 1
# 23 "../arch/arm64/include/uapi/asm/byteorder.h"
# 1 "../include/linux/byteorder/little_endian.h" 1




# 1 "../include/uapi/linux/byteorder/little_endian.h" 1
# 13 "../include/uapi/linux/byteorder/little_endian.h"
# 1 "../include/linux/swab.h" 1




# 1 "../include/uapi/linux/swab.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/swab.h" 1
# 1 "../include/uapi/asm-generic/swab.h" 1
# 2 "./arch/arm64/include/generated/uapi/asm/swab.h" 2
# 9 "../include/uapi/linux/swab.h" 2
# 48 "../include/uapi/linux/swab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "../include/uapi/linux/swab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "../include/uapi/linux/swab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "../include/linux/swab.h" 2
# 14 "../include/uapi/linux/byteorder/little_endian.h" 2
# 44 "../include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "../include/linux/byteorder/little_endian.h" 2





# 1 "../include/linux/byteorder/generic.h" 1
# 144 "../include/linux/byteorder/generic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}
# 12 "../include/linux/byteorder/little_endian.h" 2
# 24 "../arch/arm64/include/uapi/asm/byteorder.h" 2
# 7 "../include/asm-generic/bitops/le.h" 2





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_next_zero_bit((addr), (size), 0);
}
# 53 "../include/asm-generic/bitops/le.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_bit_le(int nr, const void *addr)
{
 return test_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 51 "../arch/arm64/include/asm/bitops.h" 2
# 20 "../include/linux/bitops.h" 2
# 43 "../include/linux/bitops.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 143 "../include/linux/bitops.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 else if (l & (l - 1UL))
  return (int)fls_long(l);
 else
  return (int)fls_long(l) - 1;
}
# 201 "../include/linux/bitops.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}
# 253 "../include/linux/bitops.h"
extern unsigned long find_last_bit(const unsigned long *addr,
       unsigned long size);
# 12 "../include/linux/kernel.h" 2
# 1 "../include/linux/log2.h" 1
# 25 "../include/linux/log2.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 210 "../include/linux/log2.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ( __builtin_constant_p(n - 1) ? ( (n - 1) < 2 ? 0 : (n - 1) & (1ULL << 63) ? 63 : (n - 1) & (1ULL << 62) ? 62 : (n - 1) & (1ULL << 61) ? 61 : (n - 1) & (1ULL << 60) ? 60 : (n - 1) & (1ULL << 59) ? 59 : (n - 1) & (1ULL << 58) ? 58 : (n - 1) & (1ULL << 57) ? 57 : (n - 1) & (1ULL << 56) ? 56 : (n - 1) & (1ULL << 55) ? 55 : (n - 1) & (1ULL << 54) ? 54 : (n - 1) & (1ULL << 53) ? 53 : (n - 1) & (1ULL << 52) ? 52 : (n - 1) & (1ULL << 51) ? 51 : (n - 1) & (1ULL << 50) ? 50 : (n - 1) & (1ULL << 49) ? 49 : (n - 1) & (1ULL << 48) ? 48 : (n - 1) & (1ULL << 47) ? 47 : (n - 1) & (1ULL << 46) ? 46 : (n - 1) & (1ULL << 45) ? 45 : (n - 1) & (1ULL << 44) ? 44 : (n - 1) & (1ULL << 43) ? 43 : (n - 1) & (1ULL << 42) ? 42 : (n - 1) & (1ULL << 41) ? 41 : (n - 1) & (1ULL << 40) ? 40 : (n - 1) & (1ULL << 39) ? 39 : (n - 1) & (1ULL << 38) ? 38 : (n - 1) & (1ULL << 37) ? 37 : (n - 1) & (1ULL << 36) ? 36 : (n - 1) & (1ULL << 35) ? 35 : (n - 1) & (1ULL << 34) ? 34 : (n - 1) & (1ULL << 33) ? 33 : (n - 1) & (1ULL << 32) ? 32 : (n - 1) & (1ULL << 31) ? 31 : (n - 1) & (1ULL << 30) ? 30 : (n - 1) & (1ULL << 29) ? 29 : (n - 1) & (1ULL << 28) ? 28 : (n - 1) & (1ULL << 27) ? 27 : (n - 1) & (1ULL << 26) ? 26 : (n - 1) & (1ULL << 25) ? 25 : (n - 1) & (1ULL << 24) ? 24 : (n - 1) & (1ULL << 23) ? 23 : (n - 1) & (1ULL << 22) ? 22 : (n - 1) & (1ULL << 21) ? 21 : (n - 1) & (1ULL << 20) ? 20 : (n - 1) & (1ULL << 19) ? 19 : (n - 1) & (1ULL << 18) ? 18 : (n - 1) & (1ULL << 17) ? 17 : (n - 1) & (1ULL << 16) ? 16 : (n - 1) & (1ULL << 15) ? 15 : (n - 1) & (1ULL << 14) ? 14 : (n - 1) & (1ULL << 13) ? 13 : (n - 1) & (1ULL << 12) ? 12 : (n - 1) & (1ULL << 11) ? 11 : (n - 1) & (1ULL << 10) ? 10 : (n - 1) & (1ULL << 9) ? 9 : (n - 1) & (1ULL << 8) ? 8 : (n - 1) & (1ULL << 7) ? 7 : (n - 1) & (1ULL << 6) ? 6 : (n - 1) & (1ULL << 5) ? 5 : (n - 1) & (1ULL << 4) ? 4 : (n - 1) & (1ULL << 3) ? 3 : (n - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 13 "../include/linux/kernel.h" 2
# 1 "../include/linux/typecheck.h" 1
# 14 "../include/linux/kernel.h" 2
# 1 "../include/linux/printk.h" 1





# 1 "../include/linux/init.h" 1
# 118 "../include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);

extern initcall_t __con_initcall_start[], __con_initcall_end[];
extern initcall_t __security_initcall_start[], __security_initcall_end[];


typedef void (*ctor_fn_t)(void);


extern int do_one_initcall(initcall_t fn);
extern char __attribute__ ((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void launch_early_services(void);



void __attribute__ ((__section__(".init.text"))) load_default_modules(void);
int __attribute__ ((__section__(".init.text"))) init_rootfs(void);


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 243 "../include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 292 "../include/linux/init.h"
void __attribute__ ((__section__(".init.text"))) parse_early_param(void);
void __attribute__ ((__section__(".init.text"))) parse_early_options(char *cmdline);
# 7 "../include/linux/printk.h" 2
# 1 "../include/linux/kern_levels.h" 1
# 8 "../include/linux/printk.h" 2

# 1 "../include/linux/cache.h" 1




# 1 "../include/uapi/linux/kernel.h" 1




# 1 "../include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "../include/uapi/linux/kernel.h" 2
# 6 "../include/linux/cache.h" 2
# 1 "../arch/arm64/include/asm/cache.h" 1
# 19 "../arch/arm64/include/asm/cache.h"
# 1 "../arch/arm64/include/asm/cputype.h" 1
# 140 "../arch/arm64/include/asm/cputype.h"
# 1 "../arch/arm64/include/asm/sysreg.h" 1
# 23 "../arch/arm64/include/asm/sysreg.h"
# 1 "../arch/arm64/include/asm/compiler.h" 1
# 24 "../arch/arm64/include/asm/sysreg.h" 2
# 578 "../arch/arm64/include/asm/sysreg.h"
# 1 "../include/linux/build_bug.h" 1
# 579 "../arch/arm64/include/asm/sysreg.h" 2
# 661 "../arch/arm64/include/asm/sysreg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void config_sctlr_el1(u32 clear, u32 set)
{
 u32 val;

 val = ({ u64 __val; asm volatile("mrs %0, " "sctlr_el1" : "=r" (__val)); __val; });
 val &= ~clear;
 val |= set;
 do { u64 __val = (u64)(val); asm volatile("msr " "sctlr_el1" ", %x0" : : "rZ" (__val)); } while (0);
}
# 141 "../arch/arm64/include/asm/cputype.h" 2
# 153 "../arch/arm64/include/asm/cputype.h"
struct midr_range {
 u32 model;
 u32 rv_min;
 u32 rv_max;
};
# 168 "../arch/arm64/include/asm/cputype.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_midr_in_range(u32 midr, struct midr_range const *range)
{
 return ({ u32 _model = (midr) & ((0xff << 24) | (0xfff << 4) | (0xf << 16)); u32 rv = (midr) & (0xf | (0xf << 20)); _model == (range->model) && rv >= (range->rv_min) && rv <= (range->rv_max); });

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
is_midr_in_range_list(u32 midr, struct midr_range const *ranges)
{
 while (ranges->model)
  if (is_midr_in_range(midr, ranges++))
   return true;
 return false;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __attribute__((__const__)) read_cpuid_id(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" "	.inst 0xd5200000|(\\sreg)|(.L__reg_num_\\rt)\n" "	.endm\n" "	mrs_s %0, " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 __attribute__((__const__)) read_cpuid_mpidr(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" "	.inst 0xd5200000|(\\sreg)|(.L__reg_num_\\rt)\n" "	.endm\n" "	mrs_s %0, " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((5) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __attribute__((__const__)) read_cpuid_implementor(void)
{
 return (((read_cpuid_id()) & (0xff << 24)) >> 24);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __attribute__((__const__)) read_cpuid_part_number(void)
{
 return (((read_cpuid_id()) & (0xfff << 4)) >> 4);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __attribute__((__const__)) read_cpuid_cachetype(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" "	.inst 0xd5200000|(\\sreg)|(.L__reg_num_\\rt)\n" "	.endm\n" "	mrs_s %0, " "(((3) << 19) | ((3) << 16) | ((0) << 12) | ((0) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}
# 20 "../arch/arm64/include/asm/cache.h" 2
# 59 "../arch/arm64/include/asm/cache.h"
extern unsigned long __icache_flags;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int icache_is_aliasing(void)
{
 return test_bit(0, &__icache_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int icache_is_vpipt(void)
{
 return test_bit(1, &__icache_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 cache_type_cwg(void)
{
 return (read_cpuid_cachetype() >> 24) & 15;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cache_line_size(void)
{
 u32 cwg = cache_type_cwg();
 return cwg ? 4 << cwg : (1 << 7);
}
# 7 "../include/linux/cache.h" 2
# 10 "../include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'd':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 63 "../include/linux/printk.h"
extern int console_printk[];






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}



extern char devkmsg_log_str[];
struct ctl_table;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 146 "../include/linux/printk.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void early_printk(const char *s, ...) { }
# 156 "../include/linux/printk.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void printk_nmi_enter(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void printk_nmi_exit(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void printk_nmi_direct_enter(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void printk_nmi_direct_exit(void) { }



           __attribute__((format(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   const char *dict, size_t dictlen,
   const char *fmt, va_list args);

           __attribute__((format(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((format(printf, 5, 6)))
int printk_emit(int facility, int level,
  const char *dict, size_t dictlen,
  const char *fmt, ...);

           __attribute__((format(printf, 1, 2)))
int printk(const char *fmt, ...);




__attribute__((format(printf, 1, 2))) int printk_deferred(const char *fmt, ...);






extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;
extern int kptr_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__ ((__section__(".init.text"))) setup_log_buf(int early);
__attribute__((format(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void printk_safe_init(void);
extern void printk_safe_flush(void);
extern void printk_safe_flush_on_panic(void);
# 287 "../include/linux/printk.h"
extern void dump_stack(void) ;
# 479 "../include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);




extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len);
# 524 "../include/linux/printk.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 15 "../include/linux/kernel.h" 2
# 203 "../include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;
# 231 "../include/linux/kernel.h"
  static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 278 "../include/linux/kernel.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((format(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((noreturn)) ;
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code) __attribute__((noreturn));
void complete_and_exit(struct completion *, long) __attribute__((noreturn));




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void refcount_error_report(struct pt_regs *regs, const char *err)
{ }



int __attribute__((warn_unused_result)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((warn_unused_result)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((warn_unused_result)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((warn_unused_result)) kstrtoll(const char *s, unsigned int base, long long *res);
# 333 "../include/linux/kernel.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 362 "../include/linux/kernel.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((warn_unused_result)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((warn_unused_result)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((warn_unused_result)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((warn_unused_result)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((warn_unused_result)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((warn_unused_result)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((warn_unused_result)) kstrtobool(const char *s, bool *res);

int __attribute__((warn_unused_result)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((warn_unused_result)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((warn_unused_result)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((warn_unused_result)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((warn_unused_result)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((warn_unused_result)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((warn_unused_result)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((warn_unused_result)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((warn_unused_result)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((warn_unused_result)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((warn_unused_result)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size, unsigned long long num);



extern __attribute__((format(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((format(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((format(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((format(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((format(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((format(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

unsigned long int_sqrt(unsigned long);

extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern int sysctl_panic_on_rcu_stall;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
} system_state;
# 555 "../include/linux/kernel.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[16];

extern const char hex_asc[];



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((warn_unused_result)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 611 "../include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 690 "../include/linux/kernel.h"
extern __attribute__((format(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((format(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 731 "../include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 753 "../include/linux/kernel.h"
extern __attribute__((format(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((format(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 18 "../include/linux/skbuff.h" 2

# 1 "../include/linux/time.h" 1





# 1 "../include/linux/seqlock.h" 1
# 36 "../include/linux/seqlock.h"
# 1 "../include/linux/spinlock.h" 1
# 51 "../include/linux/spinlock.h"
# 1 "../include/linux/preempt.h" 1
# 11 "../include/linux/preempt.h"
# 1 "../include/linux/list.h" 1






# 1 "../include/linux/poison.h" 1
# 8 "../include/linux/list.h" 2
# 1 "../include/uapi/linux/const.h" 1
# 9 "../include/linux/list.h" 2
# 26 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 list->prev = list;
}


extern bool __list_add_valid(struct list_head *new,
         struct list_head *prev,
         struct list_head *next);
extern bool __list_del_entry_valid(struct list_head *entry);
# 56 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (new) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 77 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 91 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 103 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 137 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int list_empty(const struct list_head *head)
{
 return ({ union { typeof(head->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->next), __u.__c, sizeof(head->next)); else __read_once_size_nocheck(&(head->next), __u.__c, sizeof(head->next)); do { } while (0); __u.__val; }) == head;
}
# 219 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 274 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 302 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 363 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 380 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 658 "../include/linux/list.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hlist_empty(const struct hlist_head *h)
{
 return !({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 ({ union { typeof(h->first) __val; char __c[1]; } __u = { .__val = ( typeof(h->first)) (n) }; __write_once_size(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
 n->pprev = &h->first;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 ({ union { typeof(*(n->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof(*(n->pprev))) (n) }; __write_once_size(&(*(n->pprev)), __u.__c, sizeof(*(n->pprev))); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (n) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 12 "../include/linux/preempt.h" 2
# 81 "../include/linux/preempt.h"
# 1 "./arch/arm64/include/generated/asm/preempt.h" 1
# 1 "../include/asm-generic/preempt.h" 1




# 1 "../include/linux/thread_info.h" 1
# 12 "../include/linux/thread_info.h"
# 1 "../include/linux/bug.h" 1




# 1 "../arch/arm64/include/asm/bug.h" 1
# 23 "../arch/arm64/include/asm/bug.h"
# 1 "../arch/arm64/include/asm/asm-bug.h" 1
# 19 "../arch/arm64/include/asm/asm-bug.h"
# 1 "../arch/arm64/include/asm/brk-imm.h" 1
# 20 "../arch/arm64/include/asm/asm-bug.h" 2
# 24 "../arch/arm64/include/asm/bug.h" 2
# 37 "../arch/arm64/include/asm/bug.h"
# 1 "../include/asm-generic/bug.h" 1
# 21 "../include/asm-generic/bug.h"
struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 101 "../include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 38 "../arch/arm64/include/asm/bug.h" 2
# 6 "../include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "../include/linux/bug.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);
# 65 "../include/linux/bug.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool check_data_corruption(bool v) { return v; }
# 13 "../include/linux/thread_info.h" 2
# 1 "../include/linux/restart_block.h" 1
# 11 "../include/linux/restart_block.h"
struct timespec;
struct compat_timespec;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,

 TT_COMPAT = 2,

};




struct restart_block {
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct timespec *rmtp;

    struct compat_timespec *compat_rmtp;

   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 14 "../include/linux/thread_info.h" 2







# 1 "../arch/arm64/include/asm/current.h" 1








struct task_struct;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct task_struct *get_current(void)
{
 unsigned long sp_el0;

 asm ("mrs %0, sp_el0" : "=r" (sp_el0));

 return (struct task_struct *)sp_el0;
}
# 22 "../include/linux/thread_info.h" 2
# 31 "../include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};

# 1 "../arch/arm64/include/asm/thread_info.h" 1
# 28 "../arch/arm64/include/asm/thread_info.h"
struct task_struct;

# 1 "../arch/arm64/include/asm/memory.h" 1
# 28 "../arch/arm64/include/asm/memory.h"
# 1 "../arch/arm64/include/asm/page-def.h" 1
# 29 "../arch/arm64/include/asm/memory.h" 2
# 1 "./arch/arm64/include/generated/asm/sizes.h" 1
# 1 "../include/asm-generic/sizes.h" 1

# 1 "../include/linux/sizes.h" 1
# 3 "../include/asm-generic/sizes.h" 2
# 2 "./arch/arm64/include/generated/asm/sizes.h" 2
# 30 "../arch/arm64/include/asm/memory.h" 2
# 185 "../arch/arm64/include/asm/memory.h"
# 1 "../include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 186 "../arch/arm64/include/asm/memory.h" 2

extern s64 memstart_addr;




extern u64 kimage_vaddr;


extern u64 kimage_voffset;


extern phys_addr_t bootloader_memory_limit;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long kaslr_offset(void)
{
 return kimage_vaddr - (((((0xffffffffffffffffUL) - ((1UL) << (39)) + 1) + (0)) + (0x08000000)));
}
# 245 "../arch/arm64/include/asm/memory.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const void *__tag_set(const void *addr, u8 tag)
{
 u64 __addr = (u64)addr & ~0UL;
 return (const void *)(__addr | 0UL);
}
# 299 "../arch/arm64/include/asm/memory.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) phys_addr_t virt_to_phys(const volatile void *x)
{
 return ({ phys_addr_t __x = (phys_addr_t)((unsigned long)(x)); (!!((__x) & (1UL << ((39) - 1)))) ? (((__x) & ~((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)) + ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) : ((__x) - kimage_voffset); });
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *phys_to_virt(phys_addr_t x)
{
 return (void *)(((unsigned long)((x) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)));
}
# 370 "../arch/arm64/include/asm/memory.h"
# 1 "../include/asm-generic/memory_model.h" 1




# 1 "../include/linux/pfn.h" 1
# 13 "../include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "../include/asm-generic/memory_model.h" 2
# 371 "../arch/arm64/include/asm/memory.h" 2
# 31 "../arch/arm64/include/asm/thread_info.h" 2
# 1 "../arch/arm64/include/asm/stack_pointer.h" 1







register unsigned long current_stack_pointer asm ("sp");
# 32 "../arch/arm64/include/asm/thread_info.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 33 "../arch/arm64/include/asm/thread_info.h" 2

typedef unsigned long mm_segment_t;




struct thread_info {
 unsigned long flags;
 unsigned long padding[7];
 mm_segment_t addr_limit;

 u64 ttbr0;

 int preempt_count;



};
# 67 "../arch/arm64/include/asm/thread_info.h"
void arch_setup_new_exec(void);
# 39 "../include/linux/thread_info.h" 2
# 53 "../include/linux/thread_info.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_bit(flag, (unsigned long *)&ti->flags);
}
# 103 "../include/linux/thread_info.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}



extern void __check_object_size(const void *ptr, unsigned long n,
     bool to_user);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void check_object_size(const void *ptr, unsigned long n,
           bool to_user)
{
 if (!__builtin_constant_p(n))
  __check_object_size(ptr, n, to_user);
}






extern void
__bad_copy_from(void);
extern void
__bad_copy_to(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("Buffer overflow detected (%d < %lu)!\n", size, count); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/thread_info.h\"; .popsection; .long 2b - 0b; .short 134; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 check_object_size(addr, bytes, is_source);
 return true;
}
# 6 "../include/asm-generic/preempt.h" 2



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int preempt_count(void)
{
 return ({ union { typeof(((struct thread_info *)get_current())->preempt_count) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->preempt_count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt_count)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->preempt_count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt_count)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) volatile int *preempt_count_ptr(void)
{
 return &((struct thread_info *)get_current())->preempt_count;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void preempt_count_set(int pc)
{
 *preempt_count_ptr() = pc;
}
# 35 "../include/asm-generic/preempt.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void set_preempt_need_resched(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_preempt_need_resched(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_preempt_need_resched(void)
{
 return false;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_add(int val)
{
 *preempt_count_ptr() += val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_sub(int val)
{
 *preempt_count_ptr() -= val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __preempt_count_dec_and_test(void)
{





 return !--*preempt_count_ptr() && test_ti_thread_flag(((struct thread_info *)get_current()), 1);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(preempt_count() == preempt_offset && test_ti_thread_flag(((struct thread_info *)get_current()), 1)), 0);

}


extern void preempt_schedule(void);

extern void preempt_schedule_notrace(void);
# 2 "./arch/arm64/include/generated/asm/preempt.h" 2
# 82 "../include/linux/preempt.h" 2
# 52 "../include/linux/spinlock.h" 2


# 1 "../include/linux/irqflags.h" 1
# 16 "../include/linux/irqflags.h"
# 1 "../arch/arm64/include/asm/irqflags.h" 1
# 21 "../arch/arm64/include/asm/irqflags.h"
# 1 "../arch/arm64/include/asm/ptrace.h" 1
# 22 "../arch/arm64/include/asm/ptrace.h"
# 1 "../arch/arm64/include/uapi/asm/ptrace.h" 1
# 25 "../arch/arm64/include/uapi/asm/ptrace.h"
# 1 "../arch/arm64/include/asm/hwcap.h" 1
# 19 "../arch/arm64/include/asm/hwcap.h"
# 1 "../arch/arm64/include/uapi/asm/hwcap.h" 1
# 20 "../arch/arm64/include/asm/hwcap.h" 2
# 52 "../arch/arm64/include/asm/hwcap.h"
extern unsigned int compat_elf_hwcap, compat_elf_hwcap2;


enum {
 CAP_HWCAP = 1,

 CAP_COMPAT_HWCAP,
 CAP_COMPAT_HWCAP2,

};

extern unsigned long elf_hwcap;
# 26 "../arch/arm64/include/uapi/asm/ptrace.h" 2
# 71 "../arch/arm64/include/uapi/asm/ptrace.h"
struct user_pt_regs {
 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;
};

struct user_fpsimd_state {
 __uint128_t vregs[32];
 __u32 fpsr;
 __u32 fpcr;
 __u32 __reserved[2];
};

struct user_hwdebug_state {
 __u32 dbg_info;
 __u32 pad;
 struct {
  __u64 addr;
  __u32 ctrl;
  __u32 pad;
 } dbg_regs[16];
};
# 23 "../arch/arm64/include/asm/ptrace.h" 2
# 146 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long compat_psr_to_pstate(const unsigned long psr)
{
 unsigned long pstate;

 pstate = psr & ~0x00200000;

 if (psr & 0x00200000)
  pstate |= 0x01000000;

 return pstate;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pstate_to_compat_psr(const unsigned long pstate)
{
 unsigned long psr;

 psr = pstate & ~0x01000000;

 if (pstate & 0x01000000)
  psr |= 0x00200000;

 return psr;
}






struct pt_regs {
 union {
  struct user_pt_regs user_regs;
  struct {
   u64 regs[31];
   u64 sp;
   u64 pc;
   u64 pstate;
  };
 };
 u64 orig_x0;




 s32 syscallno;
 u32 unused2;


 u64 orig_addr_limit;
 u64 unused;
 u64 stackframe[2];
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool in_syscall(struct pt_regs const *regs)
{
 return regs->syscallno != (-1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void forget_syscall(struct pt_regs *regs)
{
 regs->syscallno = (-1);
}
# 246 "../arch/arm64/include/asm/ptrace.h"
extern int regs_query_register_offset(const char *name);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);
# 259 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 regs_get_register(struct pt_regs *regs, unsigned int offset)
{
 u64 val = 0;

 ({ int __ret_warn_on = !!(offset & 7); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"arch/arm64/include/asm/ptrace.h\"; .popsection; .long 2b - 0b; .short 263; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 offset >>= 3;
 switch (offset) {
 case 0 ... 30:
  val = regs->regs[offset];
  break;
 case __builtin_offsetof(struct pt_regs, sp) >> 3:
  val = regs->sp;
  break;
 case __builtin_offsetof(struct pt_regs, pc) >> 3:
  val = regs->pc;
  break;
 case __builtin_offsetof(struct pt_regs, pstate) >> 3:
  val = regs->pstate;
  break;
 default:
  val = 0;
 }

 return val;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pt_regs_read_reg(const struct pt_regs *regs, int r)
{
 return (r == 31) ? 0 : regs->regs[r];
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pt_regs_write_reg(struct pt_regs *regs, int r,
         unsigned long val)
{
 if (r != 31)
  regs->regs[r] = val;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->regs[0];
}


struct task_struct;
int valid_user_regs(struct user_pt_regs *regs, struct task_struct *task);







# 1 "../include/asm-generic/ptrace.h" 1
# 22 "../include/asm-generic/ptrace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return ((unsigned long)(regs)->pc);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void instruction_pointer_set(struct pt_regs *regs,
                                           unsigned long val)
{
 ((regs)->pc = ((u64) (val)));
}
# 44 "../include/asm-generic/ptrace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return (!(((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)) ? (regs)->sp : (regs)->regs[13]);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void user_stack_pointer_set(struct pt_regs *regs,
                                          unsigned long val)
{
 (!(((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)) ? ((regs)->sp = val) : ((regs)->regs[13] = val));
}
# 62 "../include/asm-generic/ptrace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return ((unsigned long)(regs)->regs[29]);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void frame_pointer_set(struct pt_regs *regs,
                                     unsigned long val)
{
 ((regs)->regs[29] = ((u64) (val)));
}
# 328 "../arch/arm64/include/asm/ptrace.h" 2



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void procedure_link_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 ((regs)->regs[30]) = val;
}


extern unsigned long profile_pc(struct pt_regs *regs);
# 22 "../arch/arm64/include/asm/irqflags.h" 2




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags;
 asm volatile(
  "mrs	%0, daif		// arch_local_irq_save\n"
  "msr	daifset, #2"
  : "=r" (flags)
  :
  : "memory");
 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_local_irq_enable(void)
{
 asm volatile(
  "msr	daifclr, #2		// arch_local_irq_enable"
  :
  :
  : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_local_irq_disable(void)
{
 asm volatile(
  "msr	daifset, #2		// arch_local_irq_disable"
  :
  :
  : "memory");
}
# 65 "../arch/arm64/include/asm/irqflags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long arch_local_save_flags(void)
{
 unsigned long flags;
 asm volatile(
  "mrs	%0, daif		// arch_local_save_flags"
  : "=r" (flags)
  :
  : "memory");
 return flags;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_local_irq_restore(unsigned long flags)
{
 asm volatile(
  "msr	daif, %0		// arch_local_irq_restore"
 :
 : "r" (flags)
 : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return flags & 0x00000080;
}
# 17 "../include/linux/irqflags.h" 2
# 55 "../include/linux/spinlock.h" 2



# 1 "../include/linux/bottom_half.h" 1
# 10 "../include/linux/bottom_half.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}
# 59 "../include/linux/spinlock.h" 2
# 82 "../include/linux/spinlock.h"
# 1 "../include/linux/spinlock_types.h" 1
# 13 "../include/linux/spinlock_types.h"
# 1 "../arch/arm64/include/asm/spinlock_types.h" 1
# 27 "../arch/arm64/include/asm/spinlock_types.h"
typedef struct {




 u16 owner;
 u16 next;

} __attribute__((aligned(4))) arch_spinlock_t;



# 1 "../include/asm-generic/qrwlock_types.h" 1





# 1 "../arch/arm64/include/asm/spinlock_types.h" 1
# 7 "../include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {

   u8 wlocked;
   u8 __lstate[3];




  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 40 "../arch/arm64/include/asm/spinlock_types.h" 2
# 14 "../include/linux/spinlock_types.h" 2




# 1 "../include/linux/lockdep.h" 1
# 13 "../include/linux/lockdep.h"
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
# 491 "../include/linux/lockdep.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_off(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_on(void)
{
}
# 529 "../include/linux/lockdep.h"
struct lock_class_key { };
# 542 "../include/linux/lockdep.h"
struct pin_cookie { };
# 552 "../include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 597 "../include/linux/lockdep.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void crossrelease_hist_start(enum xhlock_context_t c) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void crossrelease_hist_end(enum xhlock_context_t c) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_init_task(struct task_struct *task) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_free_task(struct task_struct *task) {}
# 663 "../include/linux/lockdep.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 731 "../include/linux/lockdep.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 19 "../include/linux/spinlock_types.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;
# 32 "../include/linux/spinlock_types.h"
} raw_spinlock_t;
# 64 "../include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 75 "../include/linux/spinlock_types.h"
 };
} spinlock_t;
# 86 "../include/linux/spinlock_types.h"
# 1 "../include/linux/rwlock_types.h" 1
# 11 "../include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;
# 23 "../include/linux/rwlock_types.h"
} rwlock_t;
# 87 "../include/linux/spinlock_types.h" 2
# 83 "../include/linux/spinlock.h" 2





# 1 "../arch/arm64/include/asm/spinlock.h" 1
# 19 "../arch/arm64/include/asm/spinlock.h"
# 1 "../arch/arm64/include/asm/lse.h" 1
# 20 "../arch/arm64/include/asm/spinlock.h" 2

# 1 "../arch/arm64/include/asm/processor.h" 1
# 37 "../arch/arm64/include/asm/processor.h"
# 1 "../include/linux/string.h" 1
# 10 "../include/linux/string.h"
# 1 "../include/uapi/linux/string.h" 1
# 11 "../include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "../arch/arm64/include/asm/string.h" 1
# 21 "../arch/arm64/include/asm/string.h"
extern char *strrchr(const char *, int c);


extern char *strchr(const char *, int c);


extern int strcmp(const char *, const char *);


extern int strncmp(const char *, const char *, __kernel_size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *, __kernel_size_t);


extern int memcmp(const void *, const void *, size_t);


extern void *memchr(const void *, int, __kernel_size_t);



extern void *memcpy(void *, const void *, __kernel_size_t);
extern void *__memcpy(void *, const void *, __kernel_size_t);


extern void *memmove(void *, const void *, __kernel_size_t);
extern void *__memmove(void *, const void *, __kernel_size_t);


extern void *memset(void *, int, __kernel_size_t);
extern void *__memset(void *, int, __kernel_size_t);
# 20 "../include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);
# 49 "../include/linux/string.h"
extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);





extern char * strchrnul(const char *,int);


extern char * strnchr(const char *, size_t, int);




extern char * __attribute__((warn_unused_result)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);
# 88 "../include/linux/string.h"
extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}
# 140 "../include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);





extern int bcmp(const void *,const void *,__kernel_size_t);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) int memcpy_mcsafe(void *dst, const void *src,
  size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void memcpy_flushcache(void *dst, const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
}

void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "../include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((format(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
void memzero_explicit(void *s, size_t count);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((noreturn)) ;
void __read_overflow(void) ;
void __read_overflow2(void) ;
void __read_overflow3(void) ;
void __write_overflow(void) ;


extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) char *strncpy(char *p, const char *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_strncpy(p, q, size);
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) char *strcat(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (p_size == (size_t)-1)
  return __builtin_strcat(p, q);
 if (strlcat(p, q, p_size) >= p_size)
  fortify_panic(__func__);
 return p;
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) __kernel_size_t strlen(const char *p)
{
 __kernel_size_t ret;
 size_t p_size = __builtin_object_size(p, 0);


 if (p_size == (size_t)-1 ||
     (__builtin_constant_p(p[p_size - 1]) && p[p_size - 1] == '\0'))
  return __builtin_strlen(p);
 ret = strnlen(p, p_size);
 if (p_size <= ret)
  fortify_panic(__func__);
 return ret;
}

extern __kernel_size_t __real_strnlen(const char *, __kernel_size_t) __asm__("strnlen");
extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) __kernel_size_t strnlen(const char *p, __kernel_size_t maxlen)
{
 size_t p_size = __builtin_object_size(p, 0);
 __kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
 if (p_size <= ret && maxlen != ret)
  fortify_panic(__func__);
 return ret;
}


extern size_t __real_strlcpy(char *, const char *, size_t) __asm__("strlcpy");
extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) size_t strlcpy(char *p, const char *q, size_t size)
{
 size_t ret;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __real_strlcpy(p, q, size);
 ret = strlen(q);
 if (size) {
  size_t len = (ret >= size) ? size - 1 : ret;
  if (__builtin_constant_p(len) && len >= p_size)
   __write_overflow();
  if (len >= p_size)
   fortify_panic(__func__);
  __builtin_memcpy(p, q, len);
  p[len] = '\0';
 }
 return ret;
}


extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) char *strncat(char *p, const char *q, __kernel_size_t count)
{
 size_t p_len, copy_len;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strncat(p, q, count);
 p_len = strlen(p);
 copy_len = strnlen(q, count);
 if (p_size < p_len + copy_len + 1)
  fortify_panic(__func__);
 __builtin_memcpy(p + p_len, q, copy_len);
 p[p_len + copy_len] = '\0';
 return p;
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memset(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memset(p, c, size);
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memcpy(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcpy(p, q, size);
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memmove(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memmove(p, q, size);
}

extern void *__real_memscan(void *, int, __kernel_size_t) __asm__("memscan");
extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memscan(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memscan(p, c, size);
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) int memcmp(const void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __read_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcmp(p, q, size);
}

extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memchr(const void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memchr(p, c, size);
}

void *__real_memchr_inv(const void *s, int c, size_t n) __asm__("memchr_inv");
extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *memchr_inv(const void *p, int c, size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memchr_inv(p, c, size);
}

extern void *__real_kmemdup(const void *src, size_t len, gfp_t gfp) __asm__("kmemdup");
extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) void *kmemdup(const void *p, size_t size, gfp_t gfp)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_kmemdup(p, size, gfp);
}


extern inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((gnu_inline)) char *strcpy(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strcpy(p, q);
 memcpy(p, q, strlen(q) + 1);
 return p;
}
# 444 "../include/linux/string.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 38 "../arch/arm64/include/asm/processor.h" 2

# 1 "../arch/arm64/include/asm/alternative.h" 1




# 1 "../arch/arm64/include/asm/cpucaps.h" 1
# 6 "../arch/arm64/include/asm/alternative.h" 2
# 1 "../arch/arm64/include/asm/insn.h" 1
# 42 "../arch/arm64/include/asm/insn.h"
enum aarch64_insn_encoding_class {
 AARCH64_INSN_CLS_UNKNOWN,
 AARCH64_INSN_CLS_DP_IMM,
 AARCH64_INSN_CLS_DP_REG,
 AARCH64_INSN_CLS_DP_FPSIMD,
 AARCH64_INSN_CLS_LDST,
 AARCH64_INSN_CLS_BR_SYS,

};

enum aarch64_insn_hint_op {
 AARCH64_INSN_HINT_NOP = 0x0 << 5,
 AARCH64_INSN_HINT_YIELD = 0x1 << 5,
 AARCH64_INSN_HINT_WFE = 0x2 << 5,
 AARCH64_INSN_HINT_WFI = 0x3 << 5,
 AARCH64_INSN_HINT_SEV = 0x4 << 5,
 AARCH64_INSN_HINT_SEVL = 0x5 << 5,
};

enum aarch64_insn_imm_type {
 AARCH64_INSN_IMM_ADR,
 AARCH64_INSN_IMM_26,
 AARCH64_INSN_IMM_19,
 AARCH64_INSN_IMM_16,
 AARCH64_INSN_IMM_14,
 AARCH64_INSN_IMM_12,
 AARCH64_INSN_IMM_9,
 AARCH64_INSN_IMM_7,
 AARCH64_INSN_IMM_6,
 AARCH64_INSN_IMM_S,
 AARCH64_INSN_IMM_R,
 AARCH64_INSN_IMM_MAX
};

enum aarch64_insn_register_type {
 AARCH64_INSN_REGTYPE_RT,
 AARCH64_INSN_REGTYPE_RN,
 AARCH64_INSN_REGTYPE_RT2,
 AARCH64_INSN_REGTYPE_RM,
 AARCH64_INSN_REGTYPE_RD,
 AARCH64_INSN_REGTYPE_RA,
 AARCH64_INSN_REGTYPE_RS,
};

enum aarch64_insn_register {
 AARCH64_INSN_REG_0 = 0,
 AARCH64_INSN_REG_1 = 1,
 AARCH64_INSN_REG_2 = 2,
 AARCH64_INSN_REG_3 = 3,
 AARCH64_INSN_REG_4 = 4,
 AARCH64_INSN_REG_5 = 5,
 AARCH64_INSN_REG_6 = 6,
 AARCH64_INSN_REG_7 = 7,
 AARCH64_INSN_REG_8 = 8,
 AARCH64_INSN_REG_9 = 9,
 AARCH64_INSN_REG_10 = 10,
 AARCH64_INSN_REG_11 = 11,
 AARCH64_INSN_REG_12 = 12,
 AARCH64_INSN_REG_13 = 13,
 AARCH64_INSN_REG_14 = 14,
 AARCH64_INSN_REG_15 = 15,
 AARCH64_INSN_REG_16 = 16,
 AARCH64_INSN_REG_17 = 17,
 AARCH64_INSN_REG_18 = 18,
 AARCH64_INSN_REG_19 = 19,
 AARCH64_INSN_REG_20 = 20,
 AARCH64_INSN_REG_21 = 21,
 AARCH64_INSN_REG_22 = 22,
 AARCH64_INSN_REG_23 = 23,
 AARCH64_INSN_REG_24 = 24,
 AARCH64_INSN_REG_25 = 25,
 AARCH64_INSN_REG_26 = 26,
 AARCH64_INSN_REG_27 = 27,
 AARCH64_INSN_REG_28 = 28,
 AARCH64_INSN_REG_29 = 29,
 AARCH64_INSN_REG_FP = 29,
 AARCH64_INSN_REG_30 = 30,
 AARCH64_INSN_REG_LR = 30,
 AARCH64_INSN_REG_ZR = 31,
 AARCH64_INSN_REG_SP = 31
};

enum aarch64_insn_special_register {
 AARCH64_INSN_SPCLREG_SPSR_EL1 = 0xC200,
 AARCH64_INSN_SPCLREG_ELR_EL1 = 0xC201,
 AARCH64_INSN_SPCLREG_SP_EL0 = 0xC208,
 AARCH64_INSN_SPCLREG_SPSEL = 0xC210,
 AARCH64_INSN_SPCLREG_CURRENTEL = 0xC212,
 AARCH64_INSN_SPCLREG_DAIF = 0xDA11,
 AARCH64_INSN_SPCLREG_NZCV = 0xDA10,
 AARCH64_INSN_SPCLREG_FPCR = 0xDA20,
 AARCH64_INSN_SPCLREG_DSPSR_EL0 = 0xDA28,
 AARCH64_INSN_SPCLREG_DLR_EL0 = 0xDA29,
 AARCH64_INSN_SPCLREG_SPSR_EL2 = 0xE200,
 AARCH64_INSN_SPCLREG_ELR_EL2 = 0xE201,
 AARCH64_INSN_SPCLREG_SP_EL1 = 0xE208,
 AARCH64_INSN_SPCLREG_SPSR_INQ = 0xE218,
 AARCH64_INSN_SPCLREG_SPSR_ABT = 0xE219,
 AARCH64_INSN_SPCLREG_SPSR_UND = 0xE21A,
 AARCH64_INSN_SPCLREG_SPSR_FIQ = 0xE21B,
 AARCH64_INSN_SPCLREG_SPSR_EL3 = 0xF200,
 AARCH64_INSN_SPCLREG_ELR_EL3 = 0xF201,
 AARCH64_INSN_SPCLREG_SP_EL2 = 0xF210
};

enum aarch64_insn_variant {
 AARCH64_INSN_VARIANT_32BIT,
 AARCH64_INSN_VARIANT_64BIT
};

enum aarch64_insn_condition {
 AARCH64_INSN_COND_EQ = 0x0,
 AARCH64_INSN_COND_NE = 0x1,
 AARCH64_INSN_COND_CS = 0x2,
 AARCH64_INSN_COND_CC = 0x3,
 AARCH64_INSN_COND_MI = 0x4,
 AARCH64_INSN_COND_PL = 0x5,
 AARCH64_INSN_COND_VS = 0x6,
 AARCH64_INSN_COND_VC = 0x7,
 AARCH64_INSN_COND_HI = 0x8,
 AARCH64_INSN_COND_LS = 0x9,
 AARCH64_INSN_COND_GE = 0xa,
 AARCH64_INSN_COND_LT = 0xb,
 AARCH64_INSN_COND_GT = 0xc,
 AARCH64_INSN_COND_LE = 0xd,
 AARCH64_INSN_COND_AL = 0xe,
};

enum aarch64_insn_branch_type {
 AARCH64_INSN_BRANCH_NOLINK,
 AARCH64_INSN_BRANCH_LINK,
 AARCH64_INSN_BRANCH_RETURN,
 AARCH64_INSN_BRANCH_COMP_ZERO,
 AARCH64_INSN_BRANCH_COMP_NONZERO,
};

enum aarch64_insn_size_type {
 AARCH64_INSN_SIZE_8,
 AARCH64_INSN_SIZE_16,
 AARCH64_INSN_SIZE_32,
 AARCH64_INSN_SIZE_64,
};

enum aarch64_insn_ldst_type {
 AARCH64_INSN_LDST_LOAD_REG_OFFSET,
 AARCH64_INSN_LDST_STORE_REG_OFFSET,
 AARCH64_INSN_LDST_LOAD_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_LOAD_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_LOAD_EX,
 AARCH64_INSN_LDST_STORE_EX,
};

enum aarch64_insn_adsb_type {
 AARCH64_INSN_ADSB_ADD,
 AARCH64_INSN_ADSB_SUB,
 AARCH64_INSN_ADSB_ADD_SETFLAGS,
 AARCH64_INSN_ADSB_SUB_SETFLAGS
};

enum aarch64_insn_movewide_type {
 AARCH64_INSN_MOVEWIDE_ZERO,
 AARCH64_INSN_MOVEWIDE_KEEP,
 AARCH64_INSN_MOVEWIDE_INVERSE
};

enum aarch64_insn_bitfield_type {
 AARCH64_INSN_BITFIELD_MOVE,
 AARCH64_INSN_BITFIELD_MOVE_UNSIGNED,
 AARCH64_INSN_BITFIELD_MOVE_SIGNED
};

enum aarch64_insn_data1_type {
 AARCH64_INSN_DATA1_REVERSE_16,
 AARCH64_INSN_DATA1_REVERSE_32,
 AARCH64_INSN_DATA1_REVERSE_64,
};

enum aarch64_insn_data2_type {
 AARCH64_INSN_DATA2_UDIV,
 AARCH64_INSN_DATA2_SDIV,
 AARCH64_INSN_DATA2_LSLV,
 AARCH64_INSN_DATA2_LSRV,
 AARCH64_INSN_DATA2_ASRV,
 AARCH64_INSN_DATA2_RORV,
};

enum aarch64_insn_data3_type {
 AARCH64_INSN_DATA3_MADD,
 AARCH64_INSN_DATA3_MSUB,
};

enum aarch64_insn_logic_type {
 AARCH64_INSN_LOGIC_AND,
 AARCH64_INSN_LOGIC_BIC,
 AARCH64_INSN_LOGIC_ORR,
 AARCH64_INSN_LOGIC_ORN,
 AARCH64_INSN_LOGIC_EOR,
 AARCH64_INSN_LOGIC_EON,
 AARCH64_INSN_LOGIC_AND_SETFLAGS,
 AARCH64_INSN_LOGIC_BIC_SETFLAGS
};

enum aarch64_insn_prfm_type {
 AARCH64_INSN_PRFM_TYPE_PLD,
 AARCH64_INSN_PRFM_TYPE_PLI,
 AARCH64_INSN_PRFM_TYPE_PST,
};

enum aarch64_insn_prfm_target {
 AARCH64_INSN_PRFM_TARGET_L1,
 AARCH64_INSN_PRFM_TARGET_L2,
 AARCH64_INSN_PRFM_TARGET_L3,
};

enum aarch64_insn_prfm_policy {
 AARCH64_INSN_PRFM_POLICY_KEEP,
 AARCH64_INSN_PRFM_POLICY_STRM,
};







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_adr(u32 code) { return (code & (0x9F000000)) == (0x10000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_adr_value(void) { return (0x10000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_adrp(u32 code) { return (code & (0x9F000000)) == (0x90000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_adrp_value(void) { return (0x90000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_prfm(u32 code) { return (code & (0x3FC00000)) == (0x39800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_prfm_value(void) { return (0x39800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_prfm_lit(u32 code) { return (code & (0xFF000000)) == (0xD8000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_prfm_lit_value(void) { return (0xD8000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_str_reg(u32 code) { return (code & (0x3FE0EC00)) == (0x38206800); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_str_reg_value(void) { return (0x38206800); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldadd(u32 code) { return (code & (0x3F20FC00)) == (0x38200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldadd_value(void) { return (0x38200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldr_reg(u32 code) { return (code & (0x3FE0EC00)) == (0x38606800); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldr_reg_value(void) { return (0x38606800); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldr_lit(u32 code) { return (code & (0xBF000000)) == (0x18000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldr_lit_value(void) { return (0x18000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldrsw_lit(u32 code) { return (code & (0xFF000000)) == (0x98000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldrsw_lit_value(void) { return (0x98000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_exclusive(u32 code) { return (code & (0x3F800000)) == (0x08000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_exclusive_value(void) { return (0x08000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_load_ex(u32 code) { return (code & (0x3F400000)) == (0x08400000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_load_ex_value(void) { return (0x08400000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_store_ex(u32 code) { return (code & (0x3F400000)) == (0x08000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_store_ex_value(void) { return (0x08000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_stp_post(u32 code) { return (code & (0x7FC00000)) == (0x28800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_stp_post_value(void) { return (0x28800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldp_post(u32 code) { return (code & (0x7FC00000)) == (0x28C00000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldp_post_value(void) { return (0x28C00000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_stp_pre(u32 code) { return (code & (0x7FC00000)) == (0x29800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_stp_pre_value(void) { return (0x29800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ldp_pre(u32 code) { return (code & (0x7FC00000)) == (0x29C00000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ldp_pre_value(void) { return (0x29C00000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_add_imm(u32 code) { return (code & (0x7F000000)) == (0x11000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_add_imm_value(void) { return (0x11000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_adds_imm(u32 code) { return (code & (0x7F000000)) == (0x31000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_adds_imm_value(void) { return (0x31000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_sub_imm(u32 code) { return (code & (0x7F000000)) == (0x51000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_sub_imm_value(void) { return (0x51000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_subs_imm(u32 code) { return (code & (0x7F000000)) == (0x71000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_subs_imm_value(void) { return (0x71000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_movn(u32 code) { return (code & (0x7F800000)) == (0x12800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_movn_value(void) { return (0x12800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_sbfm(u32 code) { return (code & (0x7F800000)) == (0x13000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_sbfm_value(void) { return (0x13000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_bfm(u32 code) { return (code & (0x7F800000)) == (0x33000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_bfm_value(void) { return (0x33000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_movz(u32 code) { return (code & (0x7F800000)) == (0x52800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_movz_value(void) { return (0x52800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ubfm(u32 code) { return (code & (0x7F800000)) == (0x53000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ubfm_value(void) { return (0x53000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_movk(u32 code) { return (code & (0x7F800000)) == (0x72800000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_movk_value(void) { return (0x72800000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_add(u32 code) { return (code & (0x7F200000)) == (0x0B000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_add_value(void) { return (0x0B000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_adds(u32 code) { return (code & (0x7F200000)) == (0x2B000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_adds_value(void) { return (0x2B000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_sub(u32 code) { return (code & (0x7F200000)) == (0x4B000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_sub_value(void) { return (0x4B000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_subs(u32 code) { return (code & (0x7F200000)) == (0x6B000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_subs_value(void) { return (0x6B000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_madd(u32 code) { return (code & (0x7FE08000)) == (0x1B000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_madd_value(void) { return (0x1B000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_msub(u32 code) { return (code & (0x7FE08000)) == (0x1B008000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_msub_value(void) { return (0x1B008000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_udiv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC00800); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_udiv_value(void) { return (0x1AC00800); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_sdiv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC00C00); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_sdiv_value(void) { return (0x1AC00C00); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_lslv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC02000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_lslv_value(void) { return (0x1AC02000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_lsrv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC02400); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_lsrv_value(void) { return (0x1AC02400); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_asrv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC02800); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_asrv_value(void) { return (0x1AC02800); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_rorv(u32 code) { return (code & (0x7FE0FC00)) == (0x1AC02C00); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_rorv_value(void) { return (0x1AC02C00); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_rev16(u32 code) { return (code & (0x7FFFFC00)) == (0x5AC00400); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_rev16_value(void) { return (0x5AC00400); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_rev32(u32 code) { return (code & (0x7FFFFC00)) == (0x5AC00800); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_rev32_value(void) { return (0x5AC00800); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_rev64(u32 code) { return (code & (0x7FFFFC00)) == (0x5AC00C00); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_rev64_value(void) { return (0x5AC00C00); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_and(u32 code) { return (code & (0x7F200000)) == (0x0A000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_and_value(void) { return (0x0A000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_bic(u32 code) { return (code & (0x7F200000)) == (0x0A200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_bic_value(void) { return (0x0A200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_orr(u32 code) { return (code & (0x7F200000)) == (0x2A000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_orr_value(void) { return (0x2A000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_orn(u32 code) { return (code & (0x7F200000)) == (0x2A200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_orn_value(void) { return (0x2A200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_eor(u32 code) { return (code & (0x7F200000)) == (0x4A000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_eor_value(void) { return (0x4A000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_eon(u32 code) { return (code & (0x7F200000)) == (0x4A200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_eon_value(void) { return (0x4A200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ands(u32 code) { return (code & (0x7F200000)) == (0x6A000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ands_value(void) { return (0x6A000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_bics(u32 code) { return (code & (0x7F200000)) == (0x6A200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_bics_value(void) { return (0x6A200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_b(u32 code) { return (code & (0xFC000000)) == (0x14000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_b_value(void) { return (0x14000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_bl(u32 code) { return (code & (0xFC000000)) == (0x94000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_bl_value(void) { return (0x94000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_cbz(u32 code) { return (code & (0x7F000000)) == (0x34000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_cbz_value(void) { return (0x34000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_cbnz(u32 code) { return (code & (0x7F000000)) == (0x35000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_cbnz_value(void) { return (0x35000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_tbz(u32 code) { return (code & (0x7F000000)) == (0x36000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_tbz_value(void) { return (0x36000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_tbnz(u32 code) { return (code & (0x7F000000)) == (0x37000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_tbnz_value(void) { return (0x37000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_bcond(u32 code) { return (code & (0xFF000010)) == (0x54000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_bcond_value(void) { return (0x54000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_svc(u32 code) { return (code & (0xFFE0001F)) == (0xD4000001); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_svc_value(void) { return (0xD4000001); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_hvc(u32 code) { return (code & (0xFFE0001F)) == (0xD4000002); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_hvc_value(void) { return (0xD4000002); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_smc(u32 code) { return (code & (0xFFE0001F)) == (0xD4000003); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_smc_value(void) { return (0xD4000003); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_brk(u32 code) { return (code & (0xFFE0001F)) == (0xD4200000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_brk_value(void) { return (0xD4200000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_exception(u32 code) { return (code & (0xFF000000)) == (0xD4000000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_exception_value(void) { return (0xD4000000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_hint(u32 code) { return (code & (0xFFFFF01F)) == (0xD503201F); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_hint_value(void) { return (0xD503201F); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_br(u32 code) { return (code & (0xFFFFFC1F)) == (0xD61F0000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_br_value(void) { return (0xD61F0000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_blr(u32 code) { return (code & (0xFFFFFC1F)) == (0xD63F0000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_blr_value(void) { return (0xD63F0000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_ret(u32 code) { return (code & (0xFFFFFC1F)) == (0xD65F0000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_ret_value(void) { return (0xD65F0000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_eret(u32 code) { return (code & (0xFFFFFFFF)) == (0xD69F03E0); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_eret_value(void) { return (0xD69F03E0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_mrs(u32 code) { return (code & (0xFFF00000)) == (0xD5300000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_mrs_value(void) { return (0xD5300000); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_msr_imm(u32 code) { return (code & (0xFFF8F01F)) == (0xD500401F); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_msr_imm_value(void) { return (0xD500401F); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool aarch64_insn_is_msr_reg(u32 code) { return (code & (0xFFF00000)) == (0xD5100000); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 aarch64_insn_get_msr_reg_value(void) { return (0xD5100000); }



bool aarch64_insn_is_nop(u32 insn);
bool aarch64_insn_is_branch_imm(u32 insn);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool aarch64_insn_is_adr_adrp(u32 insn)
{
 return aarch64_insn_is_adr(insn) || aarch64_insn_is_adrp(insn);
}

int aarch64_insn_read(void *addr, u32 *insnp);
int aarch64_insn_write(void *addr, u32 insn);
enum aarch64_insn_encoding_class aarch64_get_insn_class(u32 insn);
bool aarch64_insn_uses_literal(u32 insn);
bool aarch64_insn_is_branch(u32 insn);
u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type type, u32 insn);
u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type type,
      u32 insn, u64 imm);
u32 aarch64_insn_decode_register(enum aarch64_insn_register_type type,
      u32 insn);
u32 aarch64_insn_gen_branch_imm(unsigned long pc, unsigned long addr,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_comp_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_register reg,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_cond_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_condition cond);
u32 aarch64_insn_gen_hint(enum aarch64_insn_hint_op op);
u32 aarch64_insn_gen_nop(void);
u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register reg,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register reg,
        enum aarch64_insn_register base,
        enum aarch64_insn_register offset,
        enum aarch64_insn_size_type size,
        enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register reg1,
         enum aarch64_insn_register reg2,
         enum aarch64_insn_register base,
         int offset,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register reg,
       enum aarch64_insn_register base,
       enum aarch64_insn_register state,
       enum aarch64_insn_size_type size,
       enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_ldadd(enum aarch64_insn_register result,
      enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_stadd(enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register dst,
     enum aarch64_insn_register src,
     int imm, enum aarch64_insn_variant variant,
     enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         int immr, int imms,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_bitfield_type type);
u32 aarch64_insn_gen_movewide(enum aarch64_insn_register dst,
         int imm, int shift,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_movewide_type type);
u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_data1(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data1_type type);
u32 aarch64_insn_gen_data2(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data2_type type);
u32 aarch64_insn_gen_data3(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg1,
      enum aarch64_insn_register reg2,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data3_type type);
u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_logic_type type);
u32 aarch64_insn_gen_prefetch(enum aarch64_insn_register base,
         enum aarch64_insn_prfm_type type,
         enum aarch64_insn_prfm_target target,
         enum aarch64_insn_prfm_policy policy);
s32 aarch64_get_branch_offset(u32 insn);
u32 aarch64_set_branch_offset(u32 insn, s32 offset);

bool aarch64_insn_hotpatch_safe(u32 old_insn, u32 new_insn);

int aarch64_insn_patch_text_nosync(void *addr, u32 insn);
int aarch64_insn_patch_text(void *addrs[], u32 insns[], int cnt);

s32 aarch64_insn_adrp_get_offset(u32 insn);
u32 aarch64_insn_adrp_set_offset(u32 insn, s32 offset);

bool aarch32_insn_is_wide(u32 insn);





u32 aarch64_insn_extract_system_reg(u32 insn);
u32 aarch32_insn_extract_reg_num(u32 insn, int offset);
u32 aarch32_insn_mcr_extract_opc2(u32 insn);
u32 aarch32_insn_mcr_extract_crm(u32 insn);

typedef bool (pstate_check_t)(unsigned long);
extern pstate_check_t * const aarch32_opcode_cond_checks[16];
# 7 "../arch/arm64/include/asm/alternative.h" 2
# 17 "../arch/arm64/include/asm/alternative.h"
extern int alternatives_applied;

struct alt_instr {
 s32 orig_offset;
 s32 alt_offset;
 u16 cpufeature;
 u8 orig_len;
 u8 alt_len;
};

typedef void (*alternative_cb_t)(struct alt_instr *alt,
     __le32 *origptr, __le32 *updptr, int nr_inst);

void __attribute__ ((__section__(".init.text"))) apply_alternatives_all(void);
void apply_alternatives(void *start, size_t length);
# 40 "../arch/arm64/include/asm/processor.h" 2
# 1 "../arch/arm64/include/asm/cpufeature.h" 1
# 36 "../arch/arm64/include/asm/cpufeature.h"
# 1 "../include/linux/jump_label.h" 1
# 83 "../include/linux/jump_label.h"
extern bool static_key_initialized;
# 114 "../include/linux/jump_label.h"
struct static_key {
 atomic_t enabled;
};
# 126 "../include/linux/jump_label.h"
enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 188 "../include/linux/jump_label.h"
# 1 "../include/linux/atomic.h" 1




# 1 "../arch/arm64/include/asm/atomic.h" 1
# 36 "../arch/arm64/include/asm/atomic.h"
# 1 "../arch/arm64/include/asm/atomic_ll_sc.h" 1
# 113 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_add(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_add_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_add_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_add_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_add_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_add(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_add_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_add_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_add_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_sub(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_sub_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_sub_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_sub_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_sub_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_sub(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_sub_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_sub_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_sub_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
# 124 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_and(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "and" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_and(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_and_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_and_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_and_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_andnot(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "bic" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_or(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "orr" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_or(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_or_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_or_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_or_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_xor(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "eor" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_xor(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_xor_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_xor_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_fetch_xor_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
# 207 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_add(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_add_return(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_add_return_relaxed(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_add_return_acquire(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_add_return_release(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_add(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_add_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_add_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_add_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_sub(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_sub_return(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_sub_return_relaxed(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_sub_return_acquire(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_sub_return_release(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_sub(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_sub_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_sub_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_sub_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
# 218 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_and(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "and" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_and(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_and_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_and_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_and_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_andnot(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "bic" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_andnot(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_andnot_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_andnot_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_andnot_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_or(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "orr" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_or(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_or_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_or_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_or_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic64_xor(long i, atomic64_t *v) { long result; unsigned long tmp; asm volatile("// atomic64_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "eor" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i)); } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_xor(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_xor_relaxed(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : ); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_xor_acquire(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ; static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic64_fetch_xor_release(long i, atomic64_t *v) { long result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "Ir" (i) : "memory"); return result; } ;






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long
atomic64_dec_if_positive(atomic64_t *v)
{
 long result;
 unsigned long tmp;

 asm volatile("// atomic64_dec_if_positive\n"
"	prfm	pstl1strm, %2\n"
"1:	ldxr	%0, %2\n"
"	subs	%0, %0, #1\n"
"	b.lt	2f\n"
"	stlxr	%w1, %0, %2\n"
"	cbnz	%w1, 1b\n"
"	dmb	ish\n"
"2:"
 : "=&r" (result), "=&r" (tmp), "+Q" (v->counter)
 :
 : "cc", "memory");

 return result;
}
                                        ;
# 277 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_1(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : ); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_2(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : ); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_4(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : ); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_8(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : ); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_acq_1(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_acq_2(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_acq_4(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_acq_8(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_rel_1(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_rel_2(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_rel_4(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_rel_8(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_mb_1(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_mb_2(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_mb_4(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __cmpxchg_case_mb_8(volatile void *ptr, unsigned long old, unsigned long new) { unsigned long tmp, oldval; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(unsigned long *)ptr) : [old] "Lr" (old), [new] "r" (new) : "memory"); return oldval; } ;
# 325 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long __cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : ); return ret; } ;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long __cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "_mb" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "l" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "dmb ish" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : "memory"); return ret; } ;
# 37 "../arch/arm64/include/asm/atomic.h" 2




# 1 "../arch/arm64/include/asm/cmpxchg.h" 1
# 23 "../arch/arm64/include/asm/cmpxchg.h"
# 1 "../arch/arm64/include/asm/atomic.h" 1
# 24 "../arch/arm64/include/asm/cmpxchg.h" 2
# 56 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_1(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_2(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_4(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_8(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_acq_1(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_acq_2(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_acq_4(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_acq_8(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_rel_1(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_rel_2(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_rel_4(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_rel_8(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_mb_1(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_mb_2(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_mb_4(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __xchg_case_mb_8(unsigned long x, volatile void *ptr) { unsigned long ret, tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(unsigned long *)ptr) : "r" (x) : "memory"); return ret; }
# 96 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __xchg(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_1(x, ptr); case 2: return __xchg_case_2(x, ptr); case 4: return __xchg_case_4(x, ptr); case 8: return __xchg_case_8(x, ptr); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_0(void) ; if (__cond) __compiletime_assert_0(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __xchg_acq(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_acq_1(x, ptr); case 2: return __xchg_case_acq_2(x, ptr); case 4: return __xchg_case_acq_4(x, ptr); case 8: return __xchg_case_acq_8(x, ptr); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_1(void) ; if (__cond) __compiletime_assert_1(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __xchg_rel(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_rel_1(x, ptr); case 2: return __xchg_case_rel_2(x, ptr); case 4: return __xchg_case_rel_4(x, ptr); case 8: return __xchg_case_rel_8(x, ptr); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_2(void) ; if (__cond) __compiletime_assert_2(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __xchg_mb(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_mb_1(x, ptr); case 2: return __xchg_case_mb_2(x, ptr); case 4: return __xchg_case_mb_4(x, ptr); case 8: return __xchg_case_mb_8(x, ptr); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_3(void) ; if (__cond) __compiletime_assert_3(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
# 139 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_1(ptr, (u8)old, new); case 2: return __cmpxchg_case_2(ptr, (u16)old, new); case 4: return __cmpxchg_case_4(ptr, old, new); case 8: return __cmpxchg_case_8(ptr, old, new); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_4(void) ; if (__cond) __compiletime_assert_4(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __cmpxchg_acq(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_acq_1(ptr, (u8)old, new); case 2: return __cmpxchg_case_acq_2(ptr, (u16)old, new); case 4: return __cmpxchg_case_acq_4(ptr, old, new); case 8: return __cmpxchg_case_acq_8(ptr, old, new); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_5(void) ; if (__cond) __compiletime_assert_5(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __cmpxchg_rel(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_rel_1(ptr, (u8)old, new); case 2: return __cmpxchg_case_rel_2(ptr, (u16)old, new); case 4: return __cmpxchg_case_rel_4(ptr, old, new); case 8: return __cmpxchg_case_rel_8(ptr, old, new); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_6(void) ; if (__cond) __compiletime_assert_6(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __cmpxchg_mb(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_mb_1(ptr, (u8)old, new); case 2: return __cmpxchg_case_mb_2(ptr, (u16)old, new); case 4: return __cmpxchg_case_mb_4(ptr, old, new); case 8: return __cmpxchg_case_mb_8(ptr, old, new); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_7(void) ; if (__cond) __compiletime_assert_7(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
# 243 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cmpwait_case_1(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "b" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cmpwait_case_2(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "h" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cmpwait_case_4(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cmpwait_case_8(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "" "[tmp], %[v]\n" "	eor	%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	cbnz	%" "" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
# 271 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __cmpwait(volatile void *ptr, unsigned long val, int size) { switch (size) { case 1: return __cmpwait_case_1(ptr, (u8)val); case 2: return __cmpwait_case_2(ptr, (u16)val); case 4: return __cmpwait_case_4(ptr, val); case 8: return __cmpwait_case_8(ptr, val); default: do { bool __cond = !(!(1)); extern void __compiletime_assert_8(void) ; if (__cond) __compiletime_assert_8(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } do { ; do { } while (1); } while (0); }
# 42 "../arch/arm64/include/asm/atomic.h" 2
# 6 "../include/linux/atomic.h" 2
# 531 "../include/linux/atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_add_unless(atomic_t *v, int a, int u)
{
 return ({ typeof((v)->counter) c, old; c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; }); while (c != (u) && (old = ({ __typeof__(*(&(((v))->counter))) __ret; __ret = (__typeof__(*(&(((v))->counter)))) __cmpxchg_mb((&(((v))->counter)), (unsigned long)((c)), (unsigned long)((c + (a))), sizeof(*(&(((v))->counter)))); __ret; })) != c) c = old; c; }) != u;
}
# 587 "../include/linux/atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_inc_not_zero_hint(atomic_t *v, int hint)
{
 int val, c = hint;


 if (!hint)
  return atomic_add_unless((v), 1, 0);

 do {
  val = ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((c)), (unsigned long)((c + 1)), sizeof(*(&((v)->counter)))); __ret; });
  if (val == c)
   return 1;
  c = val;
 } while (c);

 return 0;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_inc_unless_negative(atomic_t *p)
{
 int v, v1;
 for (v = 0; v >= 0; v = v1) {
  v1 = ({ __typeof__(*(&((p)->counter))) __ret; __ret = (__typeof__(*(&((p)->counter)))) __cmpxchg_mb((&((p)->counter)), (unsigned long)((v)), (unsigned long)((v + 1)), sizeof(*(&((p)->counter)))); __ret; });
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_dec_unless_positive(atomic_t *p)
{
 int v, v1;
 for (v = 0; v <= 0; v = v1) {
  v1 = ({ __typeof__(*(&((p)->counter))) __ret; __ret = (__typeof__(*(&((p)->counter)))) __cmpxchg_mb((&((p)->counter)), (unsigned long)((v)), (unsigned long)((v - 1)), sizeof(*(&((p)->counter)))); __ret; });
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}
# 640 "../include/linux/atomic.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_dec_if_positive(atomic_t *v)
{
 int c, old, dec;
 c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = ({ __typeof__(*(&(((v))->counter))) __ret; __ret = (__typeof__(*(&(((v))->counter)))) __cmpxchg_mb((&(((v))->counter)), (unsigned long)((c)), (unsigned long)((dec)), sizeof(*(&(((v))->counter)))); __ret; });
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}
# 1082 "../include/linux/atomic.h"
# 1 "../include/asm-generic/atomic-long.h" 1
# 12 "../include/asm-generic/atomic-long.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 13 "../include/asm-generic/atomic-long.h" 2
# 24 "../include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
# 45 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_read(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; }); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_read_acquire(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_9(void) ; if (__cond) __compiletime_assert_9(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*&(v)->counter) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*&(v)->counter) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*&(v)->counter) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*&(v)->counter) : "memory"); break; } __u.__val; }); }
# 57 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_long_set(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; ({ union { typeof(((v)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((v)->counter))) ((i)) }; __write_once_size(&(((v)->counter)), __u.__c, sizeof(((v)->counter))); __u.__val; }); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void atomic_long_set_release(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; do { union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) ((i)) }; do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_10(void) ; if (__cond) __compiletime_assert_10(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(v)->counter) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(v)->counter) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(v)->counter) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(v)->counter) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); }
# 70 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_add_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_release(i, v); }
# 102 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_inc(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_add(1, (v));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_dec(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_sub(1, (v));
}
# 125 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or_release(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor_relaxed(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor_acquire(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor_release(i, v); }
# 161 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_relaxed(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_acquire(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add_release(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_relaxed(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_acquire(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub_release(1, (v)); }
# 181 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_add(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_add(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_sub(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_sub(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_and(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_and(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_andnot(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_andnot(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_or(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_or(i, v); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_xor(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_xor(i, v); }



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_long_sub_and_test(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (atomic64_sub_return((i), (v)) == 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_long_dec_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (atomic64_sub_return(1, (v)) == 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_long_inc_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (atomic64_add_return(1, (v)) == 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int atomic_long_add_negative(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (atomic64_add_return((i), (v)) < 0);
}
# 226 "../include/asm-generic/atomic-long.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_relaxed(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_acquire(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return_release(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_relaxed(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_acquire(1, (v)); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return_release(1, (v)); }



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long atomic_long_add_unless(atomic_long_t *l, long a, long u)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(({ typeof((v)->counter) c, old; c = ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; }); while (c != (u) && (old = ({ __typeof__(*(&(((v))->counter))) __ret; __ret = (__typeof__(*(&(((v))->counter)))) __cmpxchg_mb((&(((v))->counter)), (unsigned long)((c)), (unsigned long)((c + (a))), sizeof(*(&(((v))->counter)))); __ret; })) != c) c = old; c; }) != u);
}
# 1083 "../include/linux/atomic.h" 2
# 189 "../include/linux/jump_label.h" 2


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int static_key_count(struct static_key *key)
{
 return ({ union { typeof((&key->enabled)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); else __read_once_size_nocheck(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void jump_label_init(void)
{
 static_key_initialized = true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_false(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 0))
  return true;
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_true(struct static_key *key)
{
 if (__builtin_expect(!!(static_key_count(key) > 0), 1))
  return true;
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void static_key_slow_inc(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("%s used before call to jump_label_init", __func__); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 217; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_add(1, (&key->enabled));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void static_key_slow_dec(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("%s used before call to jump_label_init", __func__); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 223; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_sub(1, (&key->enabled));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int jump_label_text_reserved(void *start, void *end)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void jump_label_lock(void) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void jump_label_unlock(void) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int jump_label_apply_nops(struct module *mod)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void static_key_enable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("%s used before call to jump_label_init", __func__); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 245; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (({ union { typeof((&key->enabled)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); else __read_once_size_nocheck(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); do { } while (0); __u.__val; }) != 0) {
  ({ int __ret_warn_on = !!(({ union { typeof((&key->enabled)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); else __read_once_size_nocheck(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); do { } while (0); __u.__val; }) != 1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 248; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 ({ union { typeof(((&key->enabled)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&key->enabled)->counter))) ((1)) }; __write_once_size(&(((&key->enabled)->counter)), __u.__c, sizeof(((&key->enabled)->counter))); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void static_key_disable(struct static_key *key)
{
 ({ int __ret_warn_on = !!(!static_key_initialized); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("%s used before call to jump_label_init", __func__); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 256; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (({ union { typeof((&key->enabled)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); else __read_once_size_nocheck(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); do { } while (0); __u.__val; }) != 1) {
  ({ int __ret_warn_on = !!(({ union { typeof((&key->enabled)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); else __read_once_size_nocheck(&((&key->enabled)->counter), __u.__c, sizeof((&key->enabled)->counter)); do { } while (0); __u.__val; }) != 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/jump_label.h\"; .popsection; .long 2b - 0b; .short 259; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 ({ union { typeof(((&key->enabled)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&key->enabled)->counter))) ((0)) }; __write_once_size(&(((&key->enabled)->counter)), __u.__c, sizeof(((&key->enabled)->counter))); __u.__val; });
}
# 285 "../include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 318 "../include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 37 "../arch/arm64/include/asm/cpufeature.h" 2
# 53 "../arch/arm64/include/asm/cpufeature.h"
enum ftr_type {
 FTR_EXACT,
 FTR_LOWER_SAFE,
 FTR_HIGHER_SAFE,
 FTR_HIGHER_OR_ZERO_SAFE,
};
# 69 "../arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_bits {
 bool sign;
 bool visible;
 bool strict;
 enum ftr_type type;
 u8 shift;
 u8 width;
 s64 safe_val;
};






struct arm64_ftr_reg {
 const char *name;
 u64 strict_mask;
 u64 user_mask;
 u64 sys_val;
 u64 user_val;
 const struct arm64_ftr_bits *ftr_bits;
};

extern struct arm64_ftr_reg arm64_ftr_reg_ctrel0;
# 299 "../arch/arm64/include/asm/cpufeature.h"
struct arm64_cpu_capabilities {
 const char *desc;
 u16 capability;
 u16 type;
 bool (*matches)(const struct arm64_cpu_capabilities *caps, int scope);





 void (*cpu_enable)(const struct arm64_cpu_capabilities *cap);
 union {
  struct {
   struct midr_range midr_range;
  };

  const struct midr_range *midr_range_list;
  struct {
   u32 sys_reg;
   u8 field_pos;
   u8 min_field_value;
   u8 hwcap_type;
   bool sign;
   unsigned long hwcap;
  };
 };
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpucap_default_scope(const struct arm64_cpu_capabilities *cap)
{
 return cap->type & (((u16)(1UL << (1))) | ((u16)(1UL << (0))) | ((u16)(1UL << (2))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
cpucap_late_cpu_optional(const struct arm64_cpu_capabilities *cap)
{
 return !!(cap->type & ((u16)(1UL << (5))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
cpucap_late_cpu_permitted(const struct arm64_cpu_capabilities *cap)
{
 return !!(cap->type & ((u16)(1UL << (4))));
}

extern unsigned long cpu_hwcaps[(((30) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
extern struct static_key_false cpu_hwcap_keys[30];
extern struct static_key_false arm64_const_caps_ready;

bool this_cpu_has_cap(unsigned int cap);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpu_have_feature(unsigned int num)
{
 return elf_hwcap & (1UL << num);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __cpus_have_const_cap(int num)
{
 if (num >= 30)
  return false;
 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&cpu_hwcap_keys[num])->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&cpu_hwcap_keys[num])->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&cpu_hwcap_keys[num])->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&cpu_hwcap_keys[num])->key) > 0; })), 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpus_have_cap(unsigned int num)
{
 if (num >= 30)
  return false;
 return test_bit(num, cpu_hwcaps);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpus_have_const_cap(int num)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&arm64_const_caps_ready)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&arm64_const_caps_ready)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&arm64_const_caps_ready)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&arm64_const_caps_ready)->key) > 0; })), 1))
  return __cpus_have_const_cap(num);
 else
  return cpus_have_cap(num);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpus_set_cap(unsigned int num)
{
 if (num >= 30) {
  printk("\001" "4" "Attempt to set an illegal CPU capability (%d >= %d)\n", num, 30);

 } else {
  __set_bit(num, cpu_hwcaps);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((__const__))
cpuid_feature_extract_signed_field_width(u64 features, int field, int width)
{
 return (s64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((__const__))
cpuid_feature_extract_signed_field(u64 features, int field)
{
 return cpuid_feature_extract_signed_field_width(features, field, 4);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field_width(u64 features, int field, int width)
{
 return (u64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field(u64 features, int field)
{
 return cpuid_feature_extract_unsigned_field_width(features, field, 4);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 arm64_ftr_mask(const struct arm64_ftr_bits *ftrp)
{
 return (u64)(((~0UL) - (1UL << (ftrp->shift)) + 1) & (~0UL >> (64 - 1 - (ftrp->shift + ftrp->width - 1))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 arm64_ftr_reg_user_value(const struct arm64_ftr_reg *reg)
{
 return (reg->user_val | (reg->sys_val & reg->user_mask));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((__const__))
cpuid_feature_extract_field_width(u64 features, int field, int width, bool sign)
{
 return (sign) ?
  cpuid_feature_extract_signed_field_width(features, field, width) :
  cpuid_feature_extract_unsigned_field_width(features, field, width);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((__const__))
cpuid_feature_extract_field(u64 features, int field, bool sign)
{
 return cpuid_feature_extract_field_width(features, field, 4, sign);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 arm64_ftr_value(const struct arm64_ftr_bits *ftrp, u64 val)
{
 return (s64)cpuid_feature_extract_field_width(val, ftrp->shift, ftrp->width, ftrp->sign);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool id_aa64mmfr0_mixed_endian_el0(u64 mmfr0)
{
 return cpuid_feature_extract_unsigned_field(mmfr0, 8) == 0x1 ||
  cpuid_feature_extract_unsigned_field(mmfr0, 16) == 0x1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool id_aa64pfr0_32bit_el0(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 0);

 return val == 0x2;
}

void __attribute__ ((__section__(".init.text"))) setup_cpu_features(void);
void check_local_cpu_capabilities(void);


u64 read_sanitised_ftr_reg(u32 id);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpu_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" "	.inst 0xd5200000|(\\sreg)|(.L__reg_num_\\rt)\n" "	.endm\n" "	mrs_s %0, " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool system_supports_32bit_el0(void)
{
 return cpus_have_const_cap(13);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool system_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool system_supports_fpsimd(void)
{
 return !cpus_have_const_cap(16);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool system_uses_ttbr0_pan(void)
{
 return 1 &&
  !cpus_have_const_cap(4);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arm64_get_ssbd_state(void)
{




 return -1;

}

void arm64_set_ssbd_mitigation(bool state);
# 41 "../arch/arm64/include/asm/processor.h" 2
# 1 "../arch/arm64/include/asm/fpsimd.h" 1
# 31 "../arch/arm64/include/asm/fpsimd.h"
struct fpsimd_state {
 union {
  struct user_fpsimd_state user_fpsimd;
  struct {
   __uint128_t vregs[32];
   u32 fpsr;
   u32 fpcr;
  };
 };

 unsigned int cpu;
};
# 56 "../arch/arm64/include/asm/fpsimd.h"
struct task_struct;

extern void fpsimd_save_state(struct fpsimd_state *state);
extern void fpsimd_load_state(struct fpsimd_state *state);

extern void fpsimd_thread_switch(struct task_struct *next);
extern void fpsimd_flush_thread(void);

extern void fpsimd_preserve_current_state(void);
extern void fpsimd_restore_current_state(void);
extern void fpsimd_update_current_state(struct fpsimd_state *state);

extern void fpsimd_flush_task_state(struct task_struct *target);


extern void __efi_fpsimd_begin(void);
extern void __efi_fpsimd_end(void);
# 42 "../arch/arm64/include/asm/processor.h" 2
# 1 "../arch/arm64/include/asm/hw_breakpoint.h" 1
# 22 "../arch/arm64/include/asm/hw_breakpoint.h"
# 1 "../arch/arm64/include/asm/virt.h" 1
# 61 "../arch/arm64/include/asm/virt.h"
# 1 "../arch/arm64/include/asm/sections.h" 1
# 19 "../arch/arm64/include/asm/sections.h"
# 1 "../include/asm-generic/sections.h" 1
# 34 "../include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];


extern char __ctors_start[], __ctors_end[];

extern const void __nosave_begin, __nosave_end;
# 62 "../include/asm-generic/sections.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 86 "../include/asm-generic/sections.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 103 "../include/asm-generic/sections.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 120 "../include/asm-generic/sections.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 134 "../include/asm-generic/sections.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 20 "../arch/arm64/include/asm/sections.h" 2

extern char __alt_instructions[], __alt_instructions_end[];
extern char __exception_text_start[], __exception_text_end[];
extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
extern char __hyp_text_start[], __hyp_text_end[];
extern char __idmap_text_start[], __idmap_text_end[];
extern char __initdata_begin[], __initdata_end[];
extern char __inittext_begin[], __inittext_end[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __mmuoff_data_start[], __mmuoff_data_end[];
# 62 "../arch/arm64/include/asm/virt.h" 2
# 74 "../arch/arm64/include/asm/virt.h"
extern u32 __boot_cpu_mode[2];

void __hyp_set_vectors(phys_addr_t phys_vector_base);
void __hyp_reset_vectors(void);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_hyp_mode_available(void)
{
 return (__boot_cpu_mode[0] == (0xe12) &&
  __boot_cpu_mode[1] == (0xe12));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_hyp_mode_mismatched(void)
{
 return __boot_cpu_mode[0] != __boot_cpu_mode[1];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_kernel_in_hyp_mode(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "CurrentEL" : "=r" (__val)); __val; }) == (2 << 2);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool has_vhe(void)
{
 if (cpus_have_const_cap(11))
  return true;

 return false;
}
# 23 "../arch/arm64/include/asm/hw_breakpoint.h" 2



struct arch_hw_breakpoint_ctrl {
 u32 __reserved : 19,
 len : 8,
 type : 2,
 privilege : 2,
 enabled : 1;
};

struct arch_hw_breakpoint {
 u64 address;
 u64 trigger;
 struct arch_hw_breakpoint_ctrl ctrl;
};







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 encode_ctrl_reg(struct arch_hw_breakpoint_ctrl ctrl)
{
 u32 val = (ctrl.len << 5) | (ctrl.type << 3) | (ctrl.privilege << 1) |
  ctrl.enabled;

 if (is_kernel_in_hyp_mode() && ctrl.privilege == 1)
  val |= (1 << 13);

 return val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void decode_ctrl_reg(u32 reg,
       struct arch_hw_breakpoint_ctrl *ctrl)
{
 ctrl->enabled = reg & 0x1;
 reg >>= 1;
 ctrl->privilege = reg & 0x3;
 reg >>= 2;
 ctrl->type = reg & 0x3;
 reg >>= 2;
 ctrl->len = reg & 0xff;
}
# 120 "../arch/arm64/include/asm/hw_breakpoint.h"
struct task_struct;
struct notifier_block;
struct perf_event;
struct pmu;

extern int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl ctrl,
      int *gen_len, int *gen_type, int *offset);
extern int arch_check_bp_in_kernelspace(struct perf_event *bp);
extern int arch_validate_hwbkpt_settings(struct perf_event *bp);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);

extern int arch_install_hw_breakpoint(struct perf_event *bp);
extern void arch_uninstall_hw_breakpoint(struct perf_event *bp);
extern void hw_breakpoint_pmu_read(struct perf_event *bp);
extern int hw_breakpoint_slots(int type);


extern void hw_breakpoint_thread_switch(struct task_struct *next);
extern void ptrace_hw_copy_thread(struct task_struct *task);
# 150 "../arch/arm64/include/asm/hw_breakpoint.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_num_brps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      12);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_num_wrps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      20);
}
# 43 "../arch/arm64/include/asm/processor.h" 2

# 1 "../arch/arm64/include/asm/pgtable-hwdef.h" 1
# 45 "../arch/arm64/include/asm/processor.h" 2

# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 47 "../arch/arm64/include/asm/processor.h" 2
# 81 "../arch/arm64/include/asm/processor.h"
extern phys_addr_t arm64_dma_phys_limit;


extern unsigned int boot_reason;
extern unsigned int cold_boot;

struct debug_info {


 int suspended_step;

 int bps_disabled;
 int wps_disabled;

 struct perf_event *hbp_break[16];
 struct perf_event *hbp_watch[16];

};

struct cpu_context {
 unsigned long x19;
 unsigned long x20;
 unsigned long x21;
 unsigned long x22;
 unsigned long x23;
 unsigned long x24;
 unsigned long x25;
 unsigned long x26;
 unsigned long x27;
 unsigned long x28;
 unsigned long fp;
 unsigned long sp;
 unsigned long pc;
};

struct thread_struct {
 struct cpu_context cpu_context;
 unsigned long tp_value;

 unsigned long tp2_value;

 struct fpsimd_state fpsimd_state;
 unsigned long fault_address;
 unsigned long fault_code;
 struct debug_info debug;
};
# 143 "../arch/arm64/include/asm/processor.h"
void tls_preserve_current_state(void);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void start_thread_common(struct pt_regs *regs, unsigned long pc)
{
 memset(regs, 0, sizeof(*regs));
 forget_syscall(regs);
 regs->pc = pc;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_ssbs_bit(struct pt_regs *regs)
{
 regs->pstate |= 0x00001000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_compat_ssbs_bit(struct pt_regs *regs)
{
 regs->pstate |= 0x00800000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void start_thread(struct pt_regs *regs, unsigned long pc,
    unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000000;

 if (arm64_get_ssbd_state() != 2)
  set_ssbs_bit(regs);

 regs->sp = sp;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void compat_start_thread(struct pt_regs *regs, unsigned long pc,
           unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000010;
 if (pc & 1)
  regs->pstate |= 0x00000020;





 if (arm64_get_ssbd_state() != 2)
  set_compat_ssbs_bit(regs);

 regs->regs[13] = sp;
}



struct task_struct;


extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpu_relax(void)
{
 asm volatile("yield" ::: "memory");
}


extern struct task_struct *cpu_switch_to(struct task_struct *prev,
      struct task_struct *next);
# 223 "../arch/arm64/include/asm/processor.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void prefetch(const void *ptr)
{
 asm volatile("prfm pldl1keep, [%x0]\n" : : "r" (ptr));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void prefetchw(const void *ptr)
{
 asm volatile("prfm pstl1keep, [%x0]\n" : : "r" (ptr));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void spin_lock_prefetch(const void *ptr)
{
 asm volatile("prfm pstl1strm, [%x0]" : : "p" (ptr));


}





void cpu_enable_pan(const struct arm64_cpu_capabilities *__unused);
void cpu_enable_cache_maint_trap(const struct arm64_cpu_capabilities *__unused);



long set_tagged_addr_ctrl(unsigned long arg);
long get_tagged_addr_ctrl(void);
# 22 "../arch/arm64/include/asm/spinlock.h" 2
# 32 "../arch/arm64/include/asm/spinlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_spin_lock(arch_spinlock_t *lock)
{
 unsigned int tmp;
 arch_spinlock_t lockval, newval;

 asm volatile(

 "	prfm	pstl1strm, %3\n""1:	ldaxr	%w0, %3\n""	add	%w1, %w0, %w5\n""	stxr	%w2, %w1, %3\n""	cbnz	%w2, 1b\n"
# 53 "../arch/arm64/include/asm/spinlock.h"
"	eor	%w1, %w0, %w0, ror #16\n"
"	cbz	%w1, 3f\n"




"	sevl\n"
"2:	wfe\n"
"	ldaxrh	%w2, %4\n"
"	eor	%w1, %w2, %w0, lsr #16\n"
"	cbnz	%w1, 2b\n"

"3:"
 : "=&r" (lockval), "=&r" (newval), "=&r" (tmp), "+Q" (*lock)
 : "Q" (lock->owner), "I" (1 << 16)
 : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_spin_trylock(arch_spinlock_t *lock)
{
 unsigned int tmp;
 arch_spinlock_t lockval;

 asm volatile("1:	ldaxr	%w0, %2\n" "	eor	%w1, %w0, %w0, ror #16\n" "	cbnz	%w1, 2f\n" "	add	%w0, %w0, %3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "2:"
# 94 "../arch/arm64/include/asm/spinlock.h"
 : "=&r" (lockval), "=&r" (tmp), "+Q" (*lock)
 : "I" (1 << 16)
 : "memory");

 return !tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_spin_unlock(arch_spinlock_t *lock)
{
 unsigned long tmp;

 asm volatile("	ldrh	%w1, %0\n" "	add	%w1, %w1, #1\n" "	stlrh	%w1, %0"
# 114 "../arch/arm64/include/asm/spinlock.h"
 : "=Q" (lock->owner), "=&r" (tmp)
 :
 : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_spin_value_unlocked(arch_spinlock_t lock)
{
 return lock.owner == lock.next;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_spin_is_locked(arch_spinlock_t *lock)
{




 asm volatile("dmb " "ish" : : : "memory");
 return !arch_spin_value_unlocked(({ union { typeof(*lock) __val; char __c[1]; } __u; if (1) __read_once_size(&(*lock), __u.__c, sizeof(*lock)); else __read_once_size_nocheck(&(*lock), __u.__c, sizeof(*lock)); do { } while (0); __u.__val; }));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_spin_is_contended(arch_spinlock_t *lock)
{
 arch_spinlock_t lockval = ({ union { typeof(*lock) __val; char __c[1]; } __u; if (1) __read_once_size(&(*lock), __u.__c, sizeof(*lock)); else __read_once_size_nocheck(&(*lock), __u.__c, sizeof(*lock)); do { } while (0); __u.__val; });
 return (lockval.next - lockval.owner) > 1;
}


# 1 "./arch/arm64/include/generated/asm/qrwlock.h" 1
# 1 "../include/asm-generic/qrwlock.h" 1
# 39 "../include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int queued_read_can_lock(struct qrwlock *lock)
{
 return !(({ union { typeof((&lock->cnts)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); else __read_once_size_nocheck(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); do { } while (0); __u.__val; }) & 0x1ff);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int queued_write_can_lock(struct qrwlock *lock)
{
 return !({ union { typeof((&lock->cnts)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); else __read_once_size_nocheck(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); do { } while (0); __u.__val; });
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int queued_read_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = ({ union { typeof((&lock->cnts)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); else __read_once_size_nocheck(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1)) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int queued_write_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = ({ union { typeof((&lock->cnts)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); else __read_once_size_nocheck(&((&lock->cnts)->counter), __u.__c, sizeof((&lock->cnts)->counter)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(({ __typeof__(*(&((&lock->cnts)->counter))) __ret; __ret = (__typeof__(*(&((&lock->cnts)->counter)))) __cmpxchg_acq((&((&lock->cnts)->counter)), (unsigned long)((cnts)), (unsigned long)((cnts | 0x0ff)), sizeof(*(&((&lock->cnts)->counter)))); __ret; }) == cnts), 1);

}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void queued_read_lock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
  return;


 queued_read_lock_slowpath(lock);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void queued_write_lock(struct qrwlock *lock)
{

 if (({ __typeof__(*(&((&lock->cnts)->counter))) __ret; __ret = (__typeof__(*(&((&lock->cnts)->counter)))) __cmpxchg_acq((&((&lock->cnts)->counter)), (unsigned long)((0)), (unsigned long)((0x0ff)), sizeof(*(&((&lock->cnts)->counter)))); __ret; }) == 0)
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void queued_write_unlock(struct qrwlock *lock)
{
 do { union { typeof(*&lock->wlocked) __val; char __c[1]; } __u = { .__val = ( typeof(*&lock->wlocked)) (0) }; do { bool __cond = !((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long))); extern void __compiletime_assert_11(void) ; if (__cond) __compiletime_assert_11(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&lock->wlocked)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&lock->wlocked) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&lock->wlocked) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&lock->wlocked) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&lock->wlocked) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 2 "./arch/arm64/include/generated/asm/qrwlock.h" 2
# 142 "../arch/arm64/include/asm/spinlock.h" 2
# 89 "../include/linux/spinlock.h" 2
# 163 "../include/linux/spinlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 arch_spin_lock(&lock->raw_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 arch_spin_lock(&lock->raw_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 return arch_spin_trylock(&(lock)->raw_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 arch_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 289 "../include/linux/spinlock.h"
# 1 "../include/linux/rwlock.h" 1
# 290 "../include/linux/spinlock.h" 2





# 1 "../include/linux/spinlock_api_smp.h" 1
# 18 "../include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((section(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((section(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((section(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 104 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
# 119 "../include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}

# 1 "../include/linux/rwlock_api_smp.h" 1
# 18 "../include/linux/rwlock_api_smp.h"
void __attribute__((section(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((section(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((section(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __raw_read_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __raw_write_trylock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 return 0;
}
# 146 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_lock(rwlock_t *lock)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 191 "../include/linux/spinlock_api_smp.h" 2
# 296 "../include/linux/spinlock.h" 2








static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 340 "../include/linux/spinlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 355 "../include/linux/spinlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_locked(spinlock_t *lock)
{
 return arch_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_contended(spinlock_t *lock)
{
 return arch_spin_is_contended(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_can_lock(spinlock_t *lock)
{
 return (!arch_spin_is_locked(&(&lock->rlock)->raw_lock));
}
# 420 "../include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);
# 37 "../include/linux/seqlock.h" 2
# 48 "../include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 108 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned __read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(ret & 1), 0)) {
  cpu_relax();
  goto repeat;
 }
 return ret;
}
# 130 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 asm volatile("dmb " "ishld" : : : "memory");
 return ret;
}
# 146 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = __read_seqcount_begin(s);
 asm volatile("dmb " "ishld" : : : "memory");
 return ret;
}
# 162 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned read_seqcount_begin(const seqcount_t *s)
{
                                  ;
 return raw_read_seqcount_begin(s);
}
# 182 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned raw_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 asm volatile("dmb " "ishld" : : : "memory");
 return ret & ~1;
}
# 203 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 return __builtin_expect(!!(s->sequence != start), 0);
}
# 218 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 asm volatile("dmb " "ishld" : : : "memory");
 return __read_seqcount_retry(s, start);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_end(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
}
# 272 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_barrier(seqcount_t *s)
{
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int raw_read_seqcount_latch(seqcount_t *s)
{
 int seq = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });

 do { } while (0);
 return seq;
}
# 364 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_latch(seqcount_t *s)
{
       asm volatile("dmb " "ishst" : : : "memory");
       s->sequence++;
       asm volatile("dmb " "ishst" : : : "memory");
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 raw_write_seqcount_begin(s);
 do { } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqcount_begin(seqcount_t *s)
{
 write_seqcount_begin_nested(s, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 raw_write_seqcount_end(s);
}
# 399 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqcount_invalidate(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence+=2;
}

typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;
} seqlock_t;
# 432 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned read_seqbegin(const seqlock_t *sl)
{
 return read_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{
 return read_seqcount_retry(&sl->seqcount, start);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_sequnlock(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_sequnlock_bh(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_sequnlock_irq(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 write_seqcount_begin(&sl->seqcount);
 return flags;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 527 "../include/linux/seqlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 7 "../include/linux/time.h" 2
# 1 "../include/linux/math64.h" 1





# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 1 "../include/asm-generic/div64.h" 1
# 2 "./arch/arm64/include/generated/asm/div64.h" 2
# 7 "../include/linux/math64.h" 2
# 19 "../include/linux/math64.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 98 "../include/linux/math64.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}
# 166 "../include/linux/math64.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 u32 ah, al;
 u64 ret;

 al = a;
 ah = a >> 32;

 ret = mul_u32_u32(al, mul) >> shift;
 if (ah)
  ret += mul_u32_u32(ah, mul) << (32 - shift);

 return ret;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 mul_u64_u64_shr(u64 a, u64 b, unsigned int shift)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } rl, rm, rn, rh, a0, b0;
 u64 c;

 a0.ll = a;
 b0.ll = b;

 rl.ll = mul_u32_u32(a0.l.low, b0.l.low);
 rm.ll = mul_u32_u32(a0.l.low, b0.l.high);
 rn.ll = mul_u32_u32(a0.l.high, b0.l.low);
 rh.ll = mul_u32_u32(a0.l.high, b0.l.high);






 rl.l.high = c = (u64)rl.l.high + rm.l.low + rn.l.low;
 rh.l.low = c = (c >> 32) + rm.l.high + rn.l.high + rh.l.low;
 rh.l.high = (c >> 32) + rh.l.high;





 if (shift == 0)
  return rl.ll;
 if (shift < 64)
  return (rl.ll >> shift) | (rh.ll << (64 - shift));
 return rh.ll >> (shift & 63);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}
# 8 "../include/linux/time.h" 2
# 1 "../include/linux/time64.h" 1




# 1 "../include/uapi/linux/time.h" 1
# 10 "../include/uapi/linux/time.h"
struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 35 "../include/uapi/linux/time.h"
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 6 "../include/linux/time64.h" 2


typedef __s64 time64_t;
typedef __u64 timeu64_t;
# 47 "../include/linux/time64.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec timespec64_to_timespec(const struct timespec ts64)
{
 return ts64;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec timespec_to_timespec64(const struct timespec ts)
{
 return ts;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct itimerspec itimerspec64_to_itimerspec(struct itimerspec *its64)
{
 return *its64;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct itimerspec itimerspec_to_itimerspec64(struct itimerspec *its)
{
 return *its;
}
# 223 "../include/linux/time64.h"
extern struct timespec timespec64_add_safe(const struct timespec lhs,
      const struct timespec rhs);
# 9 "../include/linux/time.h" 2

extern struct timezone sys_tz;

int get_timespec64(struct timespec *ts,
  const struct timespec *uts);
int put_timespec64(const struct timespec *ts,
  struct timespec *uts);
int get_itimerspec64(struct itimerspec *it,
   const struct itimerspec *uit);
int put_itimerspec64(const struct itimerspec *it,
   struct itimerspec *uit);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int timespec_equal(const struct timespec *a,
                                 const struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int timespec_compare(const struct timespec *lhs, const struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int timeval_compare(const struct timeval *lhs, const struct timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long mktime(const unsigned int year,
   const unsigned int mon, const unsigned int day,
   const unsigned int hour, const unsigned int min,
   const unsigned int sec)
{
 return mktime64(year, mon, day, hour, min, sec);
}

extern void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec);






extern struct timespec timespec_add_safe(const struct timespec lhs,
      const struct timespec rhs);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec timespec_add(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec timespec_sub(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool timespec_valid(const struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool timespec_valid_strict(const struct timespec *ts)
{
 if (!timespec_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool timeval_valid(const struct timeval *tv)
{

 if (tv->tv_sec < 0)
  return false;


 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;

 return true;
}

extern struct timespec timespec_trunc(struct timespec t, unsigned gran);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool timeval_inject_offset_valid(const struct timeval *tv)
{



 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool timespec_inject_offset_valid(const struct timespec *ts)
{



 if (ts->tv_nsec < 0 || ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}
# 177 "../include/linux/time.h"
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern int do_getitimer(int which, struct itimerval *value);

extern long do_utimes(int dfd, const char *filename, struct timespec *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);
# 220 "../include/linux/time.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void time_to_tm(time_t totalsecs, int offset, struct tm *result)
{
 time64_to_tm(totalsecs, offset, result);
}
# 232 "../include/linux/time.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 timespec_to_ns(const struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}
# 244 "../include/linux/time.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 timeval_to_ns(const struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timespec ns_to_timespec(const s64 nsec);







extern struct timeval ns_to_timeval(const s64 nsec);
# 274 "../include/linux/time.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool itimerspec64_valid(const struct itimerspec *its)
{
 if (!timespec_valid(&(its->it_interval)) ||
  !timespec_valid(&(its->it_value)))
  return false;

 return true;
}
# 20 "../include/linux/skbuff.h" 2


# 1 "../include/linux/rbtree.h" 1
# 34 "../include/linux/rbtree.h"
# 1 "../include/linux/rcupdate.h" 1
# 44 "../include/linux/rcupdate.h"
# 1 "../include/linux/cpumask.h" 1
# 11 "../include/linux/cpumask.h"
# 1 "../include/linux/threads.h" 1
# 12 "../include/linux/cpumask.h" 2
# 1 "../include/linux/bitmap.h" 1
# 93 "../include/linux/bitmap.h"
extern unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
extern unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
extern void bitmap_free(const unsigned long *bitmap);





extern int __bitmap_empty(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_full(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits);
extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_subset(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
extern void __bitmap_set(unsigned long *map, unsigned int start, int len);
extern void __bitmap_clear(unsigned long *map, unsigned int start, int len);

extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 146 "../include/linux/bitmap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

extern int __bitmap_parse(const char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
extern int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);
extern unsigned int bitmap_from_u32array(unsigned long *bitmap,
      unsigned int nbits,
      const u32 *buf,
      unsigned int nwords);
extern unsigned int bitmap_to_u32array(u32 *buf,
           unsigned int nwords,
           const unsigned long *bitmap,
           unsigned int nbits);





extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
extern int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);
# 204 "../include/linux/bitmap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = 0UL;
 else {
  unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int nlongs = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)));
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0)) {
  unsigned int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = (~0UL >> (-(nbits) & (64 - 1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src;
 else {
  unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
  memcpy(dst, src, len);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 285 "../include/linux/bitmap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_zero_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}
# 431 "../include/linux/bitmap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 13 "../include/linux/cpumask.h" 2



typedef struct cpumask { unsigned long bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 38 "../include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "../include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_isolated_mask;
# 134 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int cpumask_check(unsigned int cpu)
{



 return cpu;
}
# 194 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_next_bit((((srcp)->bits)), (((unsigned int)8)), 0);
}

unsigned int cpumask_next(int n, const struct cpumask *srcp);
# 208 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)8), n+1);
}

int cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
# 244 "../include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 296 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 329 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 343 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 357 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)8));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)8));
}
# 388 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}
# 431 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)8));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)8));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)8));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)8));
}
# 482 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)8));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)8));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)8));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)8));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)8));
}
# 593 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)8));
}
# 607 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)8));
}
# 621 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 char *nl = strchr(buf, '\n');
 unsigned int len = nl ? (unsigned int)(nl - buf) : strlen(buf);

 return bitmap_parse(buf, len, ((dstp)->bits), ((unsigned int)8));
}
# 636 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)8));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t cpumask_size(void)
{
 return (((((unsigned int)8)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 709 "../include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 770 "../include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 8);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
set_cpu_online(unsigned int cpu, bool online)
{
 if (online)
  cpumask_set_cpu(cpu, &__cpu_online_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_online_mask);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
set_cpu_isolated(unsigned int cpu, bool isolated)
{
 if (isolated)
  cpumask_set_cpu(cpu, &__cpu_isolated_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_isolated_mask);
}
# 839 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 851 "../include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 888 "../include/linux/cpumask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 45 "../include/linux/rcupdate.h" 2








void call_rcu(struct callback_head *head, rcu_callback_t func);




void call_rcu_bh(struct callback_head *head, rcu_callback_t func);
void call_rcu_sched(struct callback_head *head, rcu_callback_t func);
void synchronize_sched(void);
void rcu_barrier_tasks(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
void rcu_read_unlock_special(struct task_struct *t);
void synchronize_rcu(void);
# 103 "../include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_qs(void);
void rcu_bh_qs(void);
void rcu_check_callbacks(int user);
void rcu_report_dead(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 124 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_user_enter(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_user_exit(void) { }



void rcu_init_nohz(void);
# 175 "../include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 207 "../include/linux/rcupdate.h"
# 1 "../include/linux/rcutree.h" 1
# 33 "../include/linux/rcutree.h"
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_bh(void);
void synchronize_sched_expedited(void);
void synchronize_rcu_expedited(void);

void kfree_call_rcu(struct callback_head *head, rcu_callback_t func);
# 69 "../include/linux/rcutree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void synchronize_rcu_bh_expedited(void)
{
 synchronize_sched_expedited();
}

void rcu_barrier(void);
void rcu_barrier_bh(void);
void rcu_barrier_sched(void);
unsigned long get_state_synchronize_rcu(void);
void cond_synchronize_rcu(unsigned long oldstate);
unsigned long get_state_synchronize_sched(void);
void cond_synchronize_sched(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_irq_enter_disabled(void);

void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_is_watching(void);
void rcu_all_qs(void);


int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
# 208 "../include/linux/rcupdate.h" 2
# 226 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rcu_lockdep_current_cpu_online(void) { return true; }
# 264 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rcu_read_lock_sched_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}
# 625 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0);

}
# 679 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_read_unlock(void)
{
 do { } while (0);

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 705 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0);

}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_read_unlock_bh(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 741 "../include/linux/rcupdate.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_read_lock_sched(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0);

}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0);
}
# 35 "../include/linux/rbtree.h" 2

struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 57 "../include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 77 "../include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);

extern void rb_insert_color_cached(struct rb_node *,
       struct rb_root_cached *, bool);
extern void rb_erase_cached(struct rb_node *node, struct rb_root_cached *);




extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 ({ uintptr_t _r_a_p__v = (uintptr_t)(node); if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*rb_link)) __val; char __c[1]; } __u = { .__val = ( typeof((*rb_link))) ((typeof(*rb_link))(_r_a_p__v)) }; __write_once_size(&((*rb_link)), __u.__c, sizeof((*rb_link))); __u.__val; }); else do { union { typeof(*&*rb_link) __val; char __c[1]; } __u = { .__val = ( typeof(*&*rb_link)) ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long))); extern void __compiletime_assert_12(void) ; if (__cond) __compiletime_assert_12(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*rb_link)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*rb_link) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*rb_link) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*rb_link) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*rb_link) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
}
# 23 "../include/linux/skbuff.h" 2
# 1 "../include/linux/socket.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/socket.h" 1
# 1 "../include/uapi/asm-generic/socket.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/sockios.h" 1
# 1 "../include/uapi/asm-generic/sockios.h" 1
# 2 "./arch/arm64/include/generated/uapi/asm/sockios.h" 2
# 6 "../include/uapi/asm-generic/socket.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/socket.h" 2
# 7 "../include/linux/socket.h" 2
# 1 "../include/uapi/linux/sockios.h" 1
# 22 "../include/uapi/linux/sockios.h"
# 1 "./arch/arm64/include/generated/uapi/asm/sockios.h" 1
# 23 "../include/uapi/linux/sockios.h" 2
# 8 "../include/linux/socket.h" 2
# 1 "../include/linux/uio.h" 1
# 14 "../include/linux/uio.h"
# 1 "../include/uapi/linux/uio.h" 1
# 17 "../include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 15 "../include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum {
 ITER_IOVEC = 0,
 ITER_KVEC = 2,
 ITER_BVEC = 4,
 ITER_PIPE = 8,
};

struct iov_iter {
 int type;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   int idx;
   int start_idx;
  };
 };
};
# 57 "../include/linux/uio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = ({ typeof(iter->count) __UNIQUE_ID_min1_13 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID_min2_14 = (iter->iov->iov_len - iter->iov_offset); (void) (&__UNIQUE_ID_min1_13 == &__UNIQUE_ID_min2_14); __UNIQUE_ID_min1_13 < __UNIQUE_ID_min2_14 ? __UNIQUE_ID_min1_13 : __UNIQUE_ID_min2_14; }),

 };
}
# 83 "../include/linux/uio.h"
unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);

size_t iov_iter_copy_from_user_atomic(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
bool _copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);
bool _copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return false;
 else
  return _copy_from_iter_full(addr, bytes, i);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return false;
 else
  return _copy_from_iter_full_nocache(addr, bytes, i);
}
# 159 "../include/linux/uio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((warn_unused_result))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, int direction, struct pipe_inode_info *pipe,
   size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool iter_is_iovec(const struct iov_iter *i)
{
 return !(i->type & (ITER_BVEC | ITER_KVEC | ITER_PIPE));
}
# 211 "../include/linux/uio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}
size_t csum_and_copy_to_iter(const void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
bool csum_and_copy_from_iter_full(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

int import_iovec(int type, const struct iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


struct compat_iovec;
int compat_import_iovec(int type, const struct compat_iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 9 "../include/linux/socket.h" 2


# 1 "../include/uapi/linux/socket.h" 1
# 12 "../include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
 __kernel_sa_family_t ss_family;

 char __data[128 - sizeof(unsigned short)];


} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));
# 12 "../include/linux/socket.h" 2

struct pid;
struct cred;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef __kernel_sa_family_t sa_family_t;





struct sockaddr {
 sa_family_t sa_family;
 char sa_data[14];
};

struct linger {
 int l_onoff;
 int l_linger;
};
# 48 "../include/linux/socket.h"
struct msghdr {
 void *msg_name;
 int msg_namelen;
 struct iov_iter msg_iter;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
 struct kiocb *msg_iocb;
};

struct user_msghdr {
 void *msg_name;
 int msg_namelen;
 struct iovec *msg_iov;
 __kernel_size_t msg_iovlen;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
};


struct mmsghdr {
 struct user_msghdr msg_hdr;
 unsigned int msg_len;
};







struct cmsghdr {
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;
};
# 126 "../include/linux/socket.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t msg_data_left(struct msghdr *msg)
{
 return iov_iter_count(&msg->msg_iter);
}







struct ucred {
 __u32 pid;
 __u32 uid;
 __u32 gid;
};
# 344 "../include/linux/socket.h"
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct timespec;


extern long __sys_recvmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern long __sys_sendmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg, unsigned int vlen,
     unsigned int flags, struct timespec *timeout);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags);
# 24 "../include/linux/skbuff.h" 2
# 1 "../include/linux/refcount.h" 1





# 1 "../include/linux/mutex.h" 1
# 21 "../include/linux/mutex.h"
# 1 "../include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 ({ union { typeof(((&lock->tail)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&lock->tail)->counter))) (((0))) }; __write_once_size(&(((&lock->tail)->counter)), __u.__c, sizeof(((&lock->tail)->counter))); __u.__val; });
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return ({ union { typeof((&lock->tail)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&lock->tail)->counter), __u.__c, sizeof((&lock->tail)->counter)); else __read_once_size_nocheck(&((&lock->tail)->counter), __u.__c, sizeof((&lock->tail)->counter)); do { } while (0); __u.__val; }) != (0);
}
# 22 "../include/linux/mutex.h" 2
# 1 "../include/linux/debug_locks.h" 1








struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __debug_locks_off(void)
{
 return ({ __typeof__(*(&debug_locks)) __ret; __ret = (__typeof__(*(&debug_locks))) __xchg_mb((unsigned long)(0), (&debug_locks), sizeof(*(&debug_locks))); __ret; });
}




extern int debug_locks_off(void);
# 49 "../include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_show_all_locks(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_check_no_locks_held(void)
{
}
# 23 "../include/linux/mutex.h" 2

struct ww_acquire_ctx;
# 54 "../include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;







 struct task_struct *ux_dep_task;

};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct task_struct *__mutex_owner(struct mutex *lock)
{
 return (struct task_struct *)(atomic_long_read(&lock->owner) & ~0x07);
}





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;
 struct ww_acquire_ctx *ww_ctx;



};


# 1 "../include/linux/sched_assist/sched_assist_mutex.h" 1
# 10 "../include/linux/sched_assist/sched_assist_mutex.h"
extern void mutex_list_add(struct task_struct *task, struct list_head *entry, struct list_head *head, struct mutex *lock);
extern void mutex_set_inherit_ux(struct mutex *lock, struct task_struct *task);
extern void mutex_unset_inherit_ux(struct mutex *lock, struct task_struct *task);
# 92 "../include/linux/mutex.h" 2
# 105 "../include/linux/mutex.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mutex_destroy(struct mutex *lock) {}
# 151 "../include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mutex_is_locked(struct mutex *lock)
{



 return __mutex_owner(lock) != ((void *)0);
}
# 194 "../include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((warn_unused_result)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((warn_unused_result)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 212 "../include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);





enum mutex_trylock_recursive_enum {
 MUTEX_TRYLOCK_FAILED = 0,
 MUTEX_TRYLOCK_SUCCESS = 1,
 MUTEX_TRYLOCK_RECURSIVE,
};
# 239 "../include/linux/mutex.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) enum mutex_trylock_recursive_enum
mutex_trylock_recursive(struct mutex *lock)
{
 if (__builtin_expect(!!(__mutex_owner(lock) == get_current()), 0))
  return MUTEX_TRYLOCK_RECURSIVE;

 return mutex_trylock(lock);
}
# 7 "../include/linux/refcount.h" 2
# 18 "../include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;
# 29 "../include/linux/refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void refcount_set(refcount_t *r, unsigned int n)
{
 ({ union { typeof(((&r->refs)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&r->refs)->counter))) ((n)) }; __write_once_size(&(((&r->refs)->counter)), __u.__c, sizeof(((&r->refs)->counter))); __u.__val; });
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int refcount_read(const refcount_t *r)
{
 return ({ union { typeof((&r->refs)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&r->refs)->counter), __u.__c, sizeof((&r->refs)->counter)); else __read_once_size_nocheck(&((&r->refs)->counter), __u.__c, sizeof((&r->refs)->counter)); do { } while (0); __u.__val; });
}


extern __attribute__((warn_unused_result)) bool refcount_add_not_zero(unsigned int i, refcount_t *r);
extern void refcount_add(unsigned int i, refcount_t *r);

extern __attribute__((warn_unused_result)) bool refcount_inc_not_zero(refcount_t *r);
extern void refcount_inc(refcount_t *r);

extern __attribute__((warn_unused_result)) bool refcount_sub_and_test(unsigned int i, refcount_t *r);

extern __attribute__((warn_unused_result)) bool refcount_dec_and_test(refcount_t *r);
extern void refcount_dec(refcount_t *r);
# 97 "../include/linux/refcount.h"
extern __attribute__((warn_unused_result)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((warn_unused_result)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((warn_unused_result)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((warn_unused_result)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
# 25 "../include/linux/skbuff.h" 2


# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 28 "../include/linux/skbuff.h" 2

# 1 "../include/linux/net.h" 1
# 22 "../include/linux/net.h"
# 1 "../include/linux/random.h" 1
# 11 "../include/linux/random.h"
# 1 "../include/linux/once.h" 1







bool __do_once_start(bool *done, unsigned long *flags);
void __do_once_done(bool *done, struct static_key *once_key,
      unsigned long *flags);
# 12 "../include/linux/random.h" 2

# 1 "../include/uapi/linux/random.h" 1
# 12 "../include/uapi/linux/random.h"
# 1 "../include/uapi/linux/ioctl.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 1 "../include/asm-generic/ioctl.h" 1




# 1 "../include/uapi/asm-generic/ioctl.h" 1
# 6 "../include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 2
# 6 "../include/uapi/linux/ioctl.h" 2
# 13 "../include/uapi/linux/random.h" 2
# 1 "../include/linux/irqnr.h" 1




# 1 "../include/uapi/linux/irqnr.h" 1
# 6 "../include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 14 "../include/uapi/linux/random.h" 2
# 41 "../include/uapi/linux/random.h"
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 14 "../include/linux/random.h" 2

struct random_ready_callback {
 struct list_head list;
 void (*func)(struct random_ready_callback *rdy);
 struct module *owner;
};

extern void add_device_randomness(const void *, unsigned int);
# 30 "../include/linux/random.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void add_latent_entropy(void) {}


extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value) ;
extern void add_interrupt_randomness(int irq, int irq_flags) ;

extern void get_random_bytes(void *buf, int nbytes);
extern int wait_for_random_bytes(void);
extern int add_random_ready_callback(struct random_ready_callback *rdy);
extern void del_random_ready_callback(struct random_ready_callback *rdy);
extern void get_random_bytes_arch(void *buf, int nbytes);


extern const struct file_operations random_fops, urandom_fops;


u32 get_random_u32(void);
u64 get_random_u64(void);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int get_random_int(void)
{
 return get_random_u32();
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_random_long(void)
{

 return get_random_u64();



}
# 76 "../include/linux/random.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_random_canary(void)
{
 unsigned long val = get_random_long();

 return val & 0xffffffffffffff00UL;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_random_bytes_wait(void *buf, int nbytes)
{
 int ret = wait_for_random_bytes();
 if (__builtin_expect(!!(ret), 0))
  return ret;
 get_random_bytes(buf, nbytes);
 return 0;
}
# 102 "../include/linux/random.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_random_u32_wait(u32 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u32(); return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_random_u64_wait(u64 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u64(); return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_random_int_wait(int *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_int(); return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_random_long_wait(long *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_long(); return 0; }


unsigned long randomize_page(unsigned long start, unsigned long range);

u32 prandom_u32(void);
void prandom_bytes(void *buf, size_t nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

struct rnd_state {
 __u32 s1, s2, s3, s4;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
void prandom_seed_full_state(struct rnd_state *pcpu_state);
# 138 "../include/linux/random.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 prandom_u32_max(u32 ep_ro)
{
 return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = (seed >> 32) ^ (seed << 10) ^ seed;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_get_random_long(unsigned long *v)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_get_random_int(unsigned int *v)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_has_random(void)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_get_random_seed_long(unsigned long *v)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_get_random_seed_int(unsigned int *v)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_has_random_seed(void)
{
 return 0;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}
# 23 "../include/linux/net.h" 2
# 1 "../include/linux/wait.h" 1
# 12 "../include/linux/wait.h"
# 1 "../include/uapi/linux/wait.h" 1
# 13 "../include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 27 "../include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 61 "../include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 79 "../include/linux/wait.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 124 "../include/linux/wait.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 137 "../include/linux/wait.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 asm volatile("dmb " "ish" : : : "memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add(&wq_entry->entry, &wq_head->head);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode, int nr);
# 231 "../include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 600 "../include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 984 "../include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 24 "../include/linux/net.h" 2
# 1 "../include/linux/fcntl.h" 1




# 1 "../include/uapi/linux/fcntl.h" 1




# 1 "../arch/arm64/include/uapi/asm/fcntl.h" 1
# 28 "../arch/arm64/include/uapi/asm/fcntl.h"
# 1 "../include/uapi/asm-generic/fcntl.h" 1
# 156 "../include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "../include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 29 "../arch/arm64/include/uapi/asm/fcntl.h" 2
# 6 "../include/uapi/linux/fcntl.h" 2
# 6 "../include/linux/fcntl.h" 2
# 25 "../include/linux/net.h" 2


# 1 "../include/linux/fs.h" 1





# 1 "../include/linux/wait_bit.h" 1
# 10 "../include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;

 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};







typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);
void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
void wake_up_atomic_t(atomic_t *p);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_atomic_t(atomic_t *p, int (*)(atomic_t *), unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__ ((__section__(".init.text"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 54 "../include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int bit);
extern int bit_wait_io(struct wait_bit_key *key, int bit);
extern int bit_wait_timeout(struct wait_bit_key *key, int bit);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int bit);
# 75 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 100 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 126 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 154 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 183 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 207 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 233 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}
# 253 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
int wait_on_atomic_t(atomic_t *val, int (*action)(atomic_t *), unsigned mode)
{
 do { do { } while (0); } while (0);
 if (({ union { typeof((val)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((val)->counter), __u.__c, sizeof((val)->counter)); else __read_once_size_nocheck(&((val)->counter), __u.__c, sizeof((val)->counter)); do { } while (0); __u.__val; }) == 0)
  return 0;
 return out_of_line_wait_on_atomic_t(val, action, mode);
}
# 271 "../include/linux/wait_bit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_and_wake_up_bit(int bit, void *word)
{
 do { asm volatile("dmb " "ish" : : : "memory"); clear_bit(bit, word); } while (0);

 asm volatile("dmb " "ish" : : : "memory");
 wake_up_bit(word, bit);
}
# 7 "../include/linux/fs.h" 2
# 1 "../include/linux/kdev_t.h" 1




# 1 "../include/uapi/linux/kdev_t.h" 1
# 6 "../include/linux/kdev_t.h" 2
# 24 "../include/linux/kdev_t.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "../include/linux/fs.h" 2
# 1 "../include/linux/dcache.h" 1






# 1 "../include/linux/rculist.h" 1
# 31 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 ({ union { typeof(list->prev) __val; char __c[1]; } __u = { .__val = ( typeof(list->prev)) (list) }; __write_once_size(&(list->prev), __u.__c, sizeof(list->prev)); __u.__val; });
}
# 49 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_15(void) ; if (__cond) __compiletime_assert_15(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 next->prev = new;
}
# 77 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 98 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 128 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 154 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = ((void *)0);
 }
}
# 170 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(new->prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(new->prev)->next)))))) ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(new->prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(new->prev)->next)))))); __u.__val; }); else do { union { typeof(*&(*((struct list_head **)(&(new->prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(new->prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long))); extern void __compiletime_assert_16(void) ; if (__cond) __compiletime_assert_16(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct list_head **)(&(new->prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct list_head **)(&(new->prev)->next)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct list_head **)(&(new->prev)->next)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct list_head **)(&(new->prev)->next)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct list_head **)(&(new->prev)->next)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 new->next->prev = new;
 old->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 199 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 222 "../include/linux/rculist.h"
 sync();
# 232 "../include/linux/rculist.h"
 last->next = next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(first); if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_17(void) ; if (__cond) __compiletime_assert_17(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct list_head **)(&(prev)->next)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 first->prev = prev;
 next->prev = last;
}
# 245 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 260 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 425 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 438 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 new->pprev = old->pprev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*(struct hlist_node **)new->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*(struct hlist_node **)new->pprev))) ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)) }; __write_once_size(&((*(struct hlist_node **)new->pprev)), __u.__c, sizeof((*(struct hlist_node **)new->pprev))); __u.__val; }); else do { union { typeof(*&*(struct hlist_node **)new->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*(struct hlist_node **)new->pprev)) ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long))); extern void __compiletime_assert_18(void) ; if (__cond) __compiletime_assert_18(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*(struct hlist_node **)new->pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*(struct hlist_node **)new->pprev) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*(struct hlist_node **)new->pprev) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*(struct hlist_node **)new->pprev) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*(struct hlist_node **)new->pprev) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 if (next)
  new->next->pprev = &new->next;
 old->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 477 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(h)->first))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(h)->first)))))) ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(h)->first))))), __u.__c, sizeof(((*((struct hlist_node **)(&(h)->first)))))); __u.__val; }); else do { union { typeof(*&(*((struct hlist_node **)(&(h)->first)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(h)->first))))) ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long))); extern void __compiletime_assert_19(void) ; if (__cond) __compiletime_assert_19(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct hlist_node **)(&(h)->first))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(h)->first)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(h)->first)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(h)->first)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct hlist_node **)(&(h)->first)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 if (first)
  first->pprev = &n->next;
}
# 508 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  n->pprev = &last->next;
  ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(last)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(last)->next)))))) ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(last)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(last)->next)))))); __u.__val; }); else do { union { typeof(*&(*((struct hlist_node **)(&(last)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(last)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long))); extern void __compiletime_assert_20(void) ; if (__cond) __compiletime_assert_20(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct hlist_node **)(&(last)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(last)->next)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(last)->next)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(last)->next)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct hlist_node **)(&(last)->next)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 544 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)((n)->pprev))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)((n)->pprev)))))) ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)((n)->pprev))))), __u.__c, sizeof(((*((struct hlist_node **)((n)->pprev)))))); __u.__val; }); else do { union { typeof(*&(*((struct hlist_node **)((n)->pprev)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)((n)->pprev))))) ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long))); extern void __compiletime_assert_21(void) ; if (__cond) __compiletime_assert_21(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct hlist_node **)((n)->pprev))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct hlist_node **)((n)->pprev)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct hlist_node **)((n)->pprev)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct hlist_node **)((n)->pprev)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct hlist_node **)((n)->pprev)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 next->pprev = &n->next;
}
# 571 "../include/linux/rculist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(prev)->next)))))) ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(prev)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(prev)->next)))))); __u.__val; }); else do { union { typeof(*&(*((struct hlist_node **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(prev)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_22(void) ; if (__cond) __compiletime_assert_22(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&(*((struct hlist_node **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(prev)->next)))) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(prev)->next)))) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&(*((struct hlist_node **)(&(prev)->next)))) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&(*((struct hlist_node **)(&(prev)->next)))) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
 if (n->next)
  n->next->pprev = &n->next;
}
# 8 "../include/linux/dcache.h" 2
# 1 "../include/linux/rculist_bl.h" 1







# 1 "../include/linux/list_bl.h" 1





# 1 "../include/linux/bit_spinlock.h" 1
# 16 "../include/linux/bit_spinlock.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
  do {
   cpu_relax();
  } while (test_bit(bitnum, addr));
  do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 do { asm volatile("dmb " "ish" : : : "memory"); clear_bit(bitnum, addr); } while (0);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 (void)0;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 do { asm volatile("dmb " "ish" : : : "memory"); clear_bit(bitnum, addr); } while (0);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
 (void)0;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return test_bit(bitnum, addr);





}
# 7 "../include/linux/list_bl.h" 2
# 34 "../include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/list_bl.h\"; .popsection; .long 2b - 0b; .short 66; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/list_bl.h\"; .popsection; .long 2b - 0b; .short 68; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }) & ~1UL);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/list_bl.h\"; .popsection; .long 2b - 0b; .short 94; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "../include/linux/rculist_bl.h" 2


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rculist_bl.h\"; .popsection; .long 2b - 0b; .short 14; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rculist_bl.h\"; .popsection; .long 2b - 0b; .short 16; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 ({ uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((h->first)) __val; char __c[1]; } __u = { .__val = ( typeof((h->first))) ((typeof(h->first))(_r_a_p__v)) }; __write_once_size(&((h->first)), __u.__c, sizeof((h->first))); __u.__val; }); else do { union { typeof(*&h->first) __val; char __c[1]; } __u = { .__val = ( typeof(*&h->first)) ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long))); extern void __compiletime_assert_23(void) ; if (__cond) __compiletime_assert_23(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&h->first)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&h->first) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&h->first) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&h->first) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&h->first) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ union { typeof((h->first)) __val; char __c[1]; } __u; if (1) __read_once_size(&((h->first)), __u.__c, sizeof((h->first))); else __read_once_size_nocheck(&((h->first)), __u.__c, sizeof((h->first))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 47 "../include/linux/rculist_bl.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = ((void *)0);
 }
}
# 74 "../include/linux/rculist_bl.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 99 "../include/linux/rculist_bl.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 9 "../include/linux/dcache.h" 2




# 1 "../include/linux/lockref.h" 1
# 19 "../include/linux/lockref.h"
# 1 "./include/generated/bounds.h" 1
# 20 "../include/linux/lockref.h" 2





struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 14 "../include/linux/dcache.h" 2
# 1 "../include/linux/stringhash.h" 1






# 1 "../include/linux/hash.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "../include/linux/hash.h" 2
# 60 "../include/linux/hash.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "../include/linux/stringhash.h" 2
# 42 "../include/linux/stringhash.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "../include/linux/stringhash.h"
extern unsigned int __attribute__((pure)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "../include/linux/stringhash.h"
extern u64 __attribute__((pure)) hashlen_string(const void *salt, const char *name);
# 15 "../include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 47 "../include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const char empty_string[];
extern const struct qstr empty_name;
extern const char slash_string[];
extern const struct qstr slash_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long dummy[2];
};
extern struct dentry_stat_t dentry_stat;
# 90 "../include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *,
     unsigned int, unsigned int);
 void (*d_canonical_path)(const struct path *, struct path *);
} __attribute__((__aligned__((1 << 7))));
# 224 "../include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern int d_instantiate_no_diralias(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_pseudo(struct super_block *, const struct qstr *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);

extern void dentry_update_name_case(struct dentry *, const struct qstr *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((format(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);
extern char *simple_dname(struct dentry *, char *, int);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
# 317 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int d_in_lookup(struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 469 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 487 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int simple_positive(struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 519 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 531 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return (*({ __attribute__((unused)) typeof(dentry->d_inode) __var = ( typeof(dentry->d_inode)) 0; (volatile typeof(dentry->d_inode) *)&(dentry->d_inode); }));
}
# 546 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 563 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode,
        unsigned int open_flags, unsigned int flags)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode, open_flags, flags);
 else
  return dentry;
}
# 600 "../include/linux/dcache.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0), 0, 0));
}

struct name_snapshot {
 const unsigned char *name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "../include/linux/fs.h" 2
# 1 "../include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}
# 10 "../include/linux/fs.h" 2
# 1 "../include/linux/stat.h" 1





# 1 "../arch/arm64/include/asm/stat.h" 1
# 19 "../arch/arm64/include/asm/stat.h"
# 1 "../arch/arm64/include/uapi/asm/stat.h" 1
# 17 "../arch/arm64/include/uapi/asm/stat.h"
# 1 "../include/uapi/asm-generic/stat.h" 1
# 24 "../include/uapi/asm-generic/stat.h"
struct stat {
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long st_rdev;
 unsigned long __pad1;
 long st_size;
 int st_blksize;
 int __pad2;
 long st_blocks;
 long st_atime;
 unsigned long st_atime_nsec;
 long st_mtime;
 unsigned long st_mtime_nsec;
 long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 18 "../arch/arm64/include/uapi/asm/stat.h" 2
# 20 "../arch/arm64/include/asm/stat.h" 2



# 1 "../arch/arm64/include/asm/compat.h" 1
# 25 "../arch/arm64/include/asm/compat.h"
# 1 "../include/linux/sched.h" 1
# 10 "../include/linux/sched.h"
# 1 "../include/uapi/linux/sched.h" 1
# 11 "../include/linux/sched.h" 2



# 1 "../include/linux/pid.h" 1







enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,

 __PIDTYPE_TGID
};
# 54 "../include/linux/pid.h"
struct upid {

 int nr;
 struct pid_namespace *ns;
 struct hlist_node pid_chain;
};

struct pid
{
 atomic_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

struct pid_link
{
 struct hlist_node node;
 struct pid *pid;
};

extern const struct file_operations pidfd_fops;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  atomic_add(1, (&pid->count));
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 118 "../include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
int next_pidmap(struct pid_namespace *pid_ns, unsigned int last);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 142 "../include/linux/pid.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 172 "../include/linux/pid.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "../include/linux/sched.h" 2
# 1 "../include/linux/sem.h" 1








# 1 "../include/uapi/linux/sem.h" 1




# 1 "../include/linux/ipc.h" 1





# 1 "../include/linux/uidgid.h" 1
# 16 "../include/linux/uidgid.h"
# 1 "../include/linux/highuid.h" 1
# 35 "../include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "../include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "../include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "../include/linux/uidgid.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}
# 143 "../include/linux/uidgid.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kuid_t make_kuid(struct user_namespace *from, uid_t uid)
{
 return (kuid_t){ uid };
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kgid_t make_kgid(struct user_namespace *from, gid_t gid)
{
 return (kgid_t){ gid };
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) uid_t from_kuid(struct user_namespace *to, kuid_t kuid)
{
 return __kuid_val(kuid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) gid_t from_kgid(struct user_namespace *to, kgid_t kgid)
{
 return __kgid_val(kgid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) uid_t from_kuid_munged(struct user_namespace *to, kuid_t kuid)
{
 uid_t uid = from_kuid(to, kuid);
 if (uid == (uid_t)-1)
  uid = overflowuid;
 return uid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) gid_t from_kgid_munged(struct user_namespace *to, kgid_t kgid)
{
 gid_t gid = from_kgid(to, kgid);
 if (gid == (gid_t)-1)
  gid = overflowgid;
 return gid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return uid_valid(uid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return gid_valid(gid);
}
# 7 "../include/linux/ipc.h" 2
# 1 "../include/linux/rhashtable.h" 1
# 22 "../include/linux/rhashtable.h"
# 1 "../include/linux/err.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 1 "../include/uapi/asm-generic/errno.h" 1




# 1 "../include/uapi/asm-generic/errno-base.h" 1
# 6 "../include/uapi/asm-generic/errno.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/errno.h" 2
# 9 "../include/linux/err.h" 2
# 24 "../include/linux/err.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long __attribute__((warn_unused_result)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __attribute__((warn_unused_result)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "../include/linux/err.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 23 "../include/linux/rhashtable.h" 2
# 1 "../include/linux/errno.h" 1




# 1 "../include/uapi/linux/errno.h" 1
# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 2 "../include/uapi/linux/errno.h" 2
# 6 "../include/linux/errno.h" 2
# 24 "../include/linux/rhashtable.h" 2
# 1 "../include/linux/jhash.h" 1
# 27 "../include/linux/jhash.h"
# 1 "../include/linux/unaligned/packed_struct.h" 1





struct __una_u16 { u16 x; } __attribute__((packed));
struct __una_u32 { u32 x; } __attribute__((packed));
struct __una_u64 { u64 x; } __attribute__((packed));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 __get_unaligned_cpu16(const void *p)
{
 const struct __una_u16 *ptr = (const struct __una_u16 *)p;
 return ptr->x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __get_unaligned_cpu32(const void *p)
{
 const struct __una_u32 *ptr = (const struct __una_u32 *)p;
 return ptr->x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 __get_unaligned_cpu64(const void *p)
{
 const struct __una_u64 *ptr = (const struct __una_u64 *)p;
 return ptr->x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu16(u16 val, void *p)
{
 struct __una_u16 *ptr = (struct __una_u16 *)p;
 ptr->x = val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu32(u32 val, void *p)
{
 struct __una_u32 *ptr = (struct __una_u32 *)p;
 ptr->x = val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu64(u64 val, void *p)
{
 struct __una_u64 *ptr = (struct __una_u64 *)p;
 ptr->x = val;
}
# 28 "../include/linux/jhash.h" 2
# 70 "../include/linux/jhash.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 jhash(const void *key, u32 length, u32 initval)
{
 u32 a, b, c;
 const u8 *k = key;


 a = b = c = 0xdeadbeef + length + initval;


 while (length > 12) {
  a += __get_unaligned_cpu32(k);
  b += __get_unaligned_cpu32(k + 4);
  c += __get_unaligned_cpu32(k + 8);
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 12;
  k += 12;
 }

 switch (length) {
 case 12: c += (u32)k[11]<<24;
 case 11: c += (u32)k[10]<<16;
 case 10: c += (u32)k[9]<<8;
 case 9: c += k[8];
 case 8: b += (u32)k[7]<<24;
 case 7: b += (u32)k[6]<<16;
 case 6: b += (u32)k[5]<<8;
 case 5: b += k[4];
 case 4: a += (u32)k[3]<<24;
 case 3: a += (u32)k[2]<<16;
 case 2: a += (u32)k[1]<<8;
 case 1: a += k[0];
   { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}
# 116 "../include/linux/jhash.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 jhash2(const u32 *k, u32 length, u32 initval)
{
 u32 a, b, c;


 a = b = c = 0xdeadbeef + (length<<2) + initval;


 while (length > 3) {
  a += k[0];
  b += k[1];
  c += k[2];
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 3;
  k += 3;
 }


 switch (length) {
 case 3: c += k[2];
 case 2: b += k[1];
 case 1: a += k[0];
  { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval)
{
 a += initval;
 b += initval;
 c += initval;

 { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };

 return c;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)
{
 return __jhash_nwords(a, b, c, initval + 0xdeadbeef + (3 << 2));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 jhash_2words(u32 a, u32 b, u32 initval)
{
 return __jhash_nwords(a, b, 0, initval + 0xdeadbeef + (2 << 2));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 jhash_1word(u32 a, u32 initval)
{
 return __jhash_nwords(a, 0, 0, initval + 0xdeadbeef + (1 << 2));
}
# 25 "../include/linux/rhashtable.h" 2
# 1 "../include/linux/list_nulls.h" 1
# 21 "../include/linux/list_nulls.h"
struct hlist_nulls_head {
 struct hlist_nulls_node *first;
};

struct hlist_nulls_node {
 struct hlist_nulls_node *next, **pprev;
};
# 43 "../include/linux/list_nulls.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_a_nulls(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr & 1);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_nulls_value(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr) >> 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hlist_nulls_unhashed(const struct hlist_nulls_node *h)
{
 return !h->pprev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hlist_nulls_empty(const struct hlist_nulls_head *h)
{
 return is_a_nulls(({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_nulls_add_head(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = h->first;

 n->next = first;
 ({ union { typeof(n->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(n->pprev)) (&h->first) }; __write_once_size(&(n->pprev), __u.__c, sizeof(n->pprev)); __u.__val; });
 h->first = n;
 if (!is_a_nulls(first))
  ({ union { typeof(first->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(first->pprev)) (&n->next) }; __write_once_size(&(first->pprev), __u.__c, sizeof(first->pprev)); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __hlist_nulls_del(struct hlist_nulls_node *n)
{
 struct hlist_nulls_node *next = n->next;
 struct hlist_nulls_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (!is_a_nulls(next))
  ({ union { typeof(next->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(next->pprev)) (pprev) }; __write_once_size(&(next->pprev), __u.__c, sizeof(next->pprev)); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hlist_nulls_del(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 ({ union { typeof(n->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(n->pprev)) (((void *) 0x200 + (0xdead000000000000UL))) }; __write_once_size(&(n->pprev), __u.__c, sizeof(n->pprev)); __u.__val; });
}
# 26 "../include/linux/rhashtable.h" 2
# 1 "../include/linux/workqueue.h" 1








# 1 "../include/linux/timer.h" 1





# 1 "../include/linux/ktime.h" 1
# 25 "../include/linux/ktime.h"
# 1 "../include/linux/jiffies.h" 1
# 10 "../include/linux/jiffies.h"
# 1 "../include/linux/timex.h" 1
# 56 "../include/linux/timex.h"
# 1 "../include/uapi/linux/timex.h" 1
# 64 "../include/uapi/linux/timex.h"
struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "../include/linux/timex.h" 2






# 1 "../include/uapi/linux/param.h" 1




# 1 "../arch/arm64/include/uapi/asm/param.h" 1
# 22 "../arch/arm64/include/uapi/asm/param.h"
# 1 "../include/asm-generic/param.h" 1




# 1 "../include/uapi/asm-generic/param.h" 1
# 6 "../include/asm-generic/param.h" 2
# 23 "../arch/arm64/include/uapi/asm/param.h" 2
# 6 "../include/uapi/linux/param.h" 2
# 64 "../include/linux/timex.h" 2

# 1 "../arch/arm64/include/asm/timex.h" 1
# 19 "../arch/arm64/include/asm/timex.h"
# 1 "../arch/arm64/include/asm/arch_timer.h" 1
# 28 "../arch/arm64/include/asm/arch_timer.h"
# 1 "../include/linux/smp.h" 1
# 15 "../include/linux/smp.h"
# 1 "../include/linux/llist.h" 1
# 66 "../include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 81 "../include/linux/llist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 199 "../include/linux/llist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool llist_empty(const struct llist_head *head)
{
 return (*({ __attribute__((unused)) typeof(head->first) __var = ( typeof(head->first)) 0; (volatile typeof(head->first) *)&(head->first); })) == ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}
# 232 "../include/linux/llist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ __typeof__(*(&head->first)) __ret; __ret = (__typeof__(*(&head->first))) __xchg_mb((unsigned long)(((void *)0)), (&head->first), sizeof(*(&head->first))); __ret; });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 16 "../include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
struct __call_single_data {
 struct llist_node llist;
 smp_call_func_t func;
 void *info;
 unsigned int flags;
};


typedef struct __call_single_data call_single_data_t
 __attribute__((aligned(sizeof(struct __call_single_data))));


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




int on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

int smp_call_function_single_async(int cpu, call_single_data_t *csd);







# 1 "../arch/arm64/include/asm/smp.h" 1
# 32 "../arch/arm64/include/asm/smp.h"
# 1 "../arch/arm64/include/asm/percpu.h" 1
# 22 "../arch/arm64/include/asm/percpu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_my_cpu_offset(unsigned long off)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr tpidr_el1, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "11" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "msr tpidr_el2, %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


   :: "r" (off) : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __my_cpu_offset(void)
{
 unsigned long off;





 asm(".if ""1"" == 1\n" "661:\n\t" "mrs %0, tpidr_el1" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "11" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "mrs %0, tpidr_el2" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


  : "=r" (off) :
  "Q" (*(const unsigned long *)current_stack_pointer));

 return off;
}
# 103 "../arch/arm64/include/asm/percpu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __percpu_add(void *ptr, unsigned long val, int size) { unsigned long loop, ret = 0; switch (size) { case 1: asm ("//__per_cpu_" "add" "_1\n" "1:	ldxrb	  %w[ret], %[ptr]\n" "add" " %w[ret], %w[ret], %w[val]\n" "	stxrb	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "Ir" (val)); break; case 2: asm ("//__per_cpu_" "add" "_2\n" "1:	ldxrh	  %w[ret], %[ptr]\n" "add" " %w[ret], %w[ret], %w[val]\n" "	stxrh	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "Ir" (val)); break; case 4: asm ("//__per_cpu_" "add" "_4\n" "1:	ldxr	  %w[ret], %[ptr]\n" "add" " %w[ret], %w[ret], %w[val]\n" "	stxr	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "Ir" (val)); break; case 8: asm ("//__per_cpu_" "add" "_8\n" "1:	ldxr	  %[ret], %[ptr]\n" "add" " %[ret], %[ret], %[val]\n" "	stxr	  %w[loop], %[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "Ir" (val)); break; default: ret = 0; do { bool __cond = !(!(1)); extern void __compiletime_assert_24(void) ; if (__cond) __compiletime_assert_24(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __percpu_and(void *ptr, unsigned long val, int size) { unsigned long loop, ret = 0; switch (size) { case 1: asm ("//__per_cpu_" "and" "_1\n" "1:	ldxrb	  %w[ret], %[ptr]\n" "and" " %w[ret], %w[ret], %w[val]\n" "	stxrb	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "Ir" (val)); break; case 2: asm ("//__per_cpu_" "and" "_2\n" "1:	ldxrh	  %w[ret], %[ptr]\n" "and" " %w[ret], %w[ret], %w[val]\n" "	stxrh	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "Ir" (val)); break; case 4: asm ("//__per_cpu_" "and" "_4\n" "1:	ldxr	  %w[ret], %[ptr]\n" "and" " %w[ret], %w[ret], %w[val]\n" "	stxr	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "Ir" (val)); break; case 8: asm ("//__per_cpu_" "and" "_8\n" "1:	ldxr	  %[ret], %[ptr]\n" "and" " %[ret], %[ret], %[val]\n" "	stxr	  %w[loop], %[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "Ir" (val)); break; default: ret = 0; do { bool __cond = !(!(1)); extern void __compiletime_assert_25(void) ; if (__cond) __compiletime_assert_25(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } return ret; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __percpu_or(void *ptr, unsigned long val, int size) { unsigned long loop, ret = 0; switch (size) { case 1: asm ("//__per_cpu_" "or" "_1\n" "1:	ldxrb	  %w[ret], %[ptr]\n" "orr" " %w[ret], %w[ret], %w[val]\n" "	stxrb	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "Ir" (val)); break; case 2: asm ("//__per_cpu_" "or" "_2\n" "1:	ldxrh	  %w[ret], %[ptr]\n" "orr" " %w[ret], %w[ret], %w[val]\n" "	stxrh	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "Ir" (val)); break; case 4: asm ("//__per_cpu_" "or" "_4\n" "1:	ldxr	  %w[ret], %[ptr]\n" "orr" " %w[ret], %w[ret], %w[val]\n" "	stxr	  %w[loop], %w[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "Ir" (val)); break; case 8: asm ("//__per_cpu_" "or" "_8\n" "1:	ldxr	  %[ret], %[ptr]\n" "orr" " %[ret], %[ret], %[val]\n" "	stxr	  %w[loop], %[ret], %[ptr]\n" "	cbnz	  %w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "Ir" (val)); break; default: ret = 0; do { bool __cond = !(!(1)); extern void __compiletime_assert_26(void) ; if (__cond) __compiletime_assert_26(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); } return ret; }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __percpu_read(void *ptr, int size)
{
 unsigned long ret = 0;

 switch (size) {
 case 1:
  ret = ({ union { typeof(*(u8 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); else __read_once_size_nocheck(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); do { } while (0); __u.__val; });
  break;
 case 2:
  ret = ({ union { typeof(*(u16 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); else __read_once_size_nocheck(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); do { } while (0); __u.__val; });
  break;
 case 4:
  ret = ({ union { typeof(*(u32 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); else __read_once_size_nocheck(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); do { } while (0); __u.__val; });
  break;
 case 8:
  ret = ({ union { typeof(*(u64 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); else __read_once_size_nocheck(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); do { } while (0); __u.__val; });
  break;
 default:
  ret = 0;
  do { bool __cond = !(!(1)); extern void __compiletime_assert_27(void) ; if (__cond) __compiletime_assert_27(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 }

 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __percpu_write(void *ptr, unsigned long val, int size)
{
 switch (size) {
 case 1:
  ({ union { typeof(*(u8 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u8 *)ptr)) ((u8)val) }; __write_once_size(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); __u.__val; });
  break;
 case 2:
  ({ union { typeof(*(u16 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u16 *)ptr)) ((u16)val) }; __write_once_size(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); __u.__val; });
  break;
 case 4:
  ({ union { typeof(*(u32 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u32 *)ptr)) ((u32)val) }; __write_once_size(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); __u.__val; });
  break;
 case 8:
  ({ union { typeof(*(u64 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u64 *)ptr)) ((u64)val) }; __write_once_size(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); __u.__val; });
  break;
 default:
  do { bool __cond = !(!(1)); extern void __compiletime_assert_28(void) ; if (__cond) __compiletime_assert_28(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __percpu_xchg(void *ptr, unsigned long val,
      int size)
{
 unsigned long ret = 0, loop;

 switch (size) {
 case 1:
  asm ("//__percpu_xchg_1\n"
  "1:	ldxrb	%w[ret], %[ptr]\n"
  "	stxrb	%w[loop], %w[val], %[ptr]\n"
  "	cbnz	%w[loop], 1b"
  : [loop] "=&r"(loop), [ret] "=&r"(ret),
    [ptr] "+Q"(*(u8 *)ptr)
  : [val] "r" (val));
  break;
 case 2:
  asm ("//__percpu_xchg_2\n"
  "1:	ldxrh	%w[ret], %[ptr]\n"
  "	stxrh	%w[loop], %w[val], %[ptr]\n"
  "	cbnz	%w[loop], 1b"
  : [loop] "=&r"(loop), [ret] "=&r"(ret),
    [ptr] "+Q"(*(u16 *)ptr)
  : [val] "r" (val));
  break;
 case 4:
  asm ("//__percpu_xchg_4\n"
  "1:	ldxr	%w[ret], %[ptr]\n"
  "	stxr	%w[loop], %w[val], %[ptr]\n"
  "	cbnz	%w[loop], 1b"
  : [loop] "=&r"(loop), [ret] "=&r"(ret),
    [ptr] "+Q"(*(u32 *)ptr)
  : [val] "r" (val));
  break;
 case 8:
  asm ("//__percpu_xchg_8\n"
  "1:	ldxr	%[ret], %[ptr]\n"
  "	stxr	%w[loop], %[val], %[ptr]\n"
  "	cbnz	%w[loop], 1b"
  : [loop] "=&r"(loop), [ret] "=&r"(ret),
    [ptr] "+Q"(*(u64 *)ptr)
  : [val] "r" (val));
  break;
 default:
  ret = 0;
  do { bool __cond = !(!(1)); extern void __compiletime_assert_29(void) ; if (__cond) __compiletime_assert_29(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 }

 return ret;
}
# 280 "../arch/arm64/include/asm/percpu.h"
# 1 "../include/asm-generic/percpu.h" 1






# 1 "../include/linux/percpu-defs.h" 1
# 295 "../include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __this_cpu_preempt_check(const char *op) { }
# 8 "../include/asm-generic/percpu.h" 2
# 19 "../include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[8];
# 281 "../arch/arm64/include/asm/percpu.h" 2
# 33 "../arch/arm64/include/asm/smp.h" 2





extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;
# 49 "../arch/arm64/include/asm/smp.h"
struct seq_file;




extern void show_ipi_list(struct seq_file *p, int prec);




extern void handle_IPI(int ipinr, struct pt_regs *regs);





extern void smp_init_cpus(void);




extern void set_smp_cross_call(void (*)(const struct cpumask *, unsigned int));

extern void (*__smp_cross_call)(const struct cpumask *, unsigned int);




           void secondary_start_kernel(void);







struct secondary_data {
 void *stack;
 struct task_struct *task;
 long status;
};

extern struct secondary_data secondary_data;
extern long __early_cpu_boot_status;
extern void secondary_entry(void);

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_send_wakeup_ipi_mask(const struct cpumask *mask)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_30(void) ; if (__cond) __compiletime_assert_30(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
}


extern int __cpu_disable(void);

extern void __cpu_die(unsigned int cpu);
extern void cpu_die(void);
extern void cpu_die_early(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpu_park_loop(void)
{
 for (;;) {
  asm volatile("wfe" : : : "memory");
  asm volatile("wfi" : : : "memory");
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_cpu_boot_status(int val)
{
 ({ union { typeof(secondary_data.status) __val; char __c[1]; } __u = { .__val = ( typeof(secondary_data.status)) (val) }; __write_once_size(&(secondary_data.status), __u.__c, sizeof(secondary_data.status)); __u.__val; });

 asm volatile("dsb " "ishst" : : : "memory");
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cpu_panic_kernel(void)
{
 update_cpu_boot_status((3));
 cpu_park_loop();
}
# 149 "../arch/arm64/include/asm/smp.h"
bool cpus_are_stuck_in_kernel(void);

extern void crash_smp_send_stop(void);
extern bool smp_crash_stop_failed(void);
# 65 "../include/linux/smp.h" 2
# 74 "../include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




int smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__ ((__section__(".init.text"))) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__ ((__section__(".init.text"))) setup_nr_cpu_ids(void);
extern void __attribute__ ((__section__(".init.text"))) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 209 "../include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_enable_nonboot_cpus_begin(void);
extern void arch_enable_nonboot_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 29 "../arch/arm64/include/asm/arch_timer.h" 2


# 1 "../include/clocksource/arm_arch_timer.h" 1
# 20 "../include/clocksource/arm_arch_timer.h"
# 1 "../include/linux/timecounter.h" 1
# 39 "../include/linux/timecounter.h"
struct cyclecounter {
 u64 (*read)(const struct cyclecounter *cc);
 u64 mask;
 u32 mult;
 u32 shift;
};
# 64 "../include/linux/timecounter.h"
struct timecounter {
 const struct cyclecounter *cc;
 u64 cycle_last;
 u64 nsec;
 u64 mask;
 u64 frac;
};
# 79 "../include/linux/timecounter.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 cyclecounter_cyc2ns(const struct cyclecounter *cc,
          u64 cycles, u64 mask, u64 *frac)
{
 u64 ns = (u64) cycles;

 ns = (ns * cc->mult) + *frac;
 *frac = ns & mask;
 return ns >> cc->shift;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
 tc->nsec += delta;
}
# 108 "../include/linux/timecounter.h"
extern void timecounter_init(struct timecounter *tc,
        const struct cyclecounter *cc,
        u64 start_tstamp);
# 120 "../include/linux/timecounter.h"
extern u64 timecounter_read(struct timecounter *tc);
# 136 "../include/linux/timecounter.h"
extern u64 timecounter_cyc2time(struct timecounter *tc,
    u64 cycle_tstamp);
# 21 "../include/clocksource/arm_arch_timer.h" 2
# 36 "../include/clocksource/arm_arch_timer.h"
enum arch_timer_reg {
 ARCH_TIMER_REG_CTRL,
 ARCH_TIMER_REG_TVAL,
};

enum arch_timer_ppi_nr {
 ARCH_TIMER_PHYS_SECURE_PPI,
 ARCH_TIMER_PHYS_NONSECURE_PPI,
 ARCH_TIMER_VIRT_PPI,
 ARCH_TIMER_HYP_PPI,
 ARCH_TIMER_MAX_TIMER_PPI
};

enum arch_timer_spi_nr {
 ARCH_TIMER_PHYS_SPI,
 ARCH_TIMER_VIRT_SPI,
 ARCH_TIMER_MAX_TIMER_SPI
};
# 72 "../include/clocksource/arm_arch_timer.h"
struct arch_timer_kvm_info {
 struct timecounter timecounter;
 int virtual_irq;
};

struct arch_timer_mem_frame {
 bool valid;
 phys_addr_t cntbase;
 size_t size;
 int phys_irq;
 int virt_irq;
};

struct arch_timer_mem {
 phys_addr_t cntctlbase;
 size_t size;
 struct arch_timer_mem_frame frame[8];
};



extern u32 arch_timer_get_rate(void);
extern u64 (*arch_timer_read_counter)(void);
extern struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
extern void arch_timer_mem_get_cval(u32 *lo, u32 *hi);
# 32 "../arch/arm64/include/asm/arch_timer.h" 2


extern struct static_key_false arch_timer_read_ool_enabled;






enum arch_timer_erratum_match_type {
 ate_match_dt,
 ate_match_local_cap_id,
 ate_match_acpi_oem_info,
};

struct clock_event_device;

struct arch_timer_erratum_workaround {
 enum arch_timer_erratum_match_type match_type;
 const void *id;
 const char *desc;
 u32 (*read_cntp_tval_el0)(void);
 u32 (*read_cntv_tval_el0)(void);
 u64 (*read_cntvct_el0)(void);
 int (*set_next_event_phys)(unsigned long, struct clock_event_device *);
 int (*set_next_event_virt)(unsigned long, struct clock_event_device *);
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(const struct arch_timer_erratum_workaround *) timer_unstable_counter_workaround;
# 86 "../arch/arm64/include/asm/arch_timer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void arch_timer_reg_write_cp15(int access, enum arch_timer_reg reg, u32 val)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 }

 asm volatile("isb" : : : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
u32 arch_timer_reg_read_cp15(int access, enum arch_timer_reg reg)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntp_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&arch_timer_read_ool_enabled)->key) > 0; })), 0)) { const struct arch_timer_erratum_workaround *wa; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); if (wa && wa->read_cntp_tval_el0) _val = wa->read_cntp_tval_el0(); else _val = ({ u64 __val; asm volatile("mrs %0, " "cntp_tval_el0" : "=r" (__val)); __val; }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); } else { _val = ({ u64 __val; asm volatile("mrs %0, " "cntp_tval_el0" : "=r" (__val)); __val; }); } _val; });
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntv_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&arch_timer_read_ool_enabled)->key) > 0; })), 0)) { const struct arch_timer_erratum_workaround *wa; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); if (wa && wa->read_cntv_tval_el0) _val = wa->read_cntv_tval_el0(); else _val = ({ u64 __val; asm volatile("mrs %0, " "cntv_tval_el0" : "=r" (__val)); __val; }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); } else { _val = ({ u64 __val; asm volatile("mrs %0, " "cntv_tval_el0" : "=r" (__val)); __val; }); } _val; });
  }
 }

 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"arch/arm64/include/asm/arch_timer.h\"; .popsection; .long 2b - 0b; .short 131; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 arch_timer_get_cntfrq(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntfrq_el0" : "=r" (__val)); __val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 arch_timer_get_cntkctl(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntkctl_el1" : "=r" (__val)); __val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_timer_set_cntkctl(u32 cntkctl)
{
 do { u64 __val = (u64)(cntkctl); asm volatile("msr " "cntkctl_el1" ", %x0" : : "rZ" (__val)); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 arch_counter_get_cntpct(void)
{



 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"arch/arm64/include/asm/arch_timer.h\"; .popsection; .long 2b - 0b; .short 154; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 arch_counter_get_cntvct(void)
{
 asm volatile("isb" : : : "memory");
 return ({ u64 _val; if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&arch_timer_read_ool_enabled)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&arch_timer_read_ool_enabled)->key) > 0; })), 0)) { const struct arch_timer_erratum_workaround *wa; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); if (wa && wa->read_cntvct_el0) _val = wa->read_cntvct_el0(); else _val = ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; }); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); } else { _val = ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; }); } _val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int arch_timer_arch_init(void)
{
 return 0;
}
# 20 "../arch/arm64/include/asm/timex.h" 2







# 1 "../include/asm-generic/timex.h" 1







typedef unsigned long cycles_t;
# 28 "../arch/arm64/include/asm/timex.h" 2
# 66 "../include/linux/timex.h" 2
# 139 "../include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "../include/linux/timex.h"
extern int do_adjtimex(struct timex *);
extern void hardpps(const struct timespec *, const struct timespec *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
# 11 "../include/linux/jiffies.h" 2

# 1 "./include/generated/timeconst.h" 1
# 13 "../include/linux/jiffies.h" 2
# 60 "../include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 80 "../include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 190 "../include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 291 "../include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 100) - 1) / (1000L / 100);
}
# 363 "../include/linux/jiffies.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 100) - 1) / (1000000L / 100);
}
# 410 "../include/linux/jiffies.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL>>1)) >> 1)-1)))
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec *value);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long timespec_to_jiffies(const struct timespec *value)
{
 struct timespec ts = timespec_to_timespec64(*value);

 return timespec64_to_jiffies(&ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void jiffies_to_timespec(const unsigned long jiffies,
           struct timespec *value)
{
 struct timespec ts;

 jiffies_to_timespec64(jiffies, &ts);
 *value = timespec64_to_timespec(ts);
}

extern unsigned long timeval_to_jiffies(const struct timeval *value);
extern void jiffies_to_timeval(const unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(({ typeof(0L) __UNIQUE_ID_max1_31 = (0L); typeof(delta) __UNIQUE_ID_max2_32 = (delta); (void) (&__UNIQUE_ID_max1_31 == &__UNIQUE_ID_max2_32); __UNIQUE_ID_max1_31 > __UNIQUE_ID_max2_32 ? __UNIQUE_ID_max1_31 : __UNIQUE_ID_max2_32; }));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "../include/linux/ktime.h" 2


typedef s64 ktime_t;
# 37 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 70 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t timespec64_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
# 109 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 125 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 137 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 162 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/ktime.h\"; .popsection; .long 2b - 0b; .short 168; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 223 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool ktime_to_timespec_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 242 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 262 "../include/linux/ktime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "../include/linux/timekeeping.h" 1








void timekeeping_init(void);
extern int timekeeping_suspended;


extern void update_process_times(int user);
extern void xtime_update(unsigned long ticks);




extern void do_gettimeofday(struct timeval *tv);
extern int do_settimeofday64(const struct timespec *ts);
extern int do_sys_settimeofday64(const struct timespec *tv,
     const struct timezone *tz);



unsigned long get_seconds(void);
struct timespec current_kernel_time64(void);

struct timespec __current_kernel_time(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec current_kernel_time(void)
{
 struct timespec now = current_kernel_time64();

 return timespec64_to_timespec(now);
}




struct timespec get_monotonic_coarse64(void);
extern void getrawmonotonic64(struct timespec *ts);
extern void ktime_get_ts64(struct timespec *ts);
extern time64_t ktime_get_seconds(void);
extern time64_t ktime_get_real_seconds(void);

extern int __getnstimeofday64(struct timespec *tv);
extern void getnstimeofday64(struct timespec *tv);
extern void getboottime64(struct timespec *ts);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int do_settimeofday(const struct timespec *ts)
{
 return do_settimeofday64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __getnstimeofday(struct timespec *ts)
{
 return __getnstimeofday64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void getnstimeofday(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ktime_get_ts(struct timespec *ts)
{
 ktime_get_ts64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ktime_get_real_ts(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void getrawmonotonic(struct timespec *ts)
{
 getrawmonotonic64(ts);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct timespec get_monotonic_coarse(void)
{
 return get_monotonic_coarse64();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void getboottime(struct timespec *ts)
{
 return getboottime64(ts);
}
# 167 "../include/linux/timekeeping.h"
enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ktime_get_ns(void)
{
 return (ktime_get());
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ktime_get_real_ns(void)
{
 return (ktime_get_real());
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ktime_get_boot_ns(void)
{
 return (ktime_get_boottime());
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ktime_get_tai_ns(void)
{
 return (ktime_get_clocktai());
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ktime_get_raw_ns(void)
{
 return (ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_monotonic_boottime(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_monotonic_boottime64(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timekeeping_clocktai(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_clocktai()));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timekeeping_clocktai64(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_clocktai()));
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(struct timespec *delta);




extern void ktime_get_raw_and_real_ts64(struct timespec *ts_raw,
            struct timespec *ts_real);
# 290 "../include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 305 "../include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 318 "../include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);




extern int persistent_clock_is_local;

extern void read_persistent_clock(struct timespec *ts);
extern void read_persistent_clock64(struct timespec *ts);
extern void read_boot_clock64(struct timespec *ts);
extern int update_persistent_clock(struct timespec now);
extern int update_persistent_clock64(struct timespec now);
# 273 "../include/linux/ktime.h" 2
# 7 "../include/linux/timer.h" 2

# 1 "../include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "../include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;
};
# 55 "../include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "../include/linux/debugobjects.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
debug_object_activate (void *addr, struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_object_assert_init(void *addr, struct debug_obj_descr *descr) { }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_objects_early_init(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_objects_mem_init(void) { }





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "../include/linux/timer.h" 2


struct tvec_base;

struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(unsigned long);
 unsigned long data;
 u32 flags;




};
# 93 "../include/linux/timer.h"
void init_timer_key(struct timer_list *timer, unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_timer_on_stack(struct timer_list *timer) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_timer_on_stack_key(struct timer_list *timer,
        unsigned int flags, const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, flags, name, key);
}
# 175 "../include/linux/timer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timer_setup(struct timer_list *timer,
          void (*callback)(struct timer_list *),
          unsigned int flags)
{
 do { init_timer_key(((timer)), ((flags)), ((void *)0), ((void *)0)); (timer)->function = ((void (*)(unsigned long))callback); (timer)->data = ((unsigned long)timer); } while (0);

}
# 196 "../include/linux/timer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int timer_pending(const struct timer_list * timer)
{
 return timer->entry.pprev != ((void *)0);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);

extern bool check_pending_deferrable_timers(int cpu);
# 216 "../include/linux/timer.h"
extern void timer_quiesce_cpu(void *cpup);

extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);

extern struct timer_base timer_base_deferrable;


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "../include/linux/workqueue.h" 2







struct workqueue_struct;

struct work_struct;

typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(unsigned long __data);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 8,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;




 int ux_work;

};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};






struct workqueue_attrs {



 int nice;

 int ux_state;




 cpumask_var_t cpumask;
# 152 "../include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void)))); extern void __compiletime_assert_33(void) ; if (__cond) __compiletime_assert_33(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 208 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __init_work(struct work_struct *work, int onstack) {
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int work_static(struct work_struct *work) { return 0; }
# 297 "../include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 330 "../include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 WQ_UX = 1 << 15,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 376 "../include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;

extern struct workqueue_struct *system_ux_wq;

extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;

extern struct workqueue_struct *
__alloc_workqueue_key(const char *fmt, unsigned int flags, int max_active,
 struct lock_class_key *key, const char *lock_name, ...) __attribute__((format(printf, 1, 6)));
# 450 "../include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(gfp_t gfp_mask);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((format(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
# 500 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 514 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 529 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 543 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 559 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 588 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 602 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 616 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 632 "../include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 652 "../include/linux/workqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


int __attribute__ ((__section__(".init.text"))) workqueue_init_early(void);
int __attribute__ ((__section__(".init.text"))) workqueue_init(void);
# 27 "../include/linux/rhashtable.h" 2
# 67 "../include/linux/rhashtable.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};
# 90 "../include/linux/rhashtable.h"
struct bucket_table {
 unsigned int size;
 unsigned int nest;
 unsigned int rehash;
 u32 hash_rnd;
 unsigned int locks_mask;
 spinlock_t *locks;
 struct list_head walkers;
 struct callback_head rcu;

 struct bucket_table *future_tbl;

 struct rhash_head *buckets[] __attribute__((__aligned__((1 << 7))));
};






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);

struct rhashtable;
# 137 "../include/linux/rhashtable.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 u8 locks_mul;
 u32 nulls_base;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 164 "../include/linux/rhashtable.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 203 "../include/linux/rhashtable.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long rht_marker(const struct rhashtable *ht, u32 hash)
{
 return (1UL | (((long)ht->p.nulls_base + hash) << 1));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rht_is_a_nulls(const struct rhash_head *ptr)
{
 return ((unsigned long) ptr & 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long rht_get_nulls_value(const struct rhash_head *ptr)
{
 return ((unsigned long) ptr) >> 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *rht_obj(const struct rhashtable *ht,
       const struct rhash_head *he)
{
 return (char *)he - ht->p.head_offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int rht_bucket_index(const struct bucket_table *tbl,
         unsigned int hash)
{
 return (hash >> (4 + 1)) & (tbl->size - 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int rht_key_hashfn(
 struct rhashtable *ht, const struct bucket_table *tbl,
 const void *key, const struct rhashtable_params params)
{
 unsigned int hash;


 if (!__builtin_constant_p(params.key_len))
  hash = ht->p.hashfn(key, ht->key_len, tbl->hash_rnd);
 else if (params.key_len) {
  unsigned int key_len = params.key_len;

  if (params.hashfn)
   hash = params.hashfn(key, key_len, tbl->hash_rnd);
  else if (key_len & (sizeof(u32) - 1))
   hash = jhash(key, key_len, tbl->hash_rnd);
  else
   hash = jhash2(key, key_len / sizeof(u32),
          tbl->hash_rnd);
 } else {
  unsigned int key_len = ht->p.key_len;

  if (params.hashfn)
   hash = params.hashfn(key, key_len, tbl->hash_rnd);
  else
   hash = jhash(key, key_len, tbl->hash_rnd);
 }

 return rht_bucket_index(tbl, hash);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int rht_head_hashfn(
 struct rhashtable *ht, const struct bucket_table *tbl,
 const struct rhash_head *he, const struct rhashtable_params params)
{
 const char *ptr = rht_obj(ht, he);

 return __builtin_expect(!!(params.obj_hashfn), 1) ?
        rht_bucket_index(tbl, params.obj_hashfn(ptr, params.key_len ?:
           ht->p.key_len,
             tbl->hash_rnd)) :
        rht_key_hashfn(ht, tbl, ptr + params.key_offset, params);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rht_grow_above_75(const struct rhashtable *ht,
         const struct bucket_table *tbl)
{

 return ({ union { typeof((&ht->nelems)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); else __read_once_size_nocheck(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); do { } while (0); __u.__val; }) > (tbl->size / 4 * 3) &&
        (!ht->p.max_size || tbl->size < ht->p.max_size);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rht_shrink_below_30(const struct rhashtable *ht,
           const struct bucket_table *tbl)
{

 return ({ union { typeof((&ht->nelems)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); else __read_once_size_nocheck(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); do { } while (0); __u.__val; }) < (tbl->size * 3 / 10) &&
        tbl->size > ht->p.min_size;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rht_grow_above_100(const struct rhashtable *ht,
          const struct bucket_table *tbl)
{
 return ({ union { typeof((&ht->nelems)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); else __read_once_size_nocheck(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); do { } while (0); __u.__val; }) > tbl->size &&
  (!ht->p.max_size || tbl->size < ht->p.max_size);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rht_grow_above_max(const struct rhashtable *ht,
          const struct bucket_table *tbl)
{
 return ({ union { typeof((&ht->nelems)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); else __read_once_size_nocheck(&((&ht->nelems)->counter), __u.__c, sizeof((&ht->nelems)->counter)); do { } while (0); __u.__val; }) >= ht->max_elems;
}
# 348 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *rht_bucket_lock(const struct bucket_table *tbl,
       unsigned int hash)
{
 return &tbl->locks[hash & tbl->locks_mask];
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int lockdep_rht_mutex_is_held(struct rhashtable *ht)
{
 return 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int lockdep_rht_bucket_is_held(const struct bucket_table *tbl,
          u32 hash)
{
 return 1;
}


int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);

void *rhashtable_insert_slow(struct rhashtable *ht, const void *key,
        struct rhash_head *obj);

void rhashtable_walk_enter(struct rhashtable *ht,
      struct rhashtable_iter *iter);
void rhashtable_walk_exit(struct rhashtable_iter *iter);
int rhashtable_walk_start(struct rhashtable_iter *iter) ;
void *rhashtable_walk_next(struct rhashtable_iter *iter);
void rhashtable_walk_stop(struct rhashtable_iter *iter) ;

void rhashtable_free_and_destroy(struct rhashtable *ht,
     void (*free_fn)(void *ptr, void *arg),
     void *arg);
void rhashtable_destroy(struct rhashtable *ht);

struct rhash_head **rht_bucket_nested(const struct bucket_table *tbl,
         unsigned int hash);
struct rhash_head **rht_bucket_nested_insert(struct rhashtable *ht,
         struct bucket_table *tbl,
         unsigned int hash);
# 411 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rhash_head *const *rht_bucket(
 const struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested(tbl, hash) :
         &tbl->buckets[hash];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rhash_head **rht_bucket_var(
 struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested(tbl, hash) :
         &tbl->buckets[hash];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rhash_head **rht_bucket_insert(
 struct rhashtable *ht, struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested_insert(ht, tbl, hash) :
         &tbl->buckets[hash];
}
# 590 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_compare(struct rhashtable_compare_arg *arg,
         const void *obj)
{
 struct rhashtable *ht = arg->ht;
 const char *ptr = obj;

 return memcmp(ptr + ht->p.key_offset, arg->key, ht->p.key_len);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rhash_head *__rhashtable_lookup(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 struct rhashtable_compare_arg arg = {
  .ht = ht,
  .key = key,
 };
 struct bucket_table *tbl;
 struct rhash_head *he;
 unsigned int hash;

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });
restart:
 hash = rht_key_hashfn(ht, tbl, key, params);
 for (({__asm__ __volatile__("": : :"memory"); }), he = ({ typeof(*(*rht_bucket(tbl, hash))) *________p1 = (typeof(*(*rht_bucket(tbl, hash))) *)({ union { typeof((*rht_bucket(tbl, hash))) __val; char __c[1]; } __u; if (1) __read_once_size(&((*rht_bucket(tbl, hash))), __u.__c, sizeof((*rht_bucket(tbl, hash)))); else __read_once_size_nocheck(&((*rht_bucket(tbl, hash))), __u.__c, sizeof((*rht_bucket(tbl, hash)))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*rht_bucket(tbl, hash))) *)(________p1)); }); !rht_is_a_nulls(he); he = ({ typeof(he->next) ________p1 = ({ union { typeof(he->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(he->next), __u.__c, sizeof(he->next)); else __read_once_size_nocheck(&(he->next), __u.__c, sizeof(he->next)); do { } while (0); __u.__val; }); ((typeof(*he->next) *)(________p1)); })) {
  if (params.obj_cmpfn ?
      params.obj_cmpfn(&arg, rht_obj(ht, he)) :
      rhashtable_compare(&arg, rht_obj(ht, he)))
   continue;
  return he;
 }


 asm volatile("dmb " "ishld" : : : "memory");

 tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); });
 if (__builtin_expect(!!(tbl), 0))
  goto restart;

 return ((void *)0);
}
# 646 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 struct rhash_head *he = __rhashtable_lookup(ht, key, params);

 return he ? rht_obj(ht, he) : ((void *)0);
}
# 669 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_fast(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 void *obj;

 rcu_read_lock();
 obj = rhashtable_lookup(ht, key, params);
 rcu_read_unlock();

 return obj;
}
# 696 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rhlist_head *rhltable_lookup(
 struct rhltable *hlt, const void *key,
 const struct rhashtable_params params)
{
 struct rhash_head *he = __rhashtable_lookup(&hlt->ht, key, params);

 return he ? ({ void *__mptr = (void *)(he); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(he)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(he)), typeof(void)))); extern void __compiletime_assert_34(void) ; if (__cond) __compiletime_assert_34(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); }) : ((void *)0);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__rhashtable_insert_fast(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params, bool rhlist)
{
 struct rhashtable_compare_arg arg = {
  .ht = ht,
  .key = key,
 };
 struct rhash_head **pprev;
 struct bucket_table *tbl;
 struct rhash_head *head;
 spinlock_t *lock;
 unsigned int hash;
 int elasticity;
 void *data;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });
 hash = rht_head_hashfn(ht, tbl, obj, params);
 lock = rht_bucket_lock(tbl, hash);
 spin_lock_bh(lock);

 if (__builtin_expect(!!(({ do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)((tbl->future_tbl))); })), 0)) {
slow_path:
  spin_unlock_bh(lock);
  rcu_read_unlock();
  return rhashtable_insert_slow(ht, key, obj);
 }

 elasticity = 16u;
 pprev = rht_bucket_insert(ht, tbl, hash);
 data = ERR_PTR(-12);
 if (!pprev)
  goto out;

 for (head = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(head); head = ({ do { } while (0); ; ((typeof(*((head)->next)) *)(((head)->next))); })) {
  struct rhlist_head *plist;
  struct rhlist_head *list;

  elasticity--;
  if (!key ||
      (params.obj_cmpfn ?
       params.obj_cmpfn(&arg, rht_obj(ht, head)) :
       rhashtable_compare(&arg, rht_obj(ht, head)))) {
   pprev = &head->next;
   continue;
  }

  data = rht_obj(ht, head);

  if (!rhlist)
   goto out;


  list = ({ void *__mptr = (void *)(obj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(obj)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(obj)), typeof(void)))); extern void __compiletime_assert_35(void) ; if (__cond) __compiletime_assert_35(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });
  plist = ({ void *__mptr = (void *)(head); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(head)), typeof(void)))); extern void __compiletime_assert_36(void) ; if (__cond) __compiletime_assert_36(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });

  do { ; ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) ((typeof(*(plist)) *)(plist)) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; }); } while (0);
  head = ({ do { } while (0); ; ((typeof(*(head->next)) *)((head->next))); });
  do { ; ({ union { typeof(list->rhead.next) __val; char __c[1]; } __u = { .__val = ( typeof(list->rhead.next)) ((typeof(*(head)) *)(head)) }; __write_once_size(&(list->rhead.next), __u.__c, sizeof(list->rhead.next)); __u.__val; }); } while (0);
  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_37(void) ; if (__cond) __compiletime_assert_37(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*pprev) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });

  goto good;
 }

 if (elasticity <= 0)
  goto slow_path;

 data = ERR_PTR(-7);
 if (__builtin_expect(!!(rht_grow_above_max(ht, tbl)), 0))
  goto out;

 if (__builtin_expect(!!(rht_grow_above_100(ht, tbl)), 0))
  goto slow_path;

 head = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); });

 do { ; ({ union { typeof(obj->next) __val; char __c[1]; } __u = { .__val = ( typeof(obj->next)) ((typeof(*(head)) *)(head)) }; __write_once_size(&(obj->next), __u.__c, sizeof(obj->next)); __u.__val; }); } while (0);
 if (rhlist) {
  struct rhlist_head *list;

  list = ({ void *__mptr = (void *)(obj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(obj)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(obj)), typeof(void)))); extern void __compiletime_assert_38(void) ; if (__cond) __compiletime_assert_38(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });
  do { ; ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) ((typeof(*(((void *)0))) *)(((void *)0))) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; }); } while (0);
 }

 ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_39(void) ; if (__cond) __compiletime_assert_39(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*pprev) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });

 atomic_add(1, (&ht->nelems));
 if (rht_grow_above_75(ht, tbl))
  schedule_work(&ht->run_work);

good:
 data = ((void *)0);

out:
 spin_unlock_bh(lock);
 rcu_read_unlock();

 return data;
}
# 827 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 void *ret;

 ret = __rhashtable_insert_fast(ht, ((void *)0), obj, params, false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 857 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhltable_insert_key(
 struct rhltable *hlt, const void *key, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 return PTR_ERR(__rhashtable_insert_fast(&hlt->ht, key, &list->rhead,
      params, true));
}
# 881 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhltable_insert(
 struct rhltable *hlt, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(&hlt->ht, &list->rhead);

 key += params.key_offset;

 return rhltable_insert_key(hlt, key, list, params);
}
# 913 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_lookup_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(ht, obj);
 void *ret;

 do { if (__builtin_expect(!!(ht->p.obj_hashfn), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rhashtable.h\"; .popsection; .long 2b - 0b; .short 920; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 ret = __rhashtable_insert_fast(ht, key + ht->p.key_offset, obj, params,
           false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 940 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_get_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(ht, obj);

 do { if (__builtin_expect(!!(ht->p.obj_hashfn), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rhashtable.h\"; .popsection; .long 2b - 0b; .short 946; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 return __rhashtable_insert_fast(ht, key + ht->p.key_offset, obj, params,
     false);
}
# 974 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_lookup_insert_key(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 void *ret;

 do { if (__builtin_expect(!!(!ht->p.obj_hashfn || !key), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rhashtable.h\"; .popsection; .long 2b - 0b; .short 980; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 ret = __rhashtable_insert_fast(ht, key, obj, params, false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 1000 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_get_insert_key(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 do { if (__builtin_expect(!!(!ht->p.obj_hashfn || !key), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/rhashtable.h\"; .popsection; .long 2b - 0b; .short 1004; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 return __rhashtable_insert_fast(ht, key, obj, params, false);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __rhashtable_remove_fast_one(
 struct rhashtable *ht, struct bucket_table *tbl,
 struct rhash_head *obj, const struct rhashtable_params params,
 bool rhlist)
{
 struct rhash_head **pprev;
 struct rhash_head *he;
 spinlock_t * lock;
 unsigned int hash;
 int err = -2;

 hash = rht_head_hashfn(ht, tbl, obj, params);
 lock = rht_bucket_lock(tbl, hash);

 spin_lock_bh(lock);

 pprev = rht_bucket_var(tbl, hash);
 for (he = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(he); he = ({ do { } while (0); ; ((typeof(*((he)->next)) *)(((he)->next))); })) {
  struct rhlist_head *list;

  list = ({ void *__mptr = (void *)(he); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(he)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(he)), typeof(void)))); extern void __compiletime_assert_40(void) ; if (__cond) __compiletime_assert_40(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });

  if (he != obj) {
   struct rhlist_head **lpprev;

   pprev = &he->next;

   if (!rhlist)
    continue;

   do {
    lpprev = &list->next;
    list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });

   } while (list && obj != &list->rhead);

   if (!list)
    continue;

   list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });
   do { ; ({ union { typeof(*lpprev) __val; char __c[1]; } __u = { .__val = ( typeof(*lpprev)) ((typeof(*(list)) *)(list)) }; __write_once_size(&(*lpprev), __u.__c, sizeof(*lpprev)); __u.__val; }); } while (0);
   err = 0;
   break;
  }

  obj = ({ do { } while (0); ; ((typeof(*(obj->next)) *)((obj->next))); });
  err = 1;

  if (rhlist) {
   list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });
   if (list) {
    do { ; ({ union { typeof(list->rhead.next) __val; char __c[1]; } __u = { .__val = ( typeof(list->rhead.next)) ((typeof(*(obj)) *)(obj)) }; __write_once_size(&(list->rhead.next), __u.__c, sizeof(list->rhead.next)); __u.__val; }); } while (0);
    obj = &list->rhead;
    err = 0;
   }
  }

  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_41(void) ; if (__cond) __compiletime_assert_41(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*pprev) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
  break;
 }

 spin_unlock_bh(lock);

 if (err > 0) {
  atomic_sub(1, (&ht->nelems));
  if (__builtin_expect(!!(ht->p.automatic_shrinking && rht_shrink_below_30(ht, tbl)), 0))

   schedule_work(&ht->run_work);
  err = 0;
 }

 return err;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __rhashtable_remove_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params, bool rhlist)
{
 struct bucket_table *tbl;
 int err;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });






 while ((err = __rhashtable_remove_fast_one(ht, tbl, obj, params,
         rhlist)) &&
        (tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); })))
  ;

 rcu_read_unlock();

 return err;
}
# 1126 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_remove_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 return __rhashtable_remove_fast(ht, obj, params, false);
}
# 1148 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhltable_remove(
 struct rhltable *hlt, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 return __rhashtable_remove_fast(&hlt->ht, &list->rhead, params, true);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __rhashtable_replace_fast(
 struct rhashtable *ht, struct bucket_table *tbl,
 struct rhash_head *obj_old, struct rhash_head *obj_new,
 const struct rhashtable_params params)
{
 struct rhash_head **pprev;
 struct rhash_head *he;
 spinlock_t *lock;
 unsigned int hash;
 int err = -2;




 hash = rht_head_hashfn(ht, tbl, obj_old, params);
 if (hash != rht_head_hashfn(ht, tbl, obj_new, params))
  return -22;

 lock = rht_bucket_lock(tbl, hash);

 spin_lock_bh(lock);

 pprev = rht_bucket_var(tbl, hash);
 for (he = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(he); he = ({ do { } while (0); ; ((typeof(*((he)->next)) *)(((he)->next))); })) {
  if (he != obj_old) {
   pprev = &he->next;
   continue;
  }

  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj_old->next); if (__builtin_constant_p(obj_old->next) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((obj_new->next)) __val; char __c[1]; } __u = { .__val = ( typeof((obj_new->next))) ((typeof(obj_new->next))(_r_a_p__v)) }; __write_once_size(&((obj_new->next)), __u.__c, sizeof((obj_new->next))); __u.__val; }); else do { union { typeof(*&obj_new->next) __val; char __c[1]; } __u = { .__val = ( typeof(*&obj_new->next)) ((typeof(*((typeof(obj_new->next))_r_a_p__v)) *)((typeof(obj_new->next))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&obj_new->next) == sizeof(char) || sizeof(*&obj_new->next) == sizeof(short) || sizeof(*&obj_new->next) == sizeof(int) || sizeof(*&obj_new->next) == sizeof(long))); extern void __compiletime_assert_42(void) ; if (__cond) __compiletime_assert_42(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&obj_new->next)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&obj_new->next) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&obj_new->next) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&obj_new->next) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&obj_new->next) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj_new); if (__builtin_constant_p(obj_new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_43(void) ; if (__cond) __compiletime_assert_43(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&*pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*&*pprev) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*&*pprev) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); _r_a_p__v; });
  err = 0;
  break;
 }

 spin_unlock_bh(lock);

 return err;
}
# 1210 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_replace_fast(
 struct rhashtable *ht, struct rhash_head *obj_old,
 struct rhash_head *obj_new,
 const struct rhashtable_params params)
{
 struct bucket_table *tbl;
 int err;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });






 while ((err = __rhashtable_replace_fast(ht, tbl, obj_old,
      obj_new, params)) &&
        (tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); })))
  ;

 rcu_read_unlock();

 return err;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rhashtable_walk_init(struct rhashtable *ht,
           struct rhashtable_iter *iter, gfp_t gfp)
{
 rhashtable_walk_enter(ht, iter);
 return 0;
}
# 1265 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rhltable_walk_enter(struct rhltable *hlt,
           struct rhashtable_iter *iter)
{
 return rhashtable_walk_enter(&hlt->ht, iter);
}
# 1279 "../include/linux/rhashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rhltable_free_and_destroy(struct rhltable *hlt,
          void (*free_fn)(void *ptr,
            void *arg),
          void *arg)
{
 return rhashtable_free_and_destroy(&hlt->ht, free_fn, arg);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rhltable_destroy(struct rhltable *hlt)
{
 return rhltable_free_and_destroy(hlt, ((void *)0), ((void *)0));
}
# 8 "../include/linux/ipc.h" 2
# 1 "../include/uapi/linux/ipc.h" 1
# 10 "../include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/arm64/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "../include/uapi/asm-generic/ipcbuf.h" 1
# 20 "../include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/arm64/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "../include/uapi/linux/ipc.h" 2
# 58 "../include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "../include/linux/ipc.h" 2





struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << 7)))) ;
# 6 "../include/uapi/linux/sem.h" 2
# 24 "../include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/arm64/include/generated/uapi/asm/sembuf.h" 1
# 1 "../include/uapi/asm-generic/sembuf.h" 1
# 24 "../include/uapi/asm-generic/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;



 __kernel_time_t sem_ctime;



 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/arm64/include/generated/uapi/asm/sembuf.h" 2
# 37 "../include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 10 "../include/linux/sem.h" 2

struct task_struct;


struct sem {
 int semval;







 int sempid;
 spinlock_t lock;
 struct list_head pending_alter;

 struct list_head pending_const;

 time_t sem_otime;
} __attribute__((__aligned__((1 << 7))));


struct sem_array {
 struct kern_ipc_perm sem_perm;
 time64_t sem_ctime;
 struct list_head pending_alter;

 struct list_head pending_const;

 struct list_head list_id;
 int sem_nsems;
 int complex_count;
 unsigned int use_global_lock;

 struct sem sems[];
} ;
# 59 "../include/linux/sem.h"
struct sysv_sem {

};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int copy_semundo(unsigned long clone_flags, struct task_struct *tsk)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void exit_sem(struct task_struct *tsk)
{
 return;
}
# 16 "../include/linux/sched.h" 2
# 1 "../include/linux/shm.h" 1





# 1 "../arch/arm64/include/asm/page.h" 1
# 26 "../arch/arm64/include/asm/page.h"
# 1 "../include/linux/personality.h" 1




# 1 "../include/uapi/linux/personality.h" 1
# 11 "../include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "../include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "../include/linux/personality.h" 2
# 27 "../arch/arm64/include/asm/page.h" 2
# 1 "../arch/arm64/include/asm/pgtable-types.h" 1
# 23 "../arch/arm64/include/asm/pgtable-types.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 24 "../arch/arm64/include/asm/pgtable-types.h" 2

typedef u64 pteval_t;
typedef u64 pmdval_t;
typedef u64 pudval_t;
typedef u64 pgdval_t;




typedef struct { pteval_t pte; } pte_t;




typedef struct { pmdval_t pmd; } pmd_t;
# 49 "../arch/arm64/include/asm/pgtable-types.h"
typedef struct { pgdval_t pgd; } pgd_t;



typedef struct { pteval_t pgprot; } pgprot_t;
# 62 "../arch/arm64/include/asm/pgtable-types.h"
# 1 "../include/asm-generic/pgtable-nopud.h" 1







# 1 "../include/asm-generic/pgtable-nop4d-hack.h" 1





# 1 "../include/asm-generic/5level-fixup.h" 1
# 7 "../include/asm-generic/pgtable-nop4d-hack.h" 2








typedef struct { pgd_t pgd; } pud_t;
# 27 "../include/asm-generic/pgtable-nop4d-hack.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgd_clear(pgd_t *pgd) { }
# 40 "../include/asm-generic/pgtable-nop4d-hack.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pud_t *pud_offset(pgd_t *pgd, unsigned long address)
{
 return (pud_t *)pgd;
}
# 9 "../include/asm-generic/pgtable-nopud.h" 2
# 63 "../arch/arm64/include/asm/pgtable-types.h" 2
# 28 "../arch/arm64/include/asm/page.h" 2

extern void __cpu_clear_user_page(void *p, unsigned long user);
extern void __cpu_copy_user_page(void *to, const void *from,
     unsigned long user);
extern void copy_page(void *to, const void *from);
extern void clear_page(void *to);
# 42 "../arch/arm64/include/asm/page.h"
typedef struct page *pgtable_t;


extern int pfn_valid(unsigned long);
# 56 "../arch/arm64/include/asm/page.h"
# 1 "../include/asm-generic/getorder.h" 1
# 29 "../include/asm-generic/getorder.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 12;

  if (size < (1UL << 12))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? ( __builtin_constant_p((size) - 1) ? ( ((size) - 1) < 2 ? 0 : ((size) - 1) & (1ULL << 63) ? 63 : ((size) - 1) & (1ULL << 62) ? 62 : ((size) - 1) & (1ULL << 61) ? 61 : ((size) - 1) & (1ULL << 60) ? 60 : ((size) - 1) & (1ULL << 59) ? 59 : ((size) - 1) & (1ULL << 58) ? 58 : ((size) - 1) & (1ULL << 57) ? 57 : ((size) - 1) & (1ULL << 56) ? 56 : ((size) - 1) & (1ULL << 55) ? 55 : ((size) - 1) & (1ULL << 54) ? 54 : ((size) - 1) & (1ULL << 53) ? 53 : ((size) - 1) & (1ULL << 52) ? 52 : ((size) - 1) & (1ULL << 51) ? 51 : ((size) - 1) & (1ULL << 50) ? 50 : ((size) - 1) & (1ULL << 49) ? 49 : ((size) - 1) & (1ULL << 48) ? 48 : ((size) - 1) & (1ULL << 47) ? 47 : ((size) - 1) & (1ULL << 46) ? 46 : ((size) - 1) & (1ULL << 45) ? 45 : ((size) - 1) & (1ULL << 44) ? 44 : ((size) - 1) & (1ULL << 43) ? 43 : ((size) - 1) & (1ULL << 42) ? 42 : ((size) - 1) & (1ULL << 41) ? 41 : ((size) - 1) & (1ULL << 40) ? 40 : ((size) - 1) & (1ULL << 39) ? 39 : ((size) - 1) & (1ULL << 38) ? 38 : ((size) - 1) & (1ULL << 37) ? 37 : ((size) - 1) & (1ULL << 36) ? 36 : ((size) - 1) & (1ULL << 35) ? 35 : ((size) - 1) & (1ULL << 34) ? 34 : ((size) - 1) & (1ULL << 33) ? 33 : ((size) - 1) & (1ULL << 32) ? 32 : ((size) - 1) & (1ULL << 31) ? 31 : ((size) - 1) & (1ULL << 30) ? 30 : ((size) - 1) & (1ULL << 29) ? 29 : ((size) - 1) & (1ULL << 28) ? 28 : ((size) - 1) & (1ULL << 27) ? 27 : ((size) - 1) & (1ULL << 26) ? 26 : ((size) - 1) & (1ULL << 25) ? 25 : ((size) - 1) & (1ULL << 24) ? 24 : ((size) - 1) & (1ULL << 23) ? 23 : ((size) - 1) & (1ULL << 22) ? 22 : ((size) - 1) & (1ULL << 21) ? 21 : ((size) - 1) & (1ULL << 20) ? 20 : ((size) - 1) & (1ULL << 19) ? 19 : ((size) - 1) & (1ULL << 18) ? 18 : ((size) - 1) & (1ULL << 17) ? 17 : ((size) - 1) & (1ULL << 16) ? 16 : ((size) - 1) & (1ULL << 15) ? 15 : ((size) - 1) & (1ULL << 14) ? 14 : ((size) - 1) & (1ULL << 13) ? 13 : ((size) - 1) & (1ULL << 12) ? 12 : ((size) - 1) & (1ULL << 11) ? 11 : ((size) - 1) & (1ULL << 10) ? 10 : ((size) - 1) & (1ULL << 9) ? 9 : ((size) - 1) & (1ULL << 8) ? 8 : ((size) - 1) & (1ULL << 7) ? 7 : ((size) - 1) & (1ULL << 6) ? 6 : ((size) - 1) & (1ULL << 5) ? 5 : ((size) - 1) & (1ULL << 4) ? 4 : ((size) - 1) & (1ULL << 3) ? 3 : ((size) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
 }

 size--;
 size >>= 12;



 return fls64(size);

}
# 57 "../arch/arm64/include/asm/page.h" 2
# 7 "../include/linux/shm.h" 2
# 1 "../include/uapi/linux/shm.h" 1






# 1 "../include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "../include/uapi/linux/shm.h" 2
# 28 "../include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/arm64/include/generated/uapi/asm/shmbuf.h" 1
# 1 "../include/uapi/asm-generic/shmbuf.h" 1
# 26 "../include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;
 __kernel_time_t shm_atime;



 __kernel_time_t shm_dtime;



 __kernel_time_t shm_ctime;



 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 __kernel_ulong_t shm_nattch;
 __kernel_ulong_t __unused4;
 __kernel_ulong_t __unused5;
};

struct shminfo64 {
 __kernel_ulong_t shmmax;
 __kernel_ulong_t shmmin;
 __kernel_ulong_t shmmni;
 __kernel_ulong_t shmseg;
 __kernel_ulong_t shmall;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 2 "./arch/arm64/include/generated/uapi/asm/shmbuf.h" 2
# 44 "../include/uapi/linux/shm.h" 2
# 90 "../include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "../include/linux/shm.h" 2
# 1 "../arch/arm64/include/asm/shmparam.h" 1
# 26 "../arch/arm64/include/asm/shmparam.h"
# 1 "../include/uapi/asm-generic/shmparam.h" 1
# 27 "../arch/arm64/include/asm/shmparam.h" 2
# 9 "../include/linux/shm.h" 2

struct shmid_kernel
{
 struct kern_ipc_perm shm_perm;
 struct file *shm_file;
 unsigned long shm_nattch;
 unsigned long shm_segsz;
 time64_t shm_atim;
 time64_t shm_dtim;
 time64_t shm_ctim;
 pid_t shm_cprid;
 pid_t shm_lprid;
 struct user_struct *mlock_user;


 struct task_struct *shm_creator;
 struct list_head shm_clist;
} ;
# 43 "../include/linux/shm.h"
struct sysv_shm {

};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long do_shmat(int shmid, char *shmaddr,
       int shmflg, unsigned long *addr,
       unsigned long shmlba)
{
 return -38;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_file_shm_hugepages(struct file *file)
{
 return false;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void exit_shm(struct task_struct *task)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void shm_init_task(struct task_struct *task)
{
}
# 17 "../include/linux/sched.h" 2
# 1 "../include/linux/kcov.h" 1




# 1 "../include/uapi/linux/kcov.h" 1
# 11 "../include/uapi/linux/kcov.h"
struct kcov_remote_arg {
 __u32 trace_mode;
 __u32 area_size;
 __u32 num_handles;
 __u64 __attribute__((aligned(8))) common_handle;
 __u64 __attribute__((aligned(8))) handles[0];
};
# 26 "../include/uapi/linux/kcov.h"
enum {
# 35 "../include/uapi/linux/kcov.h"
 KCOV_TRACE_PC = 0,

 KCOV_TRACE_CMP = 1,
};
# 56 "../include/uapi/linux/kcov.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u64 kcov_remote_handle(__u64 subsys, __u64 inst)
{
 if (subsys & ~(0xffull << 56) || inst & ~(0xffffffffull))
  return 0;
 return subsys | inst;
}
# 6 "../include/linux/kcov.h" 2

struct task_struct;
# 57 "../include/linux/kcov.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_task_init(struct task_struct *t) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_task_exit(struct task_struct *t) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_prepare_switch(struct task_struct *t) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_finish_switch(struct task_struct *t) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_remote_start(u64 handle) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_remote_stop(void) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 kcov_common_handle(void)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_remote_start_common(u64 id) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kcov_remote_start_usb(u64 id) {}
# 18 "../include/linux/sched.h" 2

# 1 "../include/linux/plist.h" 1
# 81 "../include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 123 "../include/linux/plist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 212 "../include/linux/plist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 285 "../include/linux/plist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void)))); extern void __compiletime_assert_44(void) ; if (__cond) __compiletime_assert_44(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void)))); extern void __compiletime_assert_45(void) ; if (__cond) __compiletime_assert_45(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 20 "../include/linux/sched.h" 2
# 1 "../include/linux/hrtimer.h" 1
# 22 "../include/linux/hrtimer.h"
# 1 "../include/linux/percpu.h" 1
# 71 "../include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__ ((__section__(".init.text"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__ ((__section__(".init.text"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern int __attribute__ ((__section__(".init.text"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);
# 132 "../include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);


extern void __attribute__ ((__section__(".init.text"))) setup_per_cpu_areas(void);


extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 23 "../include/linux/hrtimer.h" 2

# 1 "../include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root head;
 struct timerqueue_node *next;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 35 "../include/linux/timerqueue.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 return head->next;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->head = (struct rb_root) { ((void *)0), };
 head->next = ((void *)0);
}
# 25 "../include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;




enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x0,
 HRTIMER_MODE_REL = 0x1,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_ABS_PINNED = 0x02,
 HRTIMER_MODE_REL_PINNED = 0x03,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 96 "../include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
};
# 112 "../include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 133 "../include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 int index;
 clockid_t clockid;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__(64)));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_MAX_CLOCK_BASES,
};
# 177 "../include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 seqcount_t seq;
 struct hrtimer *running;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 bool migration_enabled;
 bool nohz_active;

 unsigned int in_hrtirq : 1,
     hres_active : 1,
     hang_detected : 1;
 ktime_t expires_next;
 struct hrtimer *next_timer;
 unsigned int nr_events;
 unsigned int nr_retries;
 unsigned int nr_hangs;
 unsigned int max_hang_time;

 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 do { bool __cond = !(!(sizeof(struct hrtimer_clock_base) > 64)); extern void __compiletime_assert_46(void) ; if (__cond) __compiletime_assert_46(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return (timer->node.expires);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return timer->base->cpu_base->hres_active;
}
# 293 "../include/linux/hrtimer.h"
extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 313 "../include/linux/hrtimer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;





extern void hrtimer_quiesce_cpu(void *cpup);


extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 380 "../include/linux/hrtimer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = (((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 426 "../include/linux/hrtimer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ union { typeof(timer->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(timer->state), __u.__c, sizeof(timer->state)); else __read_once_size_nocheck(&(timer->state), __u.__c, sizeof(timer->state)); do { } while (0); __u.__val; }) & 0x01);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->cpu_base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 461 "../include/linux/hrtimer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec *);
extern long hrtimer_nanosleep(const struct timespec *rqtp,
         const enum hrtimer_mode mode,
         const clockid_t clockid);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
      const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       int clock);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__ ((__section__(".init.text"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 21 "../include/linux/sched.h" 2
# 1 "../include/linux/seccomp.h" 1




# 1 "../include/uapi/linux/seccomp.h" 1
# 56 "../include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};
# 6 "../include/linux/seccomp.h" 2








# 1 "../arch/arm64/include/asm/seccomp.h" 1
# 14 "../arch/arm64/include/asm/seccomp.h"
# 1 "../arch/arm64/include/asm/unistd.h" 1
# 52 "../arch/arm64/include/asm/unistd.h"
# 1 "../arch/arm64/include/uapi/asm/unistd.h" 1
# 20 "../arch/arm64/include/uapi/asm/unistd.h"
# 1 "../include/asm-generic/unistd.h" 1

# 1 "../include/uapi/asm-generic/unistd.h" 1
# 3 "../include/asm-generic/unistd.h" 2
# 21 "../arch/arm64/include/uapi/asm/unistd.h" 2
# 53 "../arch/arm64/include/asm/unistd.h" 2
# 15 "../arch/arm64/include/asm/seccomp.h" 2








# 1 "../include/asm-generic/seccomp.h" 1
# 14 "../include/asm-generic/seccomp.h"
# 1 "../include/uapi/linux/unistd.h" 1







# 1 "../arch/arm64/include/asm/unistd.h" 1
# 52 "../arch/arm64/include/asm/unistd.h"
# 1 "../arch/arm64/include/uapi/asm/unistd.h" 1
# 20 "../arch/arm64/include/uapi/asm/unistd.h"
# 1 "../include/asm-generic/unistd.h" 1

# 1 "../include/uapi/asm-generic/unistd.h" 1
# 3 "../include/asm-generic/unistd.h" 2
# 21 "../arch/arm64/include/uapi/asm/unistd.h" 2
# 53 "../arch/arm64/include/asm/unistd.h" 2
# 9 "../include/uapi/linux/unistd.h" 2
# 15 "../include/asm-generic/seccomp.h" 2
# 34 "../include/asm-generic/seccomp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 173,
  0,
 };
 return mode1_syscalls_32;
}
# 24 "../arch/arm64/include/asm/seccomp.h" 2
# 15 "../include/linux/seccomp.h" 2

struct seccomp_filter;
# 28 "../include/linux/seccomp.h"
struct seccomp {
 int mode;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int secure_computing(const struct seccomp_data *sd)
{
 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 11)), 0))
  return __secure_computing(sd);
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, char *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 83 "../include/linux/seccomp.h"
extern void put_seccomp_filter(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 100 "../include/linux/seccomp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
# 22 "../include/linux/sched.h" 2
# 1 "../include/linux/nodemask.h" 1
# 96 "../include/linux/nodemask.h"
# 1 "../include/linux/numa.h" 1
# 97 "../include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 119 "../include/linux/nodemask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __first_node(const nodemask_t *srcp)
{
 return ({ int __UNIQUE_ID_min1_47 = ((1 << 0)); int __UNIQUE_ID_min2_48 = (find_next_bit((srcp->bits), ((1 << 0)), 0)); (void) (&__UNIQUE_ID_min1_47 == &__UNIQUE_ID_min2_48); __UNIQUE_ID_min1_47 < __UNIQUE_ID_min2_48 ? __UNIQUE_ID_min1_47 : __UNIQUE_ID_min2_48; });
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __next_node(int n, const nodemask_t *srcp)
{
 return ({ int __UNIQUE_ID_min1_49 = ((1 << 0)); int __UNIQUE_ID_min2_50 = (find_next_bit(srcp->bits, (1 << 0), n+1)); (void) (&__UNIQUE_ID_min1_49 == &__UNIQUE_ID_min2_50); __UNIQUE_ID_min1_49 < __UNIQUE_ID_min2_50 ? __UNIQUE_ID_min1_49 : __UNIQUE_ID_min2_50; });
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 0));
 __node_set((node), &(*mask));
}
# 290 "../include/linux/nodemask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __first_unset_node(const nodemask_t *maskp)
{
 return ({ int __UNIQUE_ID_min1_51 = ((1 << 0)); int __UNIQUE_ID_min2_52 = (find_next_zero_bit((maskp->bits), ((1 << 0)), 0)); (void) (&__UNIQUE_ID_min1_51 == &__UNIQUE_ID_min2_52); __UNIQUE_ID_min1_51 < __UNIQUE_ID_min2_52 ? __UNIQUE_ID_min1_51 : __UNIQUE_ID_min2_52; });

}
# 324 "../include/linux/nodemask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 382 "../include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];
# 455 "../include/linux/nodemask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int node_state(int node, enum node_states state)
{
 return node == 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void node_set_state(int node, enum node_states state)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void node_clear_state(int node, enum node_states state)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int num_node_state(enum node_states state)
{
 return 1;
}
# 490 "../include/linux/nodemask.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int node_random(const nodemask_t *mask)
{
 return 0;
}
# 522 "../include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 23 "../include/linux/sched.h" 2

# 1 "../include/linux/resource.h" 1




# 1 "../include/uapi/linux/resource.h" 1
# 24 "../include/uapi/linux/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "../include/uapi/linux/resource.h"
# 1 "./arch/arm64/include/generated/uapi/asm/resource.h" 1
# 1 "../include/asm-generic/resource.h" 1




# 1 "../include/uapi/asm-generic/resource.h" 1
# 6 "../include/asm-generic/resource.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/resource.h" 2
# 79 "../include/uapi/linux/resource.h" 2
# 6 "../include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 25 "../include/linux/sched.h" 2
# 1 "../include/linux/latencytop.h" 1
# 14 "../include/linux/latencytop.h"
struct task_struct;
# 46 "../include/linux/latencytop.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_all_latency_tracing(struct task_struct *p)
{
}
# 26 "../include/linux/sched.h" 2
# 1 "../include/linux/sched/prio.h" 1
# 48 "../include/linux/sched/prio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 27 "../include/linux/sched.h" 2
# 1 "../include/linux/signal_types.h" 1
# 10 "../include/linux/signal_types.h"
# 1 "../include/uapi/linux/signal.h" 1




# 1 "../arch/arm64/include/uapi/asm/signal.h" 1
# 26 "../arch/arm64/include/uapi/asm/signal.h"
# 1 "../include/asm-generic/signal.h" 1




# 1 "../include/uapi/asm-generic/signal.h" 1
# 90 "../include/uapi/asm-generic/signal.h"
typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;


typedef unsigned long old_sigset_t;

# 1 "../include/uapi/asm-generic/signal-defs.h" 1
# 18 "../include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 98 "../include/uapi/asm-generic/signal.h" 2
# 114 "../include/uapi/asm-generic/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 6 "../include/asm-generic/signal.h" 2





# 1 "../arch/arm64/include/uapi/asm/sigcontext.h" 1
# 27 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct sigcontext {
 __u64 fault_address;

 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;

 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
# 64 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct _aarch64_ctx {
 __u32 magic;
 __u32 size;
};



struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;
 __uint128_t vregs[32];
};




struct esr_context {
 struct _aarch64_ctx head;
 __u64 esr;
};
# 114 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct extra_context {
 struct _aarch64_ctx head;
 __u64 datap;
 __u32 size;
 __u32 __reserved[3];
};
# 12 "../include/asm-generic/signal.h" 2
# 27 "../arch/arm64/include/uapi/asm/signal.h" 2
# 6 "../include/uapi/linux/signal.h" 2
# 1 "../arch/arm64/include/uapi/asm/siginfo.h" 1
# 22 "../arch/arm64/include/uapi/asm/siginfo.h"
# 1 "../include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 49 "../include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
  } _kill;


  struct {
   __kernel_timer_t _tid;
   int _overrun;
   char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
   sigval_t _sigval;
   int _sys_private;
  } _timer;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   sigval_t _sigval;
  } _rt;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   int _status;
   __kernel_clock_t _utime;
   __kernel_clock_t _stime;
  } _sigchld;


  struct {
   void *_addr;



   short _addr_lsb;
   union {

    struct {
     void *_lower;
     void *_upper;
    } _addr_bnd;

    __u32 _pkey;
   };
  } _sigfault;


  struct {
   long _band;
   int _fd;
  } _sigpoll;


  struct {
   void *_call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} siginfo_t;
# 281 "../include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 23 "../arch/arm64/include/uapi/asm/siginfo.h" 2
# 7 "../include/uapi/linux/signal.h" 2
# 11 "../include/linux/signal_types.h" 2





struct sigqueue {
 struct list_head list;
 int flags;
 siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 61 "../include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 siginfo_t info;
 int sig;
};
# 28 "../include/linux/sched.h" 2
# 1 "../include/linux/mm_types_task.h" 1
# 34 "../include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 MM_UNRECLAIMABLE,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 94 "../include/linux/mm_types_task.h"
};
# 29 "../include/linux/sched.h" 2
# 1 "../include/linux/task_io_accounting.h" 1
# 12 "../include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;

 u64 syscfs;







 u64 read_bytes;





 u64 write_bytes;
# 46 "../include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 30 "../include/linux/sched.h" 2



# 1 "../include/linux/oplus_healthinfo/oplus_jank_monitor.h" 1








enum {
    JANK_TRACE_RUNNABLE = 0,
    JANK_TRACE_DSTATE,
    JANK_TRACE_SSTATE,
    JANK_TRACE_RUNNING,
};

struct jank_d_state {
 u64 iowait_ns;
 u64 downread_ns;
 u64 downwrite_ns;
 u64 mutex_ns;
 u64 other_ns;
 int cnt;
};

struct jank_s_state{
 u64 binder_ns;
 u64 epoll_ns;
 u64 futex_ns;
 u64 other_ns;
 int cnt;
};

struct oplus_jank_monitor_info {
 u64 runnable_state;
 u64 ltt_running_state;
 u64 big_running_state;
 struct jank_d_state d_state;
 struct jank_s_state s_state;
};

extern const struct file_operations proc_jank_trace_operations;
# 34 "../include/linux/sched.h" 2




struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 213 "../include/linux/sched.h"
extern int sysctl_sched_assist_enabled;
extern int sysctl_sched_assist_scene;


extern int sysctl_cpu_multi_thread;


extern int sysctl_slide_boost_enabled;
extern int sysctl_input_boost_enabled;
extern int sched_assist_ib_duration_coedecay;
extern u64 sched_assist_input_boost_duration;
extern int sysctl_boost_task_threshold;





enum task_event {
 PUT_PREV_TASK = 0,
 PICK_NEXT_TASK = 1,
 TASK_WAKE = 2,
 TASK_MIGRATE = 3,
 TASK_UPDATE = 4,
 IRQ_UPDATE = 5,
};


enum migrate_types {
 GROUP_TO_RQ,
 RQ_TO_GROUP,
};

extern cpumask_var_t cpu_isolated_map;


extern int sched_isolate_count(const cpumask_t *mask, bool include_offline);
extern int sched_isolate_cpu(int cpu);
extern int sched_unisolate_cpu(int cpu);
extern int sched_unisolate_cpu_unlocked(int cpu);
# 282 "../include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);

extern int __attribute__((warn_unused_result)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
extern int set_task_boost(int boost, u64 period);
# 309 "../include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};
# 327 "../include/linux/sched.h"
struct task_cputime {
 u64 utime;
 u64 stime;
 unsigned long long sum_exec_runtime;
};






enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_USER,

 VTIME_SYS,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 u64 utime;
 u64 stime;
 u64 gtime;
};

struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 387 "../include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 414 "../include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;

};
# 472 "../include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long util_avg;
 struct util_est util_est;
};

struct sched_statistics {

 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;

};

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;
# 550 "../include/linux/sched.h"
 struct sched_avg avg __attribute__((__aligned__((1 << 7))));

};

struct sched_load {
 unsigned long prev_load;
 unsigned long new_task_load;
 unsigned long predicted_load;
};

struct cpu_cycle_counter_cb {
 u64 (*get_cpu_cycle_counter)(int cpu);
};



extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) sched_load_boost;


extern void sched_exit(struct task_struct *p);
extern int register_cpu_cycle_counter_cb(struct cpu_cycle_counter_cb *cb);
extern void sched_set_io_is_busy(int val);
extern int sched_set_group_id(struct task_struct *p, unsigned int group_id);
extern unsigned int sched_get_group_id(struct task_struct *p);
extern int sched_set_init_task_load(struct task_struct *p, int init_load_pct);
extern u32 sched_get_init_task_load(struct task_struct *p);
extern void sched_update_cpu_freq_min_max(const cpumask_t *cpus, u32 fmin,
       u32 fmax);
extern int sched_set_boost(int enable);
extern void free_task_load_ptrs(struct task_struct *p);





struct ravg {
# 619 "../include/linux/sched.h"
 u64 mark_start;
 u32 sum, demand;
 u32 coloc_demand;
 u32 sum_history[5];
 u32 *curr_window_cpu, *prev_window_cpu;
 u32 curr_window, prev_window;
 u16 active_windows;
 u32 pred_demand;
 u8 busy_buckets[10];
 u16 demand_scaled;
 u16 pred_demand_scaled;
};
# 650 "../include/linux/sched.h"
struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 712 "../include/linux/sched.h"
 int dl_throttled;
 int dl_boosted;
 int dl_yielded;
 int dl_non_contending;





 struct hrtimer dl_timer;
# 730 "../include/linux/sched.h"
 struct hrtimer inactive_timer;
};

union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_need_qs;


  u8 pad;
 } b;
 u32 s;
};






enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};


union reclaim_limit {
 unsigned long stop_jiffies;
 unsigned long stop_scan_addr;
};


struct task_struct {





 struct thread_info thread_info;


 volatile long state;







 void *stack;
 atomic_t usage;

 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;

 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
 u64 last_sleep_ts;

 int boost;
 u64 boost_period;
 u64 boost_expires;


 struct ravg ravg;




 u32 init_load_pct;
 u64 last_wake_ts;
 u64 last_enqueued_ts;
 struct related_thread_group *grp;
 struct list_head grp_list;
 u64 cpu_cycles;
 bool misfit;



 struct task_group *sched_task_group;

 struct sched_dl_entity dl;
# 849 "../include/linux/sched.h"
 unsigned int policy;
 int nr_cpus_allowed;
 cpumask_t cpus_allowed;
 cpumask_t cpus_requested;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;



 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;
 unsigned sched_remote_wakeup:1;

 unsigned sched_psi_wake_requeue:1;



 unsigned :0;




 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;

 unsigned memcg_kmem_skip_account:1;







 unsigned no_cgroup_migration:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 949 "../include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid_link pids[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;

 u64 utime;
 u64 stime;




 u64 gtime;

 u64 *time_in_state;
 unsigned int max_state;

 struct prev_cputime prev_cputime;
# 1003 "../include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 real_start_time;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct task_cputime cputime_expires;
 struct list_head cpu_timers[3];





 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;
# 1039 "../include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;







 unsigned long last_switch_count;
 unsigned long last_switch_time;
 bool hang_detection_enabled;


 struct fs_struct *fs;


 struct files_struct *files;


 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;

 struct audit_context *audit_context;




 struct seccomp seccomp;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 1149 "../include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 unsigned long ptrace_message;
 siginfo_t *last_siginfo;

 struct task_io_accounting ioac;


 unsigned int psi_flags;



 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;
# 1268 "../include/linux/sched.h"
 struct tlbflush_unmap_batch tlb_ubc;

 struct callback_head rcu;


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;
# 1289 "../include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1306 "../include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1335 "../include/linux/sched.h"
 unsigned long trace;


 unsigned long trace_recursion;
# 1364 "../include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;



 union reclaim_limit reclaim;


 struct uprobe_task *utask;
# 1385 "../include/linux/sched.h"
 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 atomic_t stack_refcount;






 void *security;


 int ux_state;
 atomic64_t inherit_ux;
 struct list_head ux_entry;
 int ux_depth;
 u64 enqueue_time;
 u64 inherit_ux_start;



 int ux_once;
 u64 get_mmlock_ts;
 int get_mmlock;



 int jank_trace;
 struct oplus_jank_monitor_info oplus_jank_info;
 unsigned in_mutex:1;
 unsigned in_downread:1;
 unsigned in_downwrite:1;
 unsigned in_futex:1;
 unsigned in_binder:1;
 unsigned in_epoll:1;
# 1437 "../include/linux/sched.h"
 struct thread_struct thread;







};


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid *task_pid(struct task_struct *task)
{
 return task->pids[PIDTYPE_PID].pid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid *task_tgid(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PID].pid;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PGID].pid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pid *task_session(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_SID].pid;
}
# 1484 "../include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1517 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p)
{
 return p->pids[PIDTYPE_PID].pid != ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, __PIDTYPE_TGID, ns);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, __PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ union { typeof((tsk->real_parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); else __read_once_size_nocheck(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __get_task_state(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ union { typeof(tsk->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->state), __u.__c, sizeof(tsk->state)); else __read_once_size_nocheck(&(tsk->state), __u.__c, sizeof(tsk->state)); do { } while (0); __u.__val; });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { bool __cond = !(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0))); extern void __compiletime_assert_53(void) ; if (__cond) __compiletime_assert_53(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char __task_state_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { bool __cond = !(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 63) ? 63 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 62) ? 62 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 61) ? 61 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 60) ? 60 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 59) ? 59 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 58) ? 58 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 57) ? 57 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 56) ? 56 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 55) ? 55 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 54) ? 54 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 53) ? 53 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 52) ? 52 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 51) ? 51 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 50) ? 50 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 49) ? 49 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 48) ? 48 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 47) ? 47 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 46) ? 46 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 45) ? 45 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 44) ? 44 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 43) ? 43 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 42) ? 42 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 41) ? 41 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 40) ? 40 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 39) ? 39 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 38) ? 38 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 37) ? 37 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 36) ? 36 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 35) ? 35 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 34) ? 34 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 33) ? 33 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 32) ? 32 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 31) ? 31 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 30) ? 30 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 29) ? 29 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 28) ? 28 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 27) ? 27 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 26) ? 26 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 25) ? 25 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 24) ? 24 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 23) ? 23 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 22) ? 22 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 21) ? 21 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 20) ? 20 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 19) ? 19 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 18) ? 18 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 17) ? 17 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 16) ? 16 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 15) ? 15 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 14) ? 14 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 13) ? 13 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 12) ? 12 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 11) ? 11 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 10) ? 10 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 9) ? 9 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 8) ? 8 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 7) ? 7 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 6) ? 6 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 5) ? 5 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 4) ? 4 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 3) ? 3 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1)); extern void __compiletime_assert_54(void) ; if (__cond) __compiletime_assert_54(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 return state_char[state];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char task_state_to_char(struct task_struct *tsk)
{
 return __task_state_to_char(__get_task_state(tsk));
}
# 1615 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1688 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1720 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_lmk_waiting(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void task_set_lmk_waiting(struct task_struct *p) { set_bit(7, &p->atomic_flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
extern bool cpupri_check_rt(void);
# 1781 "../include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {



 unsigned long stack[((1UL) << (14 + 0))/sizeof(long)];
};


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1847 "../include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);





extern void sched_assist_target_comm(struct task_struct *task);






extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);

 sched_assist_target_comm(tsk);





}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 1902 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,1)), 0);
}
# 1958 "../include/linux/sched.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int _cond_resched(void) { return 0; }







extern int __cond_resched_lock(spinlock_t *lock);






extern int __cond_resched_softirq(void);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cond_resched_rcu(void)
{





}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 1)), 0);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int task_cpu(const struct task_struct *p)
{

 return p->cpu;



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 2049 "../include/linux/sched.h"
extern long msm_sched_setaffinity(pid_t pid, struct cpumask *new_mask);
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 sched_get_wake_up_idle(struct task_struct *p)
{
 u32 enabled = p->flags & 0x10000000;

 return !!enabled;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int sched_set_wake_up_idle(struct task_struct *p,
      int wake_up_idle)
{
 int enable = !!wake_up_idle;

 if (enable)
  p->flags |= 0x10000000;
 else
  p->flags &= ~0x10000000;

 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_wake_up_idle(bool enabled)
{
 if (enabled)
  get_current()->flags |= 0x10000000;
 else
  get_current()->flags &= ~0x10000000;
}
# 26 "../arch/arm64/include/asm/compat.h" 2
# 1 "../include/linux/sched/task_stack.h" 1
# 10 "../include/linux/sched/task_stack.h"
# 1 "../include/uapi/linux/magic.h" 1
# 11 "../include/linux/sched/task_stack.h" 2








static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long *end_of_stack(const struct task_struct *task)
{
 return task->stack;
}
# 62 "../include/linux/sched/task_stack.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *try_get_task_stack(struct task_struct *tsk)
{
 return atomic_add_unless((&tsk->stack_refcount), 1, 0) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 81 "../include/linux/sched/task_stack.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int object_is_on_stack(void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + ((1UL) << (14 + 0))));
}

extern void thread_stack_cache_init(void);
# 110 "../include/linux/sched/task_stack.h"
extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & (((1UL) << (14 + 0))-sizeof(void*)));
}
# 27 "../arch/arm64/include/asm/compat.h" 2








typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_time_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u16 __compat_uid16_t;
typedef u16 __compat_gid16_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_ino_t;
typedef u32 compat_dev_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef s32 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef s32 compat_daddr_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s32 compat_key_t;
typedef s32 compat_timer_t;

typedef s16 compat_short_t;
typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef s64 compat_s64;
typedef u16 compat_ushort_t;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u64 compat_u64;
typedef u32 compat_uptr_t;

struct compat_timespec {
 compat_time_t tv_sec;
 s32 tv_nsec;
};

struct compat_timeval {
 compat_time_t tv_sec;
 s32 tv_usec;
};

struct compat_stat {




 compat_dev_t st_dev;

 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_ushort_t st_nlink;
 __compat_uid16_t st_uid;
 __compat_gid16_t st_gid;




 compat_dev_t st_rdev;

 compat_off_t st_size;
 compat_off_t st_blksize;
 compat_off_t st_blocks;
 compat_time_t st_atime;
 compat_ulong_t st_atime_nsec;
 compat_time_t st_mtime;
 compat_ulong_t st_mtime_nsec;
 compat_time_t st_ctime;
 compat_ulong_t st_ctime_nsec;
 compat_ulong_t __unused4[2];
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};





struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
};

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};



typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;

typedef struct compat_siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[128/sizeof(int) - 3];


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
  } _kill;


  struct {
   compat_timer_t _tid;
   int _overrun;
   compat_sigval_t _sigval;
   int _sys_private;
  } _timer;


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
   compat_sigval_t _sigval;
  } _rt;


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
   int _status;
   compat_clock_t _utime;
   compat_clock_t _stime;
  } _sigchld;


  struct {
   compat_uptr_t _addr;
   short _addr_lsb;
  } _sigfault;


  struct {
   compat_long_t _band;
   int _fd;
  } _sigpoll;


  struct {
   compat_uptr_t _call_addr;
   int _syscall;
   compat_uint_t _arch;
  } _sigsys;
 } _sifields;
} compat_siginfo_t;
# 226 "../arch/arm64/include/asm/compat.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *arch_compat_alloc_user_space(long len)
{
 return (void *)(user_stack_pointer(((struct pt_regs *)(((1UL) << (14 + 0)) + task_stack_page(get_current())) - 1))) - len;
}

struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_time_t sem_otime;
 compat_ulong_t __unused1;
 compat_time_t sem_ctime;
 compat_ulong_t __unused2;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_time_t msg_stime;
 compat_ulong_t __unused1;
 compat_time_t msg_rtime;
 compat_ulong_t __unused2;
 compat_time_t msg_ctime;
 compat_ulong_t __unused3;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_time_t shm_atime;
 compat_ulong_t __unused1;
 compat_time_t shm_dtime;
 compat_ulong_t __unused2;
 compat_time_t shm_ctime;
 compat_ulong_t __unused3;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_compat_task(void)
{
 return test_ti_thread_flag(((struct thread_info *)get_current()), 22);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_compat_thread(struct thread_info *thread)
{
 return test_ti_thread_flag(thread, 22);
}
# 24 "../arch/arm64/include/asm/stat.h" 2





struct stat64 {
 compat_u64 st_dev;
 unsigned char __pad0[4];


 compat_ulong_t __st_ino;
 compat_uint_t st_mode;
 compat_uint_t st_nlink;

 compat_ulong_t st_uid;
 compat_ulong_t st_gid;

 compat_u64 st_rdev;
 unsigned char __pad3[4];

 compat_s64 st_size;
 compat_ulong_t st_blksize;
 compat_u64 st_blocks;

 compat_ulong_t st_atime;
 compat_ulong_t st_atime_nsec;

 compat_ulong_t st_mtime;
 compat_ulong_t st_mtime_nsec;

 compat_ulong_t st_ctime;
 compat_ulong_t st_ctime_nsec;

 compat_u64 st_ino;
};
# 7 "../include/linux/stat.h" 2
# 1 "../include/uapi/linux/stat.h" 1
# 56 "../include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "../include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 8 "../include/linux/stat.h" 2
# 24 "../include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 39 "../include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec atime;
 struct timespec mtime;
 struct timespec ctime;
 struct timespec btime;
 u64 blocks;
};
# 11 "../include/linux/fs.h" 2


# 1 "../include/linux/list_lru.h" 1
# 13 "../include/linux/list_lru.h"
# 1 "../include/linux/shrinker.h" 1
# 12 "../include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 int nid;


 struct mem_cgroup *memcg;
};
# 57 "../include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 int seeks;
 long batch;
 unsigned long flags;


 struct list_head list;

 atomic_long_t *nr_deferred;
};






extern int register_shrinker(struct shrinker *);
extern void unregister_shrinker(struct shrinker *);
# 14 "../include/linux/list_lru.h" 2

struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {

 struct list_lru_one *lru[0];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << 7))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key);





int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, int dst_idx);
# 86 "../include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 99 "../include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 111 "../include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 161 "../include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "../include/linux/fs.h" 2

# 1 "../include/linux/radix-tree.h" 1
# 61 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    1UL;
}
# 93 "../include/linux/radix-tree.h"
struct radix_tree_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char exceptional;
 struct radix_tree_node *parent;
 struct radix_tree_root *root;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 unsigned long tags[3][(((1UL << (0 ? 4 : 6)) + 64 - 1) / 64)];
};





struct radix_tree_root {
 gfp_t gfp_mask;
 struct radix_tree_node *rnode;
};
# 131 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool radix_tree_empty(const struct radix_tree_root *root)
{
 return root->rnode == ((void *)0);
}
# 152 "../include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct radix_tree_node *node;



};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int iter_shift(const struct radix_tree_iter *iter)
{



 return 0;

}
# 236 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ union { typeof((*slot)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*slot)), __u.__c, sizeof((*slot))); else __read_once_size_nocheck(&((*slot)), __u.__c, sizeof((*slot))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 250 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 263 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int radix_tree_exceptional_entry(void *arg)
{

 return (unsigned long)arg & 2;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int __radix_tree_create(struct radix_tree_root *, unsigned long index,
   unsigned order, struct radix_tree_node **nodep,
   void ***slotp);
int __radix_tree_insert(struct radix_tree_root *, unsigned long index,
   unsigned order, void *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int radix_tree_insert(struct radix_tree_root *root,
   unsigned long index, void *entry)
{
 return __radix_tree_insert(root, index, 0, entry);
}
void *__radix_tree_lookup(const struct radix_tree_root *, unsigned long index,
     struct radix_tree_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct radix_tree_root *, unsigned long);
void **radix_tree_lookup_slot(const struct radix_tree_root *,
     unsigned long index);
typedef void (*radix_tree_update_node_t)(struct radix_tree_node *, void *);
void __radix_tree_replace(struct radix_tree_root *, struct radix_tree_node *,
     void **slot, void *entry,
     radix_tree_update_node_t update_node, void *private);
void radix_tree_iter_replace(struct radix_tree_root *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct radix_tree_root *,
        void **slot, void *entry);
void __radix_tree_delete_node(struct radix_tree_root *,
         struct radix_tree_node *,
         radix_tree_update_node_t update_node,
         void *private);
void radix_tree_iter_delete(struct radix_tree_root *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct radix_tree_root *, unsigned long, void *);
void *radix_tree_delete(struct radix_tree_root *, unsigned long);
void radix_tree_clear_tags(struct radix_tree_root *, struct radix_tree_node *,
      void **slot);
unsigned int radix_tree_gang_lookup(const struct radix_tree_root *,
   void **results, unsigned long first_index,
   unsigned int max_items);
unsigned int radix_tree_gang_lookup_slot(const struct radix_tree_root *,
   void ***results, unsigned long *indices,
   unsigned long first_index, unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload_order(gfp_t gfp_mask, int order);
void radix_tree_init(void);
void *radix_tree_tag_set(struct radix_tree_root *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct radix_tree_root *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct radix_tree_root *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_set(struct radix_tree_root *,
  const struct radix_tree_iter *iter, unsigned int tag);
void radix_tree_iter_tag_clear(struct radix_tree_root *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct radix_tree_root *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct radix_tree_root *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct radix_tree_root *, unsigned int tag);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void radix_tree_preload_end(void)
{
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

int radix_tree_split_preload(unsigned old_order, unsigned new_order, gfp_t);
int radix_tree_split(struct radix_tree_root *, unsigned long index,
   unsigned new_order);
int radix_tree_join(struct radix_tree_root *, unsigned long index,
   unsigned new_order, void *);

void **idr_get_free_cmn(struct radix_tree_root *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void **idr_get_free(struct radix_tree_root *root,
     struct radix_tree_iter *iter,
     gfp_t gfp,
     int end)
{
 return idr_get_free_cmn(root, iter, gfp, end > 0 ? end - 1 : ((int)(~0U>>1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void **idr_get_free_ext(struct radix_tree_root *root,
         struct radix_tree_iter *iter,
         gfp_t gfp,
         unsigned long end)
{
 return idr_get_free_cmn(root, iter, gfp, end - 1);
}

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 393 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 404 "../include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 422 "../include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct radix_tree_root *,
        struct radix_tree_iter *iter, unsigned flags);
# 435 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void **
radix_tree_iter_lookup(const struct radix_tree_root *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 453 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void **
radix_tree_iter_find(const struct radix_tree_root *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, 0);
}
# 470 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + (slots << iter_shift(iter));
}
# 494 "../include/linux/radix-tree.h"
void **__attribute__((warn_unused_result)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return (iter->next_index - iter->index) >> iter_shift(iter);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void **__radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 return slot;
}
# 540 "../include/linux/radix-tree.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 if (__builtin_expect(!!(radix_tree_is_internal_node(({ typeof(*slot) ________p1 = ({ union { typeof(*slot) __val; char __c[1]; } __u; if (1) __read_once_size(&(*slot), __u.__c, sizeof(*slot)); else __read_once_size_nocheck(&(*slot), __u.__c, sizeof(*slot)); do { } while (0); __u.__val; }); ((typeof(**slot) *)(________p1)); }))), 0))
  return __radix_tree_next_slot(slot, iter, flags);
 return slot;
}
# 16 "../include/linux/fs.h" 2





# 1 "../include/linux/rwsem.h" 1
# 23 "../include/linux/rwsem.h"
struct rw_semaphore;



extern void uxchain_rwsem_wake(struct task_struct *tsk,
 struct rw_semaphore *sem);
extern void uxchain_rwsem_down(struct rw_semaphore *sem);
extern void uxchain_rwsem_up(struct rw_semaphore *sem);
# 39 "../include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;
 struct list_head wait_list;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;




 struct task_struct *owner;






 long m_count;


 struct task_struct *ux_dep_task;

};







extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_read_failed_killable(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed_killable(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);


# 1 "../include/linux/sched_assist/sched_assist_rwsem.h" 1
# 12 "../include/linux/sched_assist/sched_assist_rwsem.h"
extern bool rwsem_list_add(struct task_struct *tsk, struct list_head *entry, struct list_head *head, struct rw_semaphore *sem);





extern void rwsem_set_inherit_ux(struct task_struct *tsk, struct task_struct *waiter_task, struct task_struct *owner, struct rw_semaphore *sem);
extern void rwsem_unset_inherit_ux(struct rw_semaphore *sem, struct task_struct *tsk);
# 78 "../include/linux/rwsem.h" 2



# 1 "./arch/arm64/include/generated/asm/rwsem.h" 1
# 1 "../include/asm-generic/rwsem.h" 1
# 32 "../include/asm-generic/rwsem.h"
# 1 "../include/linux/rwsem.h" 1
# 33 "../include/asm-generic/rwsem.h" 2





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __down_read(struct rw_semaphore *sem)
{
 if (__builtin_expect(!!(atomic_long_inc_return_acquire(&sem->count) <= 0), 0))
  rwsem_down_read_failed(sem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __down_read_trylock(struct rw_semaphore *sem)
{
 long tmp;

 while ((tmp = atomic_long_read(&sem->count)) >= 0) {
  if (tmp == (({ __typeof__(*(&(((atomic64_t *)(&sem->count))->counter))) __ret; __ret = (__typeof__(*(&(((atomic64_t *)(&sem->count))->counter)))) __cmpxchg_acq((&(((atomic64_t *)(&sem->count))->counter)), (unsigned long)(((tmp))), (unsigned long)(((tmp + 0x00000001L))), sizeof(*(&(((atomic64_t *)(&sem->count))->counter)))); __ret; }))) {


   uxchain_rwsem_down(sem);

   return 1;
  }
 }
 return 0;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __down_write(struct rw_semaphore *sem)
{
 long tmp;

 tmp = atomic_long_add_return_acquire(((-0xffffffffL -1) + 0x00000001L),
          &sem->count);
 if (__builtin_expect(!!(tmp != ((-0xffffffffL -1) + 0x00000001L)), 0))
  rwsem_down_write_failed(sem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __down_write_killable(struct rw_semaphore *sem)
{
 long tmp;

 tmp = atomic_long_add_return_acquire(((-0xffffffffL -1) + 0x00000001L),
          &sem->count);
 if (__builtin_expect(!!(tmp != ((-0xffffffffL -1) + 0x00000001L)), 0))
  if (IS_ERR(rwsem_down_write_failed_killable(sem)))
   return -4;
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __down_write_trylock(struct rw_semaphore *sem)
{
 long tmp;

 tmp = (({ __typeof__(*(&(((atomic64_t *)(&sem->count))->counter))) __ret; __ret = (__typeof__(*(&(((atomic64_t *)(&sem->count))->counter)))) __cmpxchg_acq((&(((atomic64_t *)(&sem->count))->counter)), (unsigned long)(((0x00000000L))), (unsigned long)(((((-0xffffffffL -1) + 0x00000001L)))), sizeof(*(&(((atomic64_t *)(&sem->count))->counter)))); __ret; }));


 if(tmp == 0x00000000L)
                        uxchain_rwsem_down(sem);

 return tmp == 0x00000000L;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __up_read(struct rw_semaphore *sem)
{
 long tmp;

 tmp = atomic_long_dec_return_release(&sem->count);
 if (__builtin_expect(!!(tmp < -1 && (tmp & 0xffffffffL) == 0), 0)) {

 uxchain_rwsem_up(sem);

  rwsem_wake(sem);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __up_write(struct rw_semaphore *sem)
{
 if (__builtin_expect(!!(atomic_long_sub_return_release(((-0xffffffffL -1) + 0x00000001L), &sem->count) < 0), 0)) {


 uxchain_rwsem_up(sem);

  rwsem_wake(sem);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __downgrade_write(struct rw_semaphore *sem)
{
 long tmp;
# 142 "../include/asm-generic/rwsem.h"
 tmp = atomic_long_add_return_release(-(-0xffffffffL -1), &sem->count);
 if (tmp < 0)
  rwsem_downgrade_wake(sem);
}
# 2 "./arch/arm64/include/generated/asm/rwsem.h" 2
# 82 "../include/linux/rwsem.h" 2


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 127 "../include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 143 "../include/linux/rwsem.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((warn_unused_result)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 22 "../include/linux/fs.h" 2
# 1 "../include/linux/mm_types.h" 1






# 1 "../include/linux/auxvec.h" 1




# 1 "../include/uapi/linux/auxvec.h" 1




# 1 "../arch/arm64/include/uapi/asm/auxvec.h" 1
# 6 "../include/uapi/linux/auxvec.h" 2
# 6 "../include/linux/auxvec.h" 2
# 8 "../include/linux/mm_types.h" 2




# 1 "../include/linux/completion.h" 1
# 29 "../include/linux/completion.h"
struct completion {
 unsigned int done;
 wait_queue_head_t wait;



};
# 63 "../include/linux/completion.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void complete_acquire(struct completion *x) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void complete_release(struct completion *x) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void complete_release_commit(struct completion *x) {}
# 117 "../include/linux/completion.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 130 "../include/linux/completion.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "../include/linux/mm_types.h" 2

# 1 "../include/linux/uprobes.h" 1
# 32 "../include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};


# 1 "../arch/arm64/include/asm/uprobes.h" 1
# 12 "../arch/arm64/include/asm/uprobes.h"
# 1 "../arch/arm64/include/asm/debug-monitors.h" 1
# 24 "../arch/arm64/include/asm/debug-monitors.h"
# 1 "../arch/arm64/include/asm/esr.h" 1
# 302 "../arch/arm64/include/asm/esr.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 303 "../arch/arm64/include/asm/esr.h" 2

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool esr_is_data_abort(u32 esr)
{
 const u32 ec = (((esr) & ((0x3FUL) << (26))) >> (26));

 return ec == (0x24) || ec == (0x25);
}

const char *esr_get_class_string(u32 esr);
# 25 "../arch/arm64/include/asm/debug-monitors.h" 2
# 86 "../arch/arm64/include/asm/debug-monitors.h"
struct task_struct;






struct step_hook {
 struct list_head node;
 int (*fn)(struct pt_regs *regs, unsigned int esr);
};

void register_step_hook(struct step_hook *hook);
void unregister_step_hook(struct step_hook *hook);

struct break_hook {
 struct list_head node;
 u32 esr_val;
 u32 esr_mask;
 int (*fn)(struct pt_regs *regs, unsigned int esr);
};

void register_break_hook(struct break_hook *hook);
void unregister_break_hook(struct break_hook *hook);

u8 debug_monitors_arch(void);

enum dbg_active_el {
 DBG_ACTIVE_EL0 = 0,
 DBG_ACTIVE_EL1,
};

void enable_debug_monitors(enum dbg_active_el el);
void disable_debug_monitors(enum dbg_active_el el);

void user_rewind_single_step(struct task_struct *task);
void user_fastforward_single_step(struct task_struct *task);

void kernel_enable_single_step(struct pt_regs *regs);
void kernel_disable_single_step(void);
int kernel_active_single_step(void);


int reinstall_suspended_bps(struct pt_regs *regs);







int aarch32_break_handler(struct pt_regs *regs);
# 13 "../arch/arm64/include/asm/uprobes.h" 2

# 1 "../arch/arm64/include/asm/probes.h" 1
# 18 "../arch/arm64/include/asm/probes.h"
typedef u32 probe_opcode_t;
typedef void (probes_handler_t) (u32 opcode, long addr, struct pt_regs *);


struct arch_probe_insn {
 probe_opcode_t *insn;
 pstate_check_t *pstate_cc;
 probes_handler_t *handler;

 unsigned long restore;
};
# 15 "../arch/arm64/include/asm/uprobes.h" 2







typedef u32 uprobe_opcode_t;

struct arch_uprobe_task {
};

struct arch_uprobe {
 union {
  u8 insn[4];
  u8 ixol[4];
 };
 struct arch_probe_insn api;
 bool simulate;
};
# 63 "../include/linux/uprobes.h" 2

enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
 enum uprobe_task_state state;

 union {
  struct {
   struct arch_uprobe_task autask;
   unsigned long vaddr;
  };

  struct {
   struct callback_head dup_xol_work;
   unsigned long dup_xol_addr;
  };
 };

 struct uprobe *active_uprobe;
 unsigned long xol_vaddr;

 struct return_instance *return_instances;
 unsigned int depth;
};

struct return_instance {
 struct uprobe *uprobe;
 unsigned long func;
 unsigned long stack;
 unsigned long orig_ret_vaddr;
 bool chained;

 struct return_instance *next;
};

enum rp_check {
 RP_CHECK_CALL,
 RP_CHECK_CHAIN_CALL,
 RP_CHECK_RET,
};

struct xol_area;

struct uprobes_state {
 struct xol_area *xol_area;
};

extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool is_swbp_insn(uprobe_opcode_t *insn);
extern bool is_trap_insn(uprobe_opcode_t *insn);
extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
extern int uprobe_write_opcode(struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
      void *src, unsigned long len);
# 15 "../include/linux/mm_types.h" 2
# 1 "../include/linux/page-flags-layout.h" 1
# 28 "../include/linux/page-flags-layout.h"
# 1 "../arch/arm64/include/asm/sparsemem.h" 1
# 29 "../include/linux/page-flags-layout.h" 2
# 16 "../include/linux/mm_types.h" 2


# 1 "../arch/arm64/include/asm/mmu.h" 1
# 25 "../arch/arm64/include/asm/mmu.h"
typedef struct {
 atomic64_t id;
 void *vdso;
 unsigned long flags;
} mm_context_t;
# 38 "../arch/arm64/include/asm/mmu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arm64_kernel_unmapped_at_el0(void)
{
 return 1 &&
        cpus_have_const_cap(23);
}

typedef void (*bp_hardening_cb_t)(void);

struct bp_hardening_data {
 int hyp_vectors_slot;
 bp_hardening_cb_t fn;
};


extern char __bp_harden_hyp_vecs_start[], __bp_harden_hyp_vecs_end[];

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct bp_hardening_data) bp_hardening_data;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct bp_hardening_data *arm64_get_bp_hardening_data(void)
{
 return ({ do { const void *__vpp_verify = (typeof((&bp_hardening_data) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data))); (typeof((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data))) (__ptr + ((__my_cpu_offset()))); }); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arm64_apply_bp_hardening(void)
{
 struct bp_hardening_data *d;

 if (!cpus_have_const_cap(24))
  return;

 d = arm64_get_bp_hardening_data();
 if (d->fn)
  d->fn();
}
# 81 "../arch/arm64/include/asm/mmu.h"
extern void paging_init(void);
extern void bootmem_init(void);
extern void *early_io_map(phys_addr_t phys, unsigned long virt);
extern void init_mem_pgprot(void);
extern void create_pgd_mapping(struct mm_struct *mm, phys_addr_t phys,
          unsigned long virt, phys_addr_t size,
          pgprot_t prot, bool page_mappings_only);
extern void *fixmap_remap_fdt(phys_addr_t dt_phys);
extern void mark_linear_text_alias_ro(void);
# 19 "../include/linux/mm_types.h" 2






struct address_space;
struct mem_cgroup;
struct hmm;
# 42 "../include/linux/mm_types.h"
struct page {

 unsigned long flags;

 union {
  struct address_space *mapping;






  void *s_mem;
  atomic_t compound_mapcount;

 };


 union {
  unsigned long index;
  void *freelist;

 };

 union {



  unsigned long counters;
# 79 "../include/linux/mm_types.h"
  struct {

   union {
# 91 "../include/linux/mm_types.h"
    atomic_t _mapcount;

    unsigned int active;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
    int units;
   };




   atomic_t _refcount;
  };
 };
# 116 "../include/linux/mm_types.h"
 union {
  struct list_head lru;




  struct dev_pagemap *pgmap;




  struct {
   struct page *next;

   int pages;
   int pobjects;




  };

  struct callback_head callback_head;



  struct {
   unsigned long compound_head;
# 153 "../include/linux/mm_types.h"
   unsigned int compound_dtor;
   unsigned int compound_order;




  };
# 170 "../include/linux/mm_types.h"
 };


 union {
  unsigned long private;
# 185 "../include/linux/mm_types.h"
  spinlock_t ptl;


  struct kmem_cache *slab_cache;
 };


 struct mem_cgroup *mem_cgroup;
# 213 "../include/linux/mm_types.h"
}





 __attribute__((aligned(2 * sizeof(unsigned long))))

;




struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 274 "../include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 283 "../include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;
# 317 "../include/linux/mm_types.h"
 union {
  struct {
   struct rb_node rb;
   unsigned long rb_subtree_last;
  } shared;
  const char *anon_name;
 };







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;

 atomic_long_t swap_readahead_info;






 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;

 seqcount_t vm_sequence;
 atomic_t vm_ref_count;

} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct vm_area_struct *mmap;
 struct rb_root mm_rb;

 rwlock_t mm_rb_lock;

 u64 vmacache_seqnum;

 unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

 unsigned long mmap_base;
 unsigned long mmap_legacy_base;





 unsigned long task_size;
 unsigned long highest_vm_end;
 pgd_t * pgd;
# 402 "../include/linux/mm_types.h"
 atomic_t mm_users;
# 411 "../include/linux/mm_types.h"
 atomic_t mm_count;

 atomic_long_t nr_ptes;

 atomic_long_t nr_pmds;

 int map_count;

 spinlock_t page_table_lock;
 struct rw_semaphore mmap_sem;

 struct list_head mmlist;





 unsigned long hiwater_rss;
 unsigned long hiwater_vm;

 unsigned long total_vm;
 unsigned long locked_vm;
 unsigned long pinned_vm;
 unsigned long data_vm;
 unsigned long exec_vm;
 unsigned long stack_vm;
 unsigned long def_flags;

 spinlock_t arg_lock;
 unsigned long start_code, end_code, start_data, end_data;
 unsigned long start_brk, brk, start_stack;
 unsigned long arg_start, arg_end, env_start, env_end;

 unsigned long saved_auxv[(2*(1 + 20 + 1))];





 struct mm_rss_stat rss_stat;

 struct linux_binfmt *binfmt;

 cpumask_var_t cpu_vm_mask_var;


 mm_context_t context;

 unsigned long flags;

 struct core_state *core_state;

 atomic_t membarrier_state;


 spinlock_t ioctx_lock;
 struct kioctx_table *ioctx_table;
# 480 "../include/linux/mm_types.h"
 struct task_struct *owner;

 struct user_namespace *user_ns;


 struct file *exe_file;
# 514 "../include/linux/mm_types.h"
 atomic_t tlb_flush_pending;




 struct uprobes_state uprobes_state;



 struct work_struct async_put_work;






  unsigned long va_feature_rnd;
  unsigned int zygoteheap_in_MB;
  int va_feature;

} ;

extern struct mm_struct init_mm;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_init_cpumask(struct mm_struct *mm)
{



 cpumask_clear(mm->cpu_vm_mask_var);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return mm->cpu_vm_mask_var;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
    unsigned long start, unsigned long end);
extern void tlb_finish_mmu(struct mmu_gather *tlb,
    unsigned long start, unsigned long end);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 ({ union { typeof(((&mm->tlb_flush_pending)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&mm->tlb_flush_pending)->counter))) ((0)) }; __write_once_size(&(((&mm->tlb_flush_pending)->counter)), __u.__c, sizeof(((&mm->tlb_flush_pending)->counter))); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_add(1, (&mm->tlb_flush_pending));
# 602 "../include/linux/mm_types.h"
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 614 "../include/linux/mm_types.h"
 atomic_sub(1, (&mm->tlb_flush_pending));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 627 "../include/linux/mm_types.h"
 return ({ union { typeof((&mm->tlb_flush_pending)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); else __read_once_size_nocheck(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return ({ union { typeof((&mm->tlb_flush_pending)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); else __read_once_size_nocheck(&((&mm->tlb_flush_pending)->counter), __u.__c, sizeof((&mm->tlb_flush_pending)->counter)); do { } while (0); __u.__val; }) > 1;
}

struct vm_fault;

struct vm_special_mapping {
 const char *name;







 struct page **pages;





 int (*fault)(const struct vm_special_mapping *sm,
       struct vm_area_struct *vma,
       struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *vma_get_anon_name(struct vm_area_struct *vma)
{
 if (vma->vm_file)
  return ((void *)0);

 return vma->anon_name;
}
# 23 "../include/linux/fs.h" 2
# 1 "../include/linux/capability.h" 1
# 16 "../include/linux/capability.h"
# 1 "../include/uapi/linux/capability.h" 1
# 39 "../include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "../include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "../include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 117 "../include/linux/capability.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 165 "../include/linux/capability.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
# 244 "../include/linux/capability.h"
extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);


extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);

extern int cap_convert_nscap(struct dentry *dentry, void **ivalue, size_t size);
# 24 "../include/linux/fs.h" 2
# 1 "../include/linux/semaphore.h" 1
# 16 "../include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 32 "../include/linux/semaphore.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { 0 , 0 }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_interruptible(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_killable(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_trylock(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 25 "../include/linux/fs.h" 2

# 1 "../include/uapi/linux/fiemap.h" 1
# 17 "../include/uapi/linux/fiemap.h"
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 27 "../include/linux/fs.h" 2



# 1 "../include/linux/migrate_mode.h" 1
# 15 "../include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 31 "../include/linux/fs.h" 2


# 1 "../include/linux/percpu-rwsem.h" 1







# 1 "../include/linux/rcuwait.h" 1
# 20 "../include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}

extern void rcuwait_wake_up(struct rcuwait *w);
# 9 "../include/linux/percpu-rwsem.h" 2
# 1 "../include/linux/rcu_sync.h" 1
# 29 "../include/linux/rcu_sync.h"
enum rcu_sync_type { RCU_SYNC, RCU_SCHED_SYNC, RCU_BH_SYNC };


struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 int cb_state;
 struct callback_head cb_head;

 enum rcu_sync_type gp_type;
};

extern void rcu_sync_lockdep_assert(struct rcu_sync *);
# 53 "../include/linux/rcu_sync.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{



 return !rsp->gp_state;
}

extern void rcu_sync_init(struct rcu_sync *, enum rcu_sync_type);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "../include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rw_semaphore rw_sem;
 struct rcuwait writer;
 int readers_block;
};
# 29 "../include/linux/percpu-rwsem.h"
extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
extern void __percpu_up_read(struct percpu_rw_semaphore *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_down_read_preempt_disable(struct percpu_rw_semaphore *sem)
{
 do { do { } while (0); } while (0);

 do { } while (0);

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
# 47 "../include/linux/percpu-rwsem.h"
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  __percpu_down_read(sem, false);
 __asm__ __volatile__("": : :"memory");




}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 percpu_down_read_preempt_disable(sem);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 int ret = 1;

 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_up_read_preempt_enable(struct percpu_rw_semaphore *sem)
{




 __asm__ __volatile__("": : :"memory");



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 else
  __percpu_up_read(sem);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);

 do { } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 percpu_up_read_preempt_enable(sem);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 130 "../include/linux/percpu-rwsem.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  sem->rw_sem.owner = ((struct task_struct *)-1L);

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  sem->rw_sem.owner = get_current();

}
# 34 "../include/linux/fs.h" 2

# 1 "../include/linux/delayed_call.h" 1
# 10 "../include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "../include/linux/fs.h" 2
# 1 "../include/linux/uuid.h" 1
# 19 "../include/linux/uuid.h"
# 1 "../include/uapi/linux/uuid.h" 1
# 24 "../include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 36 "../include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 20 "../include/linux/uuid.h" 2



typedef struct {
 __u8 b[16];
} uuid_t;
# 40 "../include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((warn_unused_result)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "../include/linux/fs.h" 2
# 1 "../include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "../include/linux/fs.h" 2


# 1 "../include/uapi/linux/fs.h" 1
# 13 "../include/uapi/linux/fs.h"
# 1 "../include/uapi/linux/limits.h" 1
# 14 "../include/uapi/linux/fs.h" 2
# 49 "../include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};
# 161 "../include/uapi/linux/fs.h"
struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 324 "../include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 41 "../include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;

extern void __attribute__ ((__section__(".init.text"))) inode_init(void);
extern void __attribute__ ((__section__(".init.text"))) inode_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) files_init(void);
extern void __attribute__ ((__section__(".init.text"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;
typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 208 "../include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec ia_atime;
 struct timespec ia_mtime;
 struct timespec ia_ctime;






 struct file *ia_file;
};




# 1 "../include/linux/quota.h" 1
# 40 "../include/linux/quota.h"
# 1 "../include/linux/percpu_counter.h" 1
# 16 "../include/linux/percpu_counter.h"
# 1 "../include/linux/gfp.h" 1





# 1 "../include/linux/mmzone.h" 1
# 18 "../include/linux/mmzone.h"
# 1 "../include/linux/pageblock-flags.h" 1
# 29 "../include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 66 "../include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);
# 19 "../include/linux/mmzone.h" 2




# 1 "../include/linux/multi_kswapd.h" 1
# 12 "../include/linux/multi_kswapd.h"
extern int kswapd_threads;
extern int max_kswapd_threads;

extern int kswapd_threads_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern void update_kswapd_threads(void);
extern int kswapd_cpu_online_ext(unsigned int cpu);
extern int cpu_callback_ext(struct notifier_block *nfb, unsigned long action,
   void *hcpu);
extern int kswapd_run_ext(int nid);
extern void kswapd_stop_ext(int nid);
extern int kswapd(void *p);


extern int kswapd_unbind_cpu;
extern void upate_kswapd_unbind_cpu(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kswapd_affinity_check(struct task_struct *p, const struct cpumask *mask)
{
 if (kswapd_unbind_cpu == -1)
  return 0;
 return (p->flags & 0x00020000) && cpumask_test_cpu(kswapd_unbind_cpu, mask);
}
# 24 "../include/linux/mmzone.h" 2
# 44 "../include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
# 62 "../include/linux/mmzone.h"
 MIGRATE_CMA,

 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,

 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern char * const migratetype_names[MIGRATE_TYPES];
# 85 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_migrate_movable(int mt)
{
 return __builtin_expect(!!((mt) == MIGRATE_CMA), 0) || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;
# 103 "../include/linux/mmzone.h"
struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

struct pglist_data;
# 117 "../include/linux/mmzone.h"
struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (7))));
# 139 "../include/linux/mmzone.h"
enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,
 NR_PAGETABLE,
 NR_KERNEL_STACK_KB,




 NR_BOUNCE,

 NR_ZSPAGES,

 NR_FREE_CMA_PAGES,

        NR_IONCACHE_PAGES,

 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_REFAULT,
 WORKINGSET_ACTIVATE,
 WORKINGSET_RESTORE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_ANON_THPS,
 NR_UNSTABLE_NFS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_UNRECLAIMABLE_PAGES,
 NR_VM_NODE_STAT_ITEMS
};
# 215 "../include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

struct zone_reclaim_stat {
# 247 "../include/linux/mmzone.h"
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];
};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 atomic_long_t inactive_age;

 unsigned long refaults;

 struct pglist_data *pgdat;

};
# 276 "../include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};





struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;





 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 337 "../include/linux/mmzone.h"
 ZONE_DMA,
# 352 "../include/linux/mmzone.h"
 ZONE_NORMAL,
# 364 "../include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};




struct page_label {
    unsigned long label;
    unsigned long segment;
};



struct zone {



 unsigned long watermark[NR_WMARK];

 unsigned long nr_reserved_highatomic;
# 399 "../include/linux/mmzone.h"
 long lowmem_reserve[3];




 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;


 bool cma_alloc;
# 420 "../include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 463 "../include/linux/mmzone.h"
 unsigned long managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

    struct page_label zone_label[4];

 const char *name;







 unsigned long nr_isolate_pageblock;







 int initialized;


 struct zone_padding _pad1_;



 struct free_area free_area[4][11];





 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
# 526 "../include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_stat[0];
} __attribute__((__aligned__(1 << (7))));

enum pgdat_flags {
 PGDAT_CONGESTED,


 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 604 "../include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,







 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 639 "../include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 0) * 3) + 1];
};



extern struct page *mem_map;
# 656 "../include/linux/mmzone.h"
struct bootmem_data;
typedef struct pglist_data {
 struct zone node_zones[3];
 struct zonelist node_zonelists[MAX_ZONELISTS];
 int nr_zones;
# 683 "../include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;

 struct task_struct *kswapd[16];




 int kswapd_order;
 enum zone_type kswapd_classzone_idx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_classzone_idx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
# 721 "../include/linux/mmzone.h"
 unsigned long totalreserve_pages;
# 732 "../include/linux/mmzone.h"
 struct zone_padding _pad1_;
 spinlock_t lru_lock;
# 752 "../include/linux/mmzone.h"
 struct lruvec lruvec;





 unsigned int inactive_ratio;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 780 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *zone_lru_lock(struct zone *zone)
{
 return &zone->zone_pgdat->lru_lock;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct lruvec *node_lruvec(struct pglist_data *pgdat)
{
 return &pgdat->lruvec;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int zone_id(const struct zone *zone)
{
 struct pglist_data *pgdat = zone->zone_pgdat;

 return zone - pgdat->node_zones;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_dev_zone(const struct zone *zone)
{
 return false;
}


# 1 "../include/linux/memory_hotplug.h" 1




# 1 "../include/linux/mmzone.h" 1
# 6 "../include/linux/memory_hotplug.h" 2

# 1 "../include/linux/notifier.h" 1
# 16 "../include/linux/notifier.h"
# 1 "../include/linux/srcu.h" 1
# 35 "../include/linux/srcu.h"
# 1 "../include/linux/rcu_segcblist.h" 1
# 31 "../include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
 long len_lazy;
};
# 77 "../include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];
 long len;
 long len_lazy;
};
# 36 "../include/linux/srcu.h" 2

struct srcu_struct;
# 54 "../include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *sp);







# 1 "../include/linux/srcutree.h" 1
# 27 "../include/linux/srcutree.h"
# 1 "../include/linux/rcu_node_tree.h" 1
# 28 "../include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 raw_spinlock_t lock __attribute__((__aligned__(1 << (7))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct delayed_work work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *sp;
};




struct srcu_node {
 raw_spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 raw_spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;



};
# 140 "../include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *sp);
void srcu_barrier(struct srcu_struct *sp);
void srcu_torture_stats_print(struct srcu_struct *sp, char *tt, char *tf);
# 63 "../include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *sp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *sp);
int __srcu_read_lock(struct srcu_struct *sp) ;
void __srcu_read_unlock(struct srcu_struct *sp, int idx) ;
void synchronize_srcu(struct srcu_struct *sp);
# 104 "../include/linux/srcu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int srcu_read_lock_held(struct srcu_struct *sp)
{
 return 1;
}
# 155 "../include/linux/srcu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int srcu_read_lock(struct srcu_struct *sp)
{
 int retval;

 retval = __srcu_read_lock(sp);
 do { } while (0);
 return retval;
}
# 171 "../include/linux/srcu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void srcu_read_unlock(struct srcu_struct *sp, int idx)

{
 do { } while (0);
 __srcu_read_unlock(sp, idx);
}
# 187 "../include/linux/srcu.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "../include/linux/notifier.h" 2
# 51 "../include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 95 "../include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 121 "../include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
# 171 "../include/linux/notifier.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 215 "../include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "../include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
# 253 "../include/linux/memory_hotplug.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgdat_resize_init(struct pglist_data *pgdat) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mhp_notimplemented(const char *func)
{
 printk("\001" "4" "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);
 dump_stack();
 return -38;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool try_online_one_block(int nid)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_online_mems(void) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_online_mems(void) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mem_hotplug_begin(void) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mem_hotplug_done(void) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool movable_node_is_enabled(void)
{
 return false;
}
# 310 "../include/linux/memory_hotplug.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void try_offline_node(int nid) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -22;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void remove_memory(int nid, u64 start, u64 size) {}


extern int walk_memory_range(unsigned long start_pfn, unsigned long end_pfn,
  void *arg, int (*func)(struct memory_block *, void *));
extern int __add_memory(int nid, u64 start, u64 size);
extern int add_memory(int nid, u64 start, u64 size);
extern int add_memory_resource(int nid, struct resource *resource, bool online);
extern int arch_add_memory(int nid, u64 start, u64 size, bool want_memblock);
extern void move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,
  unsigned long nr_pages);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages);
extern bool is_memblock_offlined(struct memory_block *mem);
extern void remove_memory(int nid, u64 start, u64 size);
extern int sparse_add_one_section(struct pglist_data *pgdat, unsigned long start_pfn);
extern void sparse_remove_one_section(struct zone *zone, struct mem_section *ms,
  unsigned long map_offset);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
extern bool allow_online_pfn_range(int nid, unsigned long pfn, unsigned long nr_pages,
  int online_type);
extern struct zone *zone_for_pfn_range(int online_type, int nid, unsigned start_pfn,
  unsigned long nr_pages);
# 820 "../include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int classzone_idx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}

extern unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru, int zone_idx);


void memory_present(int nid, unsigned long start, unsigned long end);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int local_memory_node(int node_id) { return node_id; };
# 878 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool managed_zone(struct zone *zone)
{
 return zone->managed_pages;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}

extern int movable_zone;
# 902 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[3 -1];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];




extern struct pglist_data contig_page_data;
# 960 "../include/linux/mmzone.h"
extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 992 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int zonelist_node_idx(struct zoneref *zoneref)
{




 return 0;

}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1028 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1053 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1103 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long early_pfn_to_nid(unsigned long pfn)
{
 do { bool __cond = !(!(0)); extern void __compiletime_assert_55(void) ; if (__cond) __compiletime_assert_55(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
# 1137 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (30 - 12);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (30 - 12);
}




struct page;
struct page_ext;
struct mem_section {
# 1164 "../include/linux/mmzone.h"
 unsigned long section_mem_map;


 unsigned long *pageblock_flags;





 struct page_ext *page_ext;
 unsigned long pad;





};
# 1193 "../include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return ((void *)0);

 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern int __section_nr(struct mem_section* ms);
extern unsigned long usemap_size(void);
# 1223 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<3)-1));
 return (struct page *)map;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}
# 1267 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern int __highest_present_section_nr;
# 1283 "../include/linux/mmzone.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pfn_present(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (48 - 30)))
  return 0;
 return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
}
# 1306 "../include/linux/mmzone.h"
void sparse_init(void);
# 1317 "../include/linux/mmzone.h"
struct mminit_pfnnid_cache {
 unsigned long last_start;
 unsigned long last_end;
 int last_nid;
};





void memory_present(int nid, unsigned long start, unsigned long end);
unsigned long __attribute__ ((__section__(".init.text"))) node_memmap_size_bytes(int, unsigned long, unsigned long);
# 1363 "../include/linux/mmzone.h"
bool memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone);
# 7 "../include/linux/gfp.h" 2


# 1 "../include/linux/topology.h" 1
# 35 "../include/linux/topology.h"
# 1 "../arch/arm64/include/asm/topology.h" 1






struct cpu_topology {
 int thread_id;
 int core_id;
 int cluster_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
};

extern struct cpu_topology cpu_topology[8];






void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);
# 36 "../arch/arm64/include/asm/topology.h"
# 1 "../include/linux/arch_topology.h" 1
# 11 "../include/linux/arch_topology.h"
void topology_normalize_cpu_scale(void);
int topology_detect_flags(void);
int topology_smt_flags(void);
int topology_core_flags(void);
int topology_cpu_flags(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

struct sched_domain;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
unsigned long topology_get_cpu_scale(struct sched_domain *sd, int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) efficiency;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
unsigned long topology_get_cpu_efficiency(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(efficiency)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(efficiency)))) *)((&(efficiency))))); (typeof((typeof(*((&(efficiency)))) *)((&(efficiency))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) freq_scale;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
unsigned long topology_get_freq_scale(struct sched_domain *sd, int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(freq_scale)))) *)((&(freq_scale))))); (typeof((typeof(*((&(freq_scale)))) *)((&(freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) max_freq_scale;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
unsigned long topology_get_max_freq_scale(struct sched_domain *sd, int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(max_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(max_freq_scale)))) *)((&(max_freq_scale))))); (typeof((typeof(*((&(max_freq_scale)))) *)((&(max_freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}
# 37 "../arch/arm64/include/asm/topology.h" 2
# 50 "../arch/arm64/include/asm/topology.h"
# 1 "../include/asm-generic/topology.h" 1
# 51 "../arch/arm64/include/asm/topology.h" 2
# 36 "../include/linux/topology.h" 2
# 45 "../include/linux/topology.h"
int topology_update_cpu_topology(void);
# 102 "../include/linux/topology.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int numa_node_id(void)
{
 return ((void)((*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }))),0);
}
# 162 "../include/linux/topology.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int node_to_mem_node(int node)
{
 return node;
}
# 204 "../include/linux/topology.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((void)((void)(cpu),0), ((const struct cpumask *)&__cpu_online_mask));
}
# 10 "../include/linux/gfp.h" 2

struct vm_area_struct;
# 297 "../include/linux/gfp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int gfpflags_to_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { bool __cond = !(!((1UL << 3) != 0x08u)); extern void __compiletime_assert_56(void) ; if (__cond) __compiletime_assert_56(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!((0x08u >> 3) != MIGRATE_MOVABLE)); extern void __compiletime_assert_57(void) ; if (__cond) __compiletime_assert_57(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400000u));
}
# 334 "../include/linux/gfp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400000u) | (( gfp_t)0x2000u))) ==
  (( gfp_t)0x400000u);
}
# 430 "../include/linux/gfp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit;

 if (!0) {
  if ((flags & (( gfp_t)0x08u)) && !(flags & (( gfp_t)0x4000000u)))
   flags &= ~(( gfp_t)0x02u);
 }

 bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_NORMAL << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_NORMAL << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 455 "../include/linux/gfp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int gfp_zonelist(gfp_t flags)
{




 return ZONELIST_FALLBACK;
}
# 473 "../include/linux/gfp.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (&contig_page_data)->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,
       nodemask_t *nodemask);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
 return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, ((void *)0));
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 0)))));
 ((void)(sizeof(( long)(!node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}
# 549 "../include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__ ((__section__(".meminit.text"))) __attribute__((no_instrument_function)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_hot_cold_page(struct page *page, bool cold);
extern void free_hot_cold_page_list(struct list_head *list, bool cold);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask);
extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 590 "../include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
# 609 "../include/linux/gfp.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);
extern void free_contig_range(unsigned long pfn, unsigned nr_pages);




extern void init_cma_reserved_pageblock(struct page *page);
# 17 "../include/linux/percpu_counter.h" 2



struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "../include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ union { typeof(fbc->count) __val; char __c[1]; } __u; if (1) __read_once_size(&(fbc->count), __u.__c, sizeof(fbc->count)); else __read_once_size_nocheck(&(fbc->count), __u.__c, sizeof(fbc->count)); do { } while (0); __u.__val; });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 177 "../include/linux/percpu_counter.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "../include/linux/quota.h" 2

# 1 "../include/uapi/linux/dqblk_xfs.h" 1
# 53 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 149 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 192 "../include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];
};
# 43 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v1.h" 1
# 44 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v2.h" 1








# 1 "../include/linux/dqblk_qtree.h" 1
# 18 "../include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "../include/linux/dqblk_v2.h" 2
# 45 "../include/linux/quota.h" 2



# 1 "../include/linux/projid.h" 1
# 17 "../include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}
# 65 "../include/linux/projid.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) kprojid_t make_kprojid(struct user_namespace *from, projid_t projid)
{
 return (kprojid_t){ projid };
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) projid_t from_kprojid(struct user_namespace *to, kprojid_t kprojid)
{
 return __kprojid_val(kprojid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t kprojid)
{
 projid_t projid = from_kprojid(to, kprojid);
 if (projid == (projid_t)-1)
  projid = 65534;
 return projid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return true;
}
# 49 "../include/linux/quota.h" 2
# 1 "../include/uapi/linux/quota.h" 1
# 90 "../include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "../include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "../include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "../include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "../include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "../include/linux/quota.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/quota.h\"; .popsection; .long 2b - 0b; .short 114; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/quota.h\"; .popsection; .long 2b - 0b; .short 141; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "../include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int info_dirty(struct mem_dqinfo *info)
{
 return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats *dqstats_pcpu;
extern struct dqstats dqstats;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 295 "../include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 396 "../include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;






 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 470 "../include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 497 "../include/linux/quota.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { bool __cond = !(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0))); extern void __compiletime_assert_58(void) ; if (__cond) __compiletime_assert_58(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}


extern void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype);
# 525 "../include/linux/quota.h"
struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 230 "../include/linux/fs.h" 2
# 263 "../include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 276 "../include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;




enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 301 "../include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;
 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 enum rw_hint ki_hint;
} ;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 324 "../include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);

 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);

struct address_space {
 struct inode *host;
 struct radix_tree_root page_tree;
 spinlock_t tree_lock;
 atomic_t i_mmap_writable;
 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;

 unsigned long nrpages;

 unsigned long nrexceptional;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 spinlock_t private_lock;
 gfp_t gfp_mask;
 struct list_head private_list;
 void *private_data;
 errseq_t wb_err;
} __attribute__((aligned(sizeof(long)))) ;





struct request_queue;

struct block_device {
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 u8 bd_partno;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct backing_dev_info *bd_bdi;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
} ;
# 470 "../include/linux/fs.h"
int mapping_tagged(struct address_space *mapping, int tag);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ union { typeof((&mapping->i_mmap.rb_root)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); else __read_once_size_nocheck(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0));
}
# 509 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mapping_writably_mapped(struct address_space *mapping)
{
 return ({ union { typeof((&mapping->i_mmap_writable)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap_writable)->counter), __u.__c, sizeof((&mapping->i_mmap_writable)->counter)); else __read_once_size_nocheck(&((&mapping->i_mmap_writable)->counter), __u.__c, sizeof((&mapping->i_mmap_writable)->counter)); do { } while (0); __u.__val; }) > 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_sub(1, (&mapping->i_mmap_writable));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_add(1, (&mapping->i_mmap_writable));
}
# 547 "../include/linux/fs.h"
struct posix_acl;



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec i_atime;
 struct timespec i_mtime;
 struct timespec i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 unsigned int i_blkbits;
 enum rw_hint i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 u64 i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;



 const struct file_operations *i_fop;
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;



 struct fscrypt_info *i_crypt_info;



 struct fsverity_info *i_verity_info;


 void *i_private;
} ;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}
# 712 "../include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 775 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) loff_t i_size_read(const struct inode *inode)
{
# 794 "../include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 816 "../include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};




struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;
 errseq_t f_wb_err;



}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 955 "../include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 int (*lm_compare_owner)(struct file_lock *, struct file_lock *);
 unsigned long (*lm_owner_key)(struct file_lock *);
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
int locks_in_grace(struct net *);
int opens_in_grace(struct net *);


# 1 "../include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 993 "../include/linux/fs.h" 2
# 1011 "../include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_next;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_block;
 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1057 "../include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);
# 1066 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *locks_inode(const struct file *f)
{
 return f->f_path.dentry->d_inode;
}


extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int posix_unblock_lock(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);
struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1246 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file), 0, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(locks_inode(filp), fl);
}

struct fasync_struct {
 spinlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1341 "../include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;
 struct key *s_master_keys;


 const struct fsverity_operations *s_vop;


 struct hlist_bl_head s_anon;




 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;

 char s_id[32];
 uuid_t s_uuid;

 void *s_fs_info;
 unsigned int s_max_links;
 fmode_t s_mode;



 u32 s_time_gran;





 struct mutex s_vfs_rename_mutex;





 char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;





 struct list_lru s_dentry_lru __attribute__((__aligned__((1 << 7))));
 struct list_lru s_inode_lru __attribute__((__aligned__((1 << 7))));
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << 7))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}

extern struct timespec current_time(struct inode *inode);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
# 1522 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1534 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1546 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1570 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, false);
}
# 1599 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, true);
}
# 1617 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, true);
}


extern bool inode_owner_or_capable(const struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_create2(struct vfsmount *, struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mkdir2(struct vfsmount *, struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_mknod2(struct vfsmount *, struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, const char *);
extern int vfs_symlink2(struct vfsmount *, struct inode *, struct dentry *, const char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_link2(struct vfsmount *, struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_rmdir2(struct vfsmount *, struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_unlink2(struct vfsmount *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_rename2(struct vfsmount *, struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_whiteout(struct inode *, struct dentry *);

extern struct dentry *vfs_tmpfile(struct vfsmount *mnt,
      struct dentry *dentry, umode_t mode,
      int open_flag);




extern void inode_init_owner(struct inode *inode, const struct inode *dir,
   umode_t mode);
extern bool may_open_dev(const struct path *path);



struct fiemap_extent_info {
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;

};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);
# 1692 "../include/linux/fs.h"
struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 const filldir_t actor;
 loff_t pos;
};

struct block_device_operations;
# 1729 "../include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 unsigned int (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,
   u64);
 ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
   u64);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct inode *, int);
 int (*permission2) (struct vfsmount *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *,const char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*setattr2) (struct vfsmount *, struct dentry *, struct iattr *);
 int (*getattr) (const struct path *, struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode, int *opened);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*set_acl)(struct inode *, struct posix_acl *, int);
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t __vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, const struct iovec *,
  unsigned long, loff_t *, rwf_t);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern int vfs_clone_file_prep_inodes(struct inode *inode_in, loff_t pos_in,
          struct inode *inode_out, loff_t pos_out,
          u64 *len, bool is_dedupe);
extern int do_clone_file_range(struct file *file_in, loff_t pos_in,
          struct file *file_out, loff_t pos_out, u64 len);
extern int vfs_clone_file_range(struct file *file_in, loff_t pos_in,
    struct file *file_out, loff_t pos_out, u64 len);
extern int vfs_dedupe_file_range_compare(struct inode *src, loff_t srcoff,
      struct inode *dest, loff_t destoff,
      loff_t len, bool *is_same);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);

struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 int (*remount_fs2) (struct vfsmount *, struct super_block *, int *, char *);
 void *(*clone_mnt_data) (void *);
 void (*copy_mnt_data) (void *, void *);
 void (*umount_begin) (struct super_block *);
 void (*umount_end) (struct super_block *, int);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_options2)(struct vfsmount *,struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 1924 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 1954 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool HAS_UNMAPPED_ID(struct inode *inode)
{
 return !uid_valid(inode->i_uid) || !gid_valid(inode->i_gid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = file_write_hint(filp),
 };
}
# 2065 "../include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, ((1 << 0) | (1 << 1) | (1 << 2)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}
# 2101 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_inc_iversion(struct inode *inode)
{
       spin_lock(&inode->i_lock);
       inode->i_version++;
       spin_unlock(&inode->i_lock);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern void touch_atime(const struct path *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;





 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 struct dentry *(*mount2) (struct vfsmount *, struct file_system_type *, int,
          const char *, void *);
 void *(*alloc_mnt_data) (void);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_ns(struct file_system_type *fs_type,
 int flags, void *data, void *ns, struct user_namespace *user_ns,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_userns(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, struct user_namespace *user_ns,
   void *data);
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
extern struct dentry *mount_pseudo_xattr(struct file_system_type *, char *,
      const struct super_operations *ops,
      const struct xattr_handler **xattr,
      const struct dentry_operations *dops,
      unsigned long);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *
mount_pseudo(struct file_system_type *fs_type, char *name,
      const struct super_operations *ops,
      const struct dentry_operations *dops, unsigned long magic)
{
 return mount_pseudo_xattr(fs_type, name, ops, ((void *)0), dops, magic);
}
# 2217 "../include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data);

extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int vfs_ustat(dev_t, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((format(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (0002000 | 00010)) == 0002000;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(locks_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2337 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int break_lease(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int break_deleg(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int break_layout(struct inode *inode, bool wait)
{
 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2427 "../include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 struct audit_names *aname;
 int refcnt;
 const char iname[];
};

extern long vfs_truncate(const struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int do_truncate2(struct vfsmount *, struct dentry *, loff_t start,
   unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

enum {
 FILE_CREATED = 1,
 FILE_OPENED = 2
};
extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *),
   int *opened);
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__ ((__section__(".init.text"))) vfs_caches_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;





extern int register_blkdev(unsigned int, const char *);
extern void unregister_blkdev(unsigned int, const char *);
extern void bdev_unhash_inode(dev_t dev);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);

extern struct super_block *blockdev_superblock;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return sb == blockdev_superblock;
}
# 2528 "../include/linux/fs.h"
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);
extern int __blkdev_reread_part(struct block_device *bdev);
extern int blkdev_reread_part(struct block_device *bdev);


extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
# 2569 "../include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern const char *__bdevname(dev_t, char *buffer);
extern const char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev(const char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);


extern void check_disk_size_change(struct gendisk *disk,
       struct block_device *bdev);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL>>1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern int __attribute__((warn_unused_result)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);

extern int __attribute__((warn_unused_result)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((warn_unused_result)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((warn_unused_result)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL>>1)));
}
# 2684 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2701 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2714 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & (1 << 4)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & (1 << 5)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int notify_change2(struct vfsmount *, struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int inode_permission2(struct vfsmount *, struct inode *, int);
extern int __inode_permission(struct inode *, int);
extern int __inode_permission2(struct vfsmount *, struct inode *, int);
extern int generic_permission(struct inode *, int);
extern int __check_sticky(struct inode *dir, struct inode *inode);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, false);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 2797 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_write_access(struct inode * inode)
{
 atomic_sub(1, (&inode->i_writecount));
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_add(1, (&file_inode(file)->i_writecount));
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool inode_is_open_for_write(const struct inode *inode)
{
 return ({ union { typeof((&inode->i_writecount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&inode->i_writecount)->counter), __u.__c, sizeof((&inode->i_writecount)->counter)); else __read_once_size_nocheck(&((&inode->i_writecount)->counter), __u.__c, sizeof((&inode->i_writecount)->counter)); do { } while (0); __u.__val; }) > 0;
}
# 2831 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_readcount_dec(struct inode *inode)
{
 return;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void i_readcount_inc(struct inode *inode)
{
 return;
}

extern int do_pipe_flags(int *, int);
# 2855 "../include/linux/fs.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_FIRMWARE_PREALLOC_BUFFER, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "",
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

extern int kernel_read_file(struct file *, void **, loff_t *, loff_t,
       enum kernel_read_file_id);
extern int kernel_read_file_from_path(const char *, void **, loff_t *, loff_t,
          enum kernel_read_file_id);
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t,
        enum kernel_read_file_id);
extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,


 DIO_ASYNC_EXTEND = 0x04,


 DIO_SKIP_DIO_COUNT = 0x08,
};

void dio_end_io(struct bio *bio);
void dio_warn_stale_pagecache(struct file *filp);

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3058 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_dio_begin(struct inode *inode)
{
 atomic_add(1, (&inode->i_dio_count));
}
# 3070 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_dio_end(struct inode *inode)
{
 if ((atomic_sub_return(1, (&inode->i_dio_count)) == 0))
  wake_up_bit(&inode->i_state, 9);
}

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
extern void generic_fillattr(struct inode *, struct kstat *);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_statx(int, const char *, int, struct kstat *, u32);
extern int vfs_statx_fd(unsigned int, struct kstat *, u32, unsigned int);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_statx(-100, filename, 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_statx(-100, name, 0x100 | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vfs_fstatat(int dfd, const char *filename,
         struct kstat *stat, int flags)
{
 return vfs_statx(dfd, filename, flags | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vfs_fstat(int fd, struct kstat *stat)
{
 return vfs_statx_fd(fd, stat, 0x000007ffU, 0);
}


extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_super_exclusive_thawed(struct block_device *bdev);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(const struct path *, struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *,
    struct inode *, struct dentry *, unsigned int);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool needs_casefold(const struct inode *dir)
{
 return 0;
}

extern void generic_set_encrypted_ci_d_ops(struct inode *dir,
        struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);




extern int setattr_prepare(struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool io_is_direct(struct file *filp)
{
 return (filp->f_flags & 0200000) || ((filp->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool vma_is_dax(struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= (1 << 1);
 if (io_is_direct(file))
  res |= (1 << 2);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & 1)))
  res |= (1 << 4);
 if (file->f_flags & 04000000)
  res |= (1 << 5);
 return res;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  ki->ki_flags |= (1 << 7);
 }
 if (flags & (( __kernel_rwf_t)0x00000001))
  ki->ki_flags |= (1 << 3);
 if (flags & (( __kernel_rwf_t)0x00000002))
  ki->ki_flags |= (1 << 4);
 if (flags & (( __kernel_rwf_t)0x00000004))
  ki->ki_flags |= ((1 << 4) | (1 << 5));
 if (flags & (( __kernel_rwf_t)0x00000010))
  ki->ki_flags |= (1 << 1);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[0];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3364 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__ ((__section__(".init.text"))) get_filesystem_list(char *buf);
int get_filesystem_list_runtime(char *buf);
# 3396 "../include/linux/fs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int check_sticky(struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(dir, inode);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= 4096;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & 16);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & 16);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);

int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
        unsigned int flags);

int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
        struct fsxattr *fa);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void simple_fill_fsxattr(struct fsxattr *fa, __u32 xflags)
{
 memset(fa, 0, sizeof(*fa));
 fa->fsx_xflags = xflags;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 28 "../include/linux/net.h" 2

# 1 "../include/uapi/linux/net.h" 1
# 23 "../include/uapi/linux/net.h"
# 1 "./arch/arm64/include/generated/uapi/asm/socket.h" 1
# 24 "../include/uapi/linux/net.h" 2
# 48 "../include/uapi/linux/net.h"
typedef enum {
 SS_FREE = 0,
 SS_UNCONNECTED,
 SS_CONNECTING,
 SS_CONNECTED,
 SS_DISCONNECTING
} socket_state;
# 30 "../include/linux/net.h" 2

struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct file;
struct net;
# 63 "../include/linux/net.h"
enum sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM = 2,
 SOCK_RAW = 3,
 SOCK_RDM = 4,
 SOCK_SEQPACKET = 5,
 SOCK_DCCP = 6,
 SOCK_PACKET = 10,
};
# 86 "../include/linux/net.h"
enum sock_shutdown_cmd {
 SHUT_RD,
 SHUT_WR,
 SHUT_RDWR,
};

struct socket_wq {

 wait_queue_head_t wait;
 struct fasync_struct *fasync_list;
 unsigned long flags;
 struct callback_head rcu;
} __attribute__((__aligned__((1 << 7))));
# 110 "../include/linux/net.h"
struct socket {
 socket_state state;

 short type;

 unsigned long flags;

 struct socket_wq *wq;

 struct file *file;
 struct sock *sk;
 const struct proto_ops *ops;
};

struct vm_area_struct;
struct page;
struct sockaddr;
struct msghdr;
struct module;
struct sk_buff;
typedef int (*sk_read_actor_t)(read_descriptor_t *, struct sk_buff *,
          unsigned int, size_t);

struct proto_ops {
 int family;
 struct module *owner;
 int (*release) (struct socket *sock);
 int (*bind) (struct socket *sock,
          struct sockaddr *myaddr,
          int sockaddr_len);
 int (*connect) (struct socket *sock,
          struct sockaddr *vaddr,
          int sockaddr_len, int flags);
 int (*socketpair)(struct socket *sock1,
          struct socket *sock2);
 int (*accept) (struct socket *sock,
          struct socket *newsock, int flags, bool kern);
 int (*getname) (struct socket *sock,
          struct sockaddr *addr,
          int *sockaddr_len, int peer);
 unsigned int (*poll) (struct file *file, struct socket *sock,
          struct poll_table_struct *wait);
 int (*ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*compat_ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*listen) (struct socket *sock, int len);
 int (*shutdown) (struct socket *sock, int flags);
 int (*setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*compat_setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*compat_getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*sendmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len);
# 180 "../include/linux/net.h"
 int (*recvmsg) (struct socket *sock, struct msghdr *m,
          size_t total_len, int flags);
 int (*mmap) (struct file *file, struct socket *sock,
          struct vm_area_struct * vma);
 ssize_t (*sendpage) (struct socket *sock, struct page *page,
          int offset, size_t size, int flags);
 ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,
           struct pipe_inode_info *pipe, size_t len, unsigned int flags);
 int (*set_peek_off)(struct sock *sk, int val);
 int (*peek_len)(struct socket *sock);




 int (*read_sock)(struct sock *sk, read_descriptor_t *desc,
         sk_read_actor_t recv_actor);
 int (*sendpage_locked)(struct sock *sk, struct page *page,
        int offset, size_t size, int flags);
 int (*sendmsg_locked)(struct sock *sk, struct msghdr *msg,
       size_t size);
};




struct net_proto_family {
 int family;
 int (*create)(struct net *net, struct socket *sock,
      int protocol, int kern);
 struct module *owner;
};

struct iovec;
struct kvec;

enum {
 SOCK_WAKE_IO,
 SOCK_WAKE_WAITD,
 SOCK_WAKE_SPACE,
 SOCK_WAKE_URG,
};

int sock_wake_async(struct socket_wq *sk_wq, int how, int band);
int sock_register(const struct net_proto_family *fam);
void sock_unregister(int family);
int __sock_create(struct net *net, int family, int type, int proto,
    struct socket **res, int kern);
int sock_create(int family, int type, int proto, struct socket **res);
int sock_create_kern(struct net *net, int family, int type, int proto, struct socket **res);
int sock_create_lite(int family, int type, int proto, struct socket **res);
struct socket *sock_alloc(void);
void sock_release(struct socket *sock);
int sock_sendmsg(struct socket *sock, struct msghdr *msg);
int sock_recvmsg(struct socket *sock, struct msghdr *msg, int flags);
struct file *sock_alloc_file(struct socket *sock, int flags, const char *dname);
struct socket *sockfd_lookup(int fd, int *err);
struct socket *sock_from_file(struct file *file, int *err);

int net_ratelimit(void);
# 285 "../include/linux/net.h"
int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len);
int kernel_sendmsg_locked(struct sock *sk, struct msghdr *msg,
     struct kvec *vec, size_t num, size_t len);
int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len, int flags);

int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen);
int kernel_listen(struct socket *sock, int backlog);
int kernel_accept(struct socket *sock, struct socket **newsock, int flags);
int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,
     int flags);
int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getsockopt(struct socket *sock, int level, int optname, char *optval,
        int *optlen);
int kernel_setsockopt(struct socket *sock, int level, int optname, char *optval,
        unsigned int optlen);
int kernel_sendpage(struct socket *sock, struct page *page, int offset,
      size_t size, int flags);
int kernel_sendpage_locked(struct sock *sk, struct page *page, int offset,
      size_t size, int flags);
int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);
int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how);


u32 kernel_sock_ip_overhead(struct sock *sk);
# 30 "../include/linux/skbuff.h" 2
# 1 "../include/linux/textsearch.h" 1








# 1 "../include/linux/slab.h" 1
# 114 "../include/linux/slab.h"
# 1 "../include/linux/kmemleak.h" 1
# 24 "../include/linux/kmemleak.h"
# 1 "../include/linux/slab.h" 1
# 25 "../include/linux/kmemleak.h" 2
# 1 "../include/linux/vmalloc.h" 1
# 12 "../include/linux/vmalloc.h"
struct vm_area_struct;
struct notifier_block;
# 35 "../include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;



};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;
 unsigned long flags;
 struct rb_node rb_node;
 struct list_head list;
 struct llist_node purge_list;
 struct vm_struct *vm;
 struct callback_head callback_head;
};




extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count,
    int node, pgprot_t prot);
extern void vm_unmap_aliases(void);


extern void __attribute__ ((__section__(".init.text"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
# 99 "../include/linux/vmalloc.h"
extern void *__vmalloc_node_flags_caller(unsigned long size,
      int node, gfp_t flags, void *caller);


extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_mappings(void);
void vmalloc_sync_unmappings(void);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 12);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page **pages);

extern int map_kernel_range_noflush(unsigned long start, unsigned long size,
        pgprot_t prot, struct page **pages);
extern void unmap_kernel_range_noflush(unsigned long addr, unsigned long size);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);
# 170 "../include/linux/vmalloc.h"
extern struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes);
extern void free_vm_area(struct vm_struct *area);


extern long vread(char *buf, char *addr, unsigned long count);
extern long vwrite(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__ ((__section__(".init.text"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__ ((__section__(".init.text"))) void vm_area_register_early(struct vm_struct *vm, size_t align);
extern __attribute__ ((__section__(".init.text"))) int vm_area_check_early(struct vm_struct *vm);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mark_vmalloc_reserved_area(void *addr, unsigned long size)
{ };




struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 225 "../include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);
# 26 "../include/linux/kmemleak.h" 2
# 71 "../include/linux/kmemleak.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_init(void)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_alloc(const void *ptr, size_t size, int min_count,
      gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_recursive(const void *ptr, size_t size,
         int min_count, unsigned long flags,
         gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_percpu(const void *ptr, size_t size,
      gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_vmalloc(const struct vm_struct *area, size_t size,
        gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_free(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_free_part(const void *ptr, size_t size)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_free_recursive(const void *ptr, unsigned long flags)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_free_percpu(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_update_trace(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_not_leak(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_ignore(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_erase(void **ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_no_scan(const void *ptr)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_phys(phys_addr_t phys, size_t size,
           int min_count, gfp_t gfp)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_free_part_phys(phys_addr_t phys, size_t size)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_not_leak_phys(phys_addr_t phys)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kmemleak_ignore_phys(phys_addr_t phys)
{
}
# 115 "../include/linux/slab.h" 2
# 1 "../include/linux/kasan.h" 1






struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 88 "../include/linux/kasan.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_unpoison_shadow(const void *address, size_t size) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_unpoison_task_stack(struct task_struct *task) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_unpoison_stack_above_sp_to(const void *watermark) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_enable_current(void) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_disable_current(void) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_alloc_pages(struct page *page, unsigned int order) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_free_pages(struct page *page, unsigned int order) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          unsigned long *flags) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_kmalloc_large(void *ptr, size_t size, gfp_t flags)
{
 return ptr;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_kfree_large(void *ptr, unsigned long ip) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_poison_kfree(void *ptr, unsigned long ip) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags)
{
 return object;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kasan_slab_free(struct kmem_cache *s, void *object,
       unsigned long ip)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_free_shadow(const struct vm_struct *vm) {}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_unpoison_slab(const void *ptr) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
# 168 "../include/linux/kasan.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
# 186 "../include/linux/kasan.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kasan_init_tags(void) { }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 116 "../include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__ ((__section__(".init.text"))) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,
   unsigned long,
   void (*)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);

void memcg_create_kmem_cache(struct mem_cgroup *, struct kmem_cache *);
void memcg_deactivate_kmem_caches(struct mem_cgroup *);
void memcg_destroy_kmem_caches(struct mem_cgroup *);
# 149 "../include/linux/slab.h"
void * __attribute__((warn_unused_result)) __krealloc(const void *, size_t, gfp_t);
void * __attribute__((warn_unused_result)) krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kzfree(const void *);
size_t ksize(const void *);


const char *__check_heap_object(const void *ptr, unsigned long n,
    struct page *page);
# 274 "../include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,
 KMALLOC_RECLAIM,

 KMALLOC_DMA,

 NR_KMALLOC_TYPES
};






extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(12 + 1) + 1];

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{





 if (__builtin_expect(!!((flags & ((( gfp_t)0x01u) | (( gfp_t)0x10u))) == 0), 1))
  return KMALLOC_NORMAL;





 return flags & (( gfp_t)0x01u) ? KMALLOC_DMA : KMALLOC_RECLAIM;



}
# 319 "../include/linux/slab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (1 << 7))
  return ( __builtin_constant_p((1 << 7)) ? ( __builtin_constant_p((1 << 7)) ? ( ((1 << 7)) < 2 ? 0 : ((1 << 7)) & (1ULL << 63) ? 63 : ((1 << 7)) & (1ULL << 62) ? 62 : ((1 << 7)) & (1ULL << 61) ? 61 : ((1 << 7)) & (1ULL << 60) ? 60 : ((1 << 7)) & (1ULL << 59) ? 59 : ((1 << 7)) & (1ULL << 58) ? 58 : ((1 << 7)) & (1ULL << 57) ? 57 : ((1 << 7)) & (1ULL << 56) ? 56 : ((1 << 7)) & (1ULL << 55) ? 55 : ((1 << 7)) & (1ULL << 54) ? 54 : ((1 << 7)) & (1ULL << 53) ? 53 : ((1 << 7)) & (1ULL << 52) ? 52 : ((1 << 7)) & (1ULL << 51) ? 51 : ((1 << 7)) & (1ULL << 50) ? 50 : ((1 << 7)) & (1ULL << 49) ? 49 : ((1 << 7)) & (1ULL << 48) ? 48 : ((1 << 7)) & (1ULL << 47) ? 47 : ((1 << 7)) & (1ULL << 46) ? 46 : ((1 << 7)) & (1ULL << 45) ? 45 : ((1 << 7)) & (1ULL << 44) ? 44 : ((1 << 7)) & (1ULL << 43) ? 43 : ((1 << 7)) & (1ULL << 42) ? 42 : ((1 << 7)) & (1ULL << 41) ? 41 : ((1 << 7)) & (1ULL << 40) ? 40 : ((1 << 7)) & (1ULL << 39) ? 39 : ((1 << 7)) & (1ULL << 38) ? 38 : ((1 << 7)) & (1ULL << 37) ? 37 : ((1 << 7)) & (1ULL << 36) ? 36 : ((1 << 7)) & (1ULL << 35) ? 35 : ((1 << 7)) & (1ULL << 34) ? 34 : ((1 << 7)) & (1ULL << 33) ? 33 : ((1 << 7)) & (1ULL << 32) ? 32 : ((1 << 7)) & (1ULL << 31) ? 31 : ((1 << 7)) & (1ULL << 30) ? 30 : ((1 << 7)) & (1ULL << 29) ? 29 : ((1 << 7)) & (1ULL << 28) ? 28 : ((1 << 7)) & (1ULL << 27) ? 27 : ((1 << 7)) & (1ULL << 26) ? 26 : ((1 << 7)) & (1ULL << 25) ? 25 : ((1 << 7)) & (1ULL << 24) ? 24 : ((1 << 7)) & (1ULL << 23) ? 23 : ((1 << 7)) & (1ULL << 22) ? 22 : ((1 << 7)) & (1ULL << 21) ? 21 : ((1 << 7)) & (1ULL << 20) ? 20 : ((1 << 7)) & (1ULL << 19) ? 19 : ((1 << 7)) & (1ULL << 18) ? 18 : ((1 << 7)) & (1ULL << 17) ? 17 : ((1 << 7)) & (1ULL << 16) ? 16 : ((1 << 7)) & (1ULL << 15) ? 15 : ((1 << 7)) & (1ULL << 14) ? 14 : ((1 << 7)) & (1ULL << 13) ? 13 : ((1 << 7)) & (1ULL << 12) ? 12 : ((1 << 7)) & (1ULL << 11) ? 11 : ((1 << 7)) & (1ULL << 10) ? 10 : ((1 << 7)) & (1ULL << 9) ? 9 : ((1 << 7)) & (1ULL << 8) ? 8 : ((1 << 7)) & (1ULL << 7) ? 7 : ((1 << 7)) & (1ULL << 6) ? 6 : ((1 << 7)) & (1ULL << 5) ? 5 : ((1 << 7)) & (1ULL << 4) ? 4 : ((1 << 7)) & (1ULL << 3) ? 3 : ((1 << 7)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((1 << 7)) <= 4) ? __ilog2_u32((1 << 7)) : __ilog2_u64((1 << 7)) );

 if ((1 << 7) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 7) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/slab.h\"; .popsection; .long 2b - 0b; .short 355; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 373 "../include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *__kmalloc_node(size_t size, gfp_t flags, int node)
{
 return __kmalloc(size, flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
{
 return kmem_cache_alloc(s, flags);
}



extern void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t) __attribute__((__malloc__));






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *
kmem_cache_alloc_node_trace(struct kmem_cache *s,
         gfp_t gfpflags,
         int node, size_t size)
{
 return kmem_cache_alloc_trace(s, gfpflags, size);
}
# 439 "../include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));
# 451 "../include/linux/slab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 511 "../include/linux/slab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (12 + 1)))
   return kmalloc_large(size, flags);

  index = kmalloc_index(size);

  if (!index)
   return ((void *)16);
# 533 "../include/linux/slab.h"
  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_size(int n)
{

 if (n > 2)
  return 1 << n;

 if (n == 1 && (1 << 7) <= 32)
  return 96;

 if (n == 2 && (1 << 7) <= 64)
  return 192;

 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1))) {
  int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}

struct memcg_cache_array {
 struct callback_head rcu;
 struct kmem_cache *entries[0];
};
# 617 "../include/linux/slab.h"
struct memcg_cache_params {
 struct kmem_cache *root_cache;
 union {
  struct {
   struct memcg_cache_array *memcg_caches;
   struct list_head __root_caches_node;
   struct list_head children;
  };
  struct {
   struct mem_cgroup *memcg;
   struct list_head children_node;
   struct list_head kmem_caches_node;

   void (*deact_fn)(struct kmem_cache *);
   union {
    struct callback_head deact_rcu_head;
    struct work_struct deact_work;
   };
  };
 };
};

int memcg_update_all_caches(int num_memcgs);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(n * size, flags);
 return __kmalloc(n * size, flags);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x8000u));
}
# 675 "../include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
# 695 "../include/linux/slab.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x8000u));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x8000u));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__ ((__section__(".init.text"))) kmem_cache_init_late(void);
# 10 "../include/linux/textsearch.h" 2

struct module;

struct ts_config;
# 23 "../include/linux/textsearch.h"
struct ts_state
{
 unsigned int offset;
 char cb[40];
};
# 39 "../include/linux/textsearch.h"
struct ts_ops
{
 const char *name;
 struct ts_config * (*init)(const void *, unsigned int, gfp_t, int);
 unsigned int (*find)(struct ts_config *,
     struct ts_state *);
 void (*destroy)(struct ts_config *);
 void * (*get_pattern)(struct ts_config *);
 unsigned int (*get_pattern_len)(struct ts_config *);
 struct module *owner;
 struct list_head list;
};
# 59 "../include/linux/textsearch.h"
struct ts_config
{
 struct ts_ops *ops;
 int flags;
# 76 "../include/linux/textsearch.h"
 unsigned int (*get_next_block)(unsigned int consumed,
        const u8 **dst,
        struct ts_config *conf,
        struct ts_state *state);
# 89 "../include/linux/textsearch.h"
 void (*finish)(struct ts_config *conf,
       struct ts_state *state);
};
# 105 "../include/linux/textsearch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int textsearch_next(struct ts_config *conf,
        struct ts_state *state)
{
 unsigned int ret = conf->ops->find(conf, state);

 if (conf->finish)
  conf->finish(conf, state);

 return ret;
}
# 124 "../include/linux/textsearch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int textsearch_find(struct ts_config *conf,
        struct ts_state *state)
{
 state->offset = 0;
 return textsearch_next(conf, state);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *textsearch_get_pattern(struct ts_config *conf)
{
 return conf->ops->get_pattern(conf);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int textsearch_get_pattern_len(struct ts_config *conf)
{
 return conf->ops->get_pattern_len(conf);
}

extern int textsearch_register(struct ts_ops *);
extern int textsearch_unregister(struct ts_ops *);
extern struct ts_config *textsearch_prepare(const char *, const void *,
         unsigned int, gfp_t, int);
extern void textsearch_destroy(struct ts_config *conf);
extern unsigned int textsearch_find_continuous(struct ts_config *,
            struct ts_state *,
            const void *, unsigned int);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ts_config *alloc_ts_config(size_t payload,
      gfp_t gfp_mask)
{
 struct ts_config *conf;

 conf = kzalloc((((sizeof(*conf)) + 8 -1) & ~(8 -1)) + payload, gfp_mask);
 if (conf == ((void *)0))
  return ERR_PTR(-12);

 return conf;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *ts_config_priv(struct ts_config *conf)
{
 return ((u8 *) conf + (((sizeof(struct ts_config)) + 8 -1) & ~(8 -1)));
}
# 31 "../include/linux/skbuff.h" 2
# 1 "../include/net/checksum.h" 1
# 23 "../include/net/checksum.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 24 "../include/net/checksum.h" 2

# 1 "../include/linux/uaccess.h" 1
# 14 "../include/linux/uaccess.h"
# 1 "../arch/arm64/include/asm/uaccess.h" 1
# 22 "../arch/arm64/include/asm/uaccess.h"
# 1 "../arch/arm64/include/asm/kernel-pgtable.h" 1
# 22 "../arch/arm64/include/asm/kernel-pgtable.h"
# 1 "../arch/arm64/include/asm/pgtable.h" 1
# 20 "../arch/arm64/include/asm/pgtable.h"
# 1 "../arch/arm64/include/asm/proc-fns.h" 1
# 28 "../arch/arm64/include/asm/proc-fns.h"
struct mm_struct;
struct cpu_suspend_ctx;

extern void cpu_cache_off(void);
extern void cpu_do_idle(void);
extern void cpu_do_switch_mm(unsigned long pgd_phys, struct mm_struct *mm);
extern void cpu_reset(unsigned long addr) __attribute__((noreturn));
void cpu_soft_restart(phys_addr_t cpu_reset,
  unsigned long addr) __attribute__((noreturn));
extern void cpu_do_suspend(struct cpu_suspend_ctx *ptr);
extern u64 cpu_do_resume(phys_addr_t ptr, u64 idmap_ttbr);
# 21 "../arch/arm64/include/asm/pgtable.h" 2




# 1 "../arch/arm64/include/asm/pgtable-prot.h" 1
# 26 "../arch/arm64/include/asm/pgtable.h" 2
# 44 "../arch/arm64/include/asm/pgtable.h"
# 1 "../arch/arm64/include/asm/fixmap.h" 1
# 21 "../arch/arm64/include/asm/fixmap.h"
# 1 "../arch/arm64/include/asm/boot.h" 1





# 1 "./arch/arm64/include/generated/asm/sizes.h" 1
# 1 "../include/asm-generic/sizes.h" 1
# 2 "./arch/arm64/include/generated/asm/sizes.h" 2
# 7 "../arch/arm64/include/asm/boot.h" 2
# 22 "../arch/arm64/include/asm/fixmap.h" 2
# 36 "../arch/arm64/include/asm/fixmap.h"
enum fixed_addresses {
 FIX_HOLE,
# 49 "../arch/arm64/include/asm/fixmap.h"
 FIX_FDT_END,
 FIX_FDT = FIX_FDT_END + (0x00200000 + 0x00200000) / ((1UL) << 12) - 1,

 FIX_EARLYCON_MEM_BASE,
 FIX_TEXT_POKE0,
# 62 "../arch/arm64/include/asm/fixmap.h"
 FIX_ENTRY_TRAMP_DATA,
 FIX_ENTRY_TRAMP_TEXT,


 __end_of_permanent_fixed_addresses,
# 76 "../arch/arm64/include/asm/fixmap.h"
 FIX_BTMAP_END = __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + ((0x00040000 / ((1UL) << 12)) * 7) - 1,





 FIX_PTE,
 FIX_PMD,
 FIX_PUD,
 FIX_PGD,

 __end_of_fixed_addresses
};






void __attribute__ ((__section__(".init.text"))) early_fixmap_init(void);






extern void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot);

# 1 "../include/asm-generic/fixmap.h" 1
# 29 "../include/asm-generic/fixmap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { bool __cond = !(!(idx >= __end_of_fixed_addresses)); extern void __compiletime_assert_59(void) ; if (__cond) __compiletime_assert_59(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (((((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000) - 0x00200000) - ((idx) << 12));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000) - 0x00200000) || vaddr < (((((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000) - 0x00200000) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/asm-generic/fixmap.h\"; .popsection; .long 2b - 0b; .short 37; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 return ((((((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000) - 0x00200000) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 106 "../arch/arm64/include/asm/fixmap.h" 2
# 45 "../arch/arm64/include/asm/pgtable.h" 2


extern void __pte_error(const char *file, int line, unsigned long val);
extern void __pmd_error(const char *file, int line, unsigned long val);
extern void __pud_error(const char *file, int line, unsigned long val);
extern void __pgd_error(const char *file, int line, unsigned long val);





extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)];
# 121 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t clear_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) &= ~((prot).pgprot);
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t set_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) |= ((prot).pgprot);
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_wrprotect(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkwrite(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkclean(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkdirty(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));

 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))))
  pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkold(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkyoung(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkspecial(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 56)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkcont(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(3)) << 0)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mknoncont(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mkpresent(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 0)) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkcont(pmd_t pmd)
{
 return ((pmd_t) { (((pmd).pmd) | (((pmdval_t)(1)) << 52)) } );
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_pte(pte_t *ptep, pte_t pte)
{
# 231 "../arch/arm64/include/asm/pgtable.h"
 *ptep = pte;





 if (((((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6))) == (((pteval_t)(1)) << 0))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

struct mm_struct;
struct vm_area_struct;

extern void __sync_icache_dcache(pte_t pteval, unsigned long addr);
# 263 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) && (!(((pte).pte) & (((pteval_t)(1)) << 54))) && !(!!(((pte).pte) & (((pteval_t)(1)) << 56))))
  __sync_icache_dcache(pte, addr);






 if ((!!(((*ptep).pte) & (((pteval_t)(1)) << 0))) && (!!(((pte).pte) & (((pteval_t)(1)) << 0)))) {
  ((void)(sizeof(( long)(!(!!(((pte).pte) & (((pteval_t)(1)) << 10)))))));


  ((void)(sizeof(( long)((!!(((*ptep).pte) & ((((pteval_t)(1)) << 51)))) && !((!!(((pte).pte) & (((pteval_t)(1)) << 55))) || ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))))));


 }

 set_pte(ptep, pte);
}
# 303 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (((((pud).pgd).pgd))) } );
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pud_pmd(pud_t pud)
{
 return ((pmd_t) { (((((pud).pgd).pgd))) } );
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (((pmd).pmd)) } );
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (((pte).pte)) } );
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pgprot_t mk_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { (((prot).pgprot) & ~(((pteval_t)(1)) << 1)) } );
}
# 392 "../arch/arm64/include/asm/pgtable.h"
struct file;
extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
         unsigned long size, pgprot_t vma_prot);
# 415 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 *pmdp = pmd;
 asm volatile("dsb " "ishst" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, ((pmd_t) { (0) } ));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) phys_addr_t pmd_page_paddr(pmd_t pmd)
{
 return ((pmd).pmd) & (((1UL) << (48)) - 1) & (s32)(~(((1UL) << 12)-1));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long) ((void *)((unsigned long)(((phys_addr_t)(pmd_page_paddr(pmd))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pte_unmap(pte_t *pte) { }
# 472 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_pud(pud_t *pudp, pud_t pud)
{
 *pudp = pud;
 asm volatile("dsb " "ishst" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pud_clear(pud_t *pudp)
{
 set_pud(pudp, ((pud_t) { ((pgd_t) { (0) } ) }));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) phys_addr_t pud_page_paddr(pud_t pud)
{
 return ((((pud).pgd).pgd)) & (((1UL) << (48)) - 1) & (s32)(~(((1UL) << 12)-1));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long pud_page_vaddr(pud_t pud)
{
 return (unsigned long) ((void *)((unsigned long)(((phys_addr_t)(pud_page_paddr(pud))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)));
}
# 594 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 const pteval_t mask = (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | (((pteval_t)(1)) << 7) |
         (((pteval_t)(1)) << 58) | (((pteval_t)(1)) << 0) | ((((pteval_t)(1)) << 51));

 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);
 ((pte).pte) = (((pte).pte) & ~mask) | (((newprot).pgprot) & mask);
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 return pte_pmd(pte_modify(pmd_pte(pmd), newprot));
}


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);
# 629 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __ptep_test_and_clear_young(pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });
 do {
  old_pte = pte;
  pte = pte_mkold(pte);
  ((pte).pte) = ({ __typeof__(*(&((*ptep).pte))) __ret; __ret = (__typeof__(*(&((*ptep).pte)))) __cmpxchg((&((*ptep).pte)), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(&((*ptep).pte)))); __ret; });

 } while (((pte).pte) != ((old_pte).pte));

 return (!!(((pte).pte) & (((pteval_t)(1)) << 10)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 return __ptep_test_and_clear_young(ptep);
}
# 662 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address, pte_t *ptep)
{
 return ((pte_t) { (({ __typeof__(*(&((*ptep).pte))) __ret; __ret = (__typeof__(*(&((*ptep).pte)))) __xchg((unsigned long)(0), (&((*ptep).pte)), sizeof(*(&((*ptep).pte)))); __ret; })) } );
}
# 682 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ptep_set_wrprotect(struct mm_struct *mm, unsigned long address, pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });
 do {
  old_pte = pte;




  if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
   pte = pte_mkdirty(pte);
  pte = pte_wrprotect(pte);
  ((pte).pte) = ({ __typeof__(*(&((*ptep).pte))) __ret; __ret = (__typeof__(*(&((*ptep).pte)))) __cmpxchg((&((*ptep).pte)), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(&((*ptep).pte)))); __ret; });

 } while (((pte).pte) != ((old_pte).pte));
}
# 710 "../arch/arm64/include/asm/pgtable.h"
extern pgd_t swapper_pg_dir[(1 << ((39) - ((12 - 3) * (4 - (4 - 3)) + 3)))];
extern pgd_t idmap_pg_dir[(1 << ((39) - ((12 - 3) * (4 - (4 - 3)) + 3)))];
extern pgd_t tramp_pg_dir[(1 << ((39) - ((12 - 3) * (4 - (4 - 3)) + 3)))];
# 741 "../arch/arm64/include/asm/pgtable.h"
extern int kern_addr_valid(unsigned long addr);

# 1 "../include/asm-generic/pgtable.h" 1
# 44 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_60(void) ; if (__cond) __compiletime_assert_60(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pudp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pud_t *pudp,
     pud_t entry, int dirty)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_61(void) ; if (__cond) __compiletime_assert_61(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
# 91 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_62(void) ; if (__cond) __compiletime_assert_62(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}




int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);
# 115 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_63(void) ; if (__cond) __compiletime_assert_63(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
# 180 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pte_t *ptep,
         int full)
{
 pte_t pte;
 pte = ptep_get_and_clear(mm, address, ptep);
 return pte;
}
# 196 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 set_pte(ptep, ((pte_t) { (0) } ));
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 262 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_64(void) ; if (__cond) __compiletime_assert_64(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
}
# 279 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_65(void) ; if (__cond) __compiletime_assert_65(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
}
# 292 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_66(void) ; if (__cond) __compiletime_assert_66(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 328 "../include/asm-generic/pgtable.h"
extern void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pmdp_huge_split_prepare(struct vm_area_struct *vma,
        unsigned long address, pmd_t *pmdp)
{

}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_same(pte_t pte_a, pte_t pte_b)
{
 return ((pte_a).pte) == ((pte_b).pte);
}
# 354 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_unused(pte_t pte)
{
 return 0;
}
# 397 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_67(void) ; if (__cond) __compiletime_assert_67(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_68(void) ; if (__cond) __compiletime_assert_68(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
# 445 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((0))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((0))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((3))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((3))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((1))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((1))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 return newprot;
}
# 494 "../include/asm-generic/pgtable.h"
void pgd_clear_bad(pgd_t *);
void p4d_clear_bad(pgd_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int p4d_none_or_clear_bad(pgd_t *p4d)
{
 if (0)
  return 1;
 if (__builtin_expect(!!(0), 0)) {
  p4d_clear_bad(p4d);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pud_none_or_clear_bad(pud_t *pud)
{
 if ((!((((*pud).pgd).pgd))))
  return 1;
 if (__builtin_expect(!!((!(((((*pud).pgd).pgd)) & (((pgdval_t)(1)) << 1)))), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if ((!((*pmd).pmd)))
  return 1;
 if (__builtin_expect(!!((!(((*pmd).pmd) & (((pmdval_t)(1)) << 1)))), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t __ptep_modify_prot_start(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(mm, addr, ptep);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __ptep_modify_prot_commit(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(mm, addr, ptep, pte);
}
# 581 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t ptep_modify_prot_start(struct mm_struct *mm,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(mm, addr, ptep);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ptep_modify_prot_commit(struct mm_struct *mm,
        unsigned long addr,
        pte_t *ptep, pte_t pte)
{
 __ptep_modify_prot_commit(mm, addr, ptep, pte);
}
# 667 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_swp_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 739 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 803 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}
# 843 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 885 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 920 "../include/asm-generic/pgtable.h"
 if ((!((pmdval).pmd)) || pmd_trans_huge(pmdval) ||
  (0 && !(!!(((pmd_pte(pmdval)).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))))))
  return 1;
 if (__builtin_expect(!!((!(((pmdval).pmd) & (((pmdval_t)(1)) << 1)))), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 943 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}
# 961 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}
# 980 "../include/asm-generic/pgtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int p4d_set_huge(pgd_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int p4d_clear_huge(pgd_t *p4d)
{
 return 0;
}


int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1050 "../include/asm-generic/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_espfix_bsp(void) { }



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 744 "../arch/arm64/include/asm/pgtable.h" 2

void pgd_cache_init(void);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_mmu_cache(struct vm_area_struct *vma,
        unsigned long addr, pte_t *ptep)
{





}
# 23 "../arch/arm64/include/asm/kernel-pgtable.h" 2
# 23 "../arch/arm64/include/asm/uaccess.h" 2
# 36 "../arch/arm64/include/asm/uaccess.h"
# 1 "../arch/arm64/include/asm/extable.h" 1
# 18 "../arch/arm64/include/asm/extable.h"
struct exception_table_entry
{
 int insn, fixup;
};



extern int fixup_exception(struct pt_regs *regs);
# 37 "../arch/arm64/include/asm/uaccess.h" 2




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_fs(mm_segment_t fs)
{
 ((struct thread_info *)get_current())->addr_limit = fs;





 asm volatile("dsb " "nsh" : : : "memory");
 asm volatile("isb" : : : "memory");


 set_ti_thread_flag(((struct thread_info *)get_current()), 5);





 if (1 && fs == (-1UL))
  asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (3) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n");
 else
  asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (3) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n");

}
# 75 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __range_ok(unsigned long addr, unsigned long size)
{
 unsigned long limit = ((struct thread_info *)get_current())->addr_limit;






 if (1 &&
     (get_current()->flags & 0x00200000 || test_ti_thread_flag(((struct thread_info *)get_current()), 24)))
  addr = ({ u64 __addr = ( u64)(addr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(addr))__addr; });

 (void)0;
 asm volatile(


 "	adds	%0, %0, %2\n"

 "	csel	%1, xzr, %1, hi\n"



 "	csinv	%0, %0, xzr, cc\n"



 "	sbcs	xzr, %0, %1\n"
 "	cset	%0, ls\n"
 : "+r" (addr), "+r" (limit) : "Ir" (size) : "cc");

 return addr;
}
# 122 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __uaccess_ttbr0_disable(void)
{
 unsigned long flags, ttbr;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 ttbr = ({ u64 __val; asm volatile("mrs %0, " "ttbr1_el1" : "=r" (__val)); __val; });
 ttbr &= ~((0xffffUL) << 48);

 do { u64 __val = (u64)(ttbr + ((3 - 1) * ((1UL) << 12))); asm volatile("msr " "ttbr0_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");

 do { u64 __val = (u64)(ttbr); asm volatile("msr " "ttbr1_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __uaccess_ttbr0_enable(void)
{
 unsigned long flags, ttbr0, ttbr1;






 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 ttbr0 = ({ union { typeof(((struct thread_info *)get_current())->ttbr0) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->ttbr0), __u.__c, sizeof(((struct thread_info *)get_current())->ttbr0)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->ttbr0), __u.__c, sizeof(((struct thread_info *)get_current())->ttbr0)); do { } while (0); __u.__val; });


 ttbr1 = ({ u64 __val; asm volatile("mrs %0, " "ttbr1_el1" : "=r" (__val)); __val; });
 ttbr1 &= ~((0xffffUL) << 48);
 ttbr1 |= ttbr0 & ((0xffffUL) << 48);
 do { u64 __val = (u64)(ttbr1); asm volatile("msr " "ttbr1_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");


 do { u64 __val = (u64)(ttbr0); asm volatile("msr " "ttbr0_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uaccess_ttbr0_disable(void)
{
 if (!system_uses_ttbr0_pan())
  return false;
 __uaccess_ttbr0_disable();
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool uaccess_ttbr0_enable(void)
{
 if (!system_uses_ttbr0_pan())
  return false;
 __uaccess_ttbr0_enable();
 return true;
}
# 204 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void uaccess_disable(void)
{
 do { if (!uaccess_ttbr0_disable()) asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void uaccess_enable(void)
{
 do { if (!uaccess_ttbr0_enable()) asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"); } while (0);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void uaccess_disable_not_uao(void)
{
 do { if (!uaccess_ttbr0_disable()) asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "10" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void uaccess_enable_not_uao(void)
{
 do { if (!uaccess_ttbr0_enable()) asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "10" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"); } while (0);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__uaccess_mask_ptr(const void *ptr)
{
 void *safe_ptr;

 asm volatile(
 "	bics	xzr, %3, %2\n"
 "	csel	%0, %1, xzr, eq\n"
 : "=&r" (safe_ptr)
 : "r" (ptr), "r" (((struct thread_info *)get_current())->addr_limit),
   "r" (({ u64 __addr = ( u64)(ptr); __addr &= (( __typeof__(__addr))sign_extend64(( u64)(__addr), 55)); ( __typeof__(ptr))__addr; }))
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return safe_ptr;
}
# 397 "../arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((warn_unused_result)) __arch_copy_from_user(void *to, const void *from, unsigned long n);





extern unsigned long __attribute__((warn_unused_result)) __arch_copy_to_user(void *to, const void *from, unsigned long n);





extern unsigned long __attribute__((warn_unused_result)) __arch_copy_in_user(void *to, const void *from, unsigned long n);
# 419 "../arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((warn_unused_result)) __arch_clear_user(void *to, unsigned long n);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __attribute__((warn_unused_result)) __clear_user(void *to, unsigned long n)
{
 if (__range_ok((unsigned long)(to), n))
  n = __arch_clear_user(__uaccess_mask_ptr(to), n);
 return n;
}


extern long strncpy_from_user(char *dest, const char *src, long count);

extern __attribute__((warn_unused_result)) long strnlen_user(const char *str, long n);
# 15 "../include/linux/uaccess.h" 2
# 61 "../include/linux/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
}
# 91 "../include/linux/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
_copy_from_user(void *to, const void *from, unsigned long n)
{
 unsigned long res = n;
 might_fault();
 if (__builtin_expect(!!(__range_ok((unsigned long)(from), n)), 1)) {
  kasan_check_write(to, n);
  res = ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
 }
 if (__builtin_expect(!!(res), 0))
  memset(to + (n - res), 0, res);
 return res;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
_copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (__range_ok((unsigned long)(to), n)) {
  kasan_check_read(from, n);
  n = ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
 }
 return n;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __attribute__((warn_unused_result))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __attribute__((warn_unused_result))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __attribute__((warn_unused_result))
copy_in_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (__range_ok((unsigned long)(to), n) && __range_ok((unsigned long)(from), n))
  n = ({ __arch_copy_in_user(__uaccess_mask_ptr(to), __uaccess_mask_ptr(from), (n)); });
 return n;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 186 "../include/linux/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}
# 225 "../include/linux/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long __copy_from_user_inatomic_nocache(void *to,
    const void *from, unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}
# 242 "../include/linux/uaccess.h"
extern long probe_kernel_read(void *dst, const void *src, size_t size);
extern long __probe_kernel_read(void *dst, const void *src, size_t size);
# 254 "../include/linux/uaccess.h"
extern long __attribute__((no_instrument_function)) probe_kernel_write(void *dst, const void *src, size_t size);
extern long __attribute__((no_instrument_function)) __probe_kernel_write(void *dst, const void *src, size_t size);

extern long strncpy_from_unsafe(char *dst, const void *unsafe_addr, long count);
# 274 "../include/linux/uaccess.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long user_access_save(void) { return 0UL; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void user_access_restore(unsigned long flags) { }
# 26 "../include/net/checksum.h" 2
# 1 "../arch/arm64/include/asm/checksum.h" 1
# 21 "../arch/arm64/include/asm/checksum.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 csum_fold(__wsum csum)
{
 u32 sum = ( u32)csum;
 sum += (sum >> 16) | (sum << 16);
 return ~( __sum16)(sum >> 16);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
{
 __uint128_t tmp;
 u64 sum;

 tmp = *(const __uint128_t *)iph;
 iph += 16;
 ihl -= 4;
 tmp += ((tmp >> 64) | (tmp << 64));
 sum = tmp >> 64;
 do {
  sum += *(const u32 *)iph;
  iph += 4;
 } while (--ihl);

 sum += ((sum >> 32) | (sum << 32));
 return csum_fold(( u32)(sum >> 32));
}


# 1 "../include/asm-generic/checksum.h" 1
# 17 "../include/asm-generic/checksum.h"
extern __wsum csum_partial(const void *buff, int len, __wsum sum);
# 26 "../include/asm-generic/checksum.h"
extern __wsum csum_partial_copy(const void *src, void *dst, int len, __wsum sum);







extern __wsum csum_partial_copy_from_user(const void *src, void *dst,
     int len, __wsum sum, int *csum_err);
# 68 "../include/asm-generic/checksum.h"
extern __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
     __u8 proto, __wsum sum);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16
csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len,
    __u8 proto, __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}






extern __sum16 ip_compute_csum(const void *buff, int len);
# 50 "../arch/arm64/include/asm/checksum.h" 2
# 27 "../include/net/checksum.h" 2


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
__wsum csum_and_copy_from_user (const void *src, void *dst,
          int len, __wsum sum, int *err_ptr)
{
 if (__range_ok((unsigned long)(src), len))
  return csum_partial_copy_from_user(src, dst, len, sum, err_ptr);

 if (len)
  *err_ptr = -14;

 return sum;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum csum_and_copy_to_user
(const void *src, void *dst, int len, __wsum sum, int *err_ptr)
{
 sum = csum_partial(src, len, sum);

 if (__range_ok((unsigned long)(dst), len)) {
  if (copy_to_user(dst, src, len) == 0)
   return sum;
 }
 if (len)
  *err_ptr = -14;

 return ( __wsum)-1;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum csum_add(__wsum csum, __wsum addend)
{
 u32 res = ( u32)csum;
 res += ( u32)addend;
 return ( __wsum)(res + (res < ( u32)addend));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum csum_sub(__wsum csum, __wsum addend)
{
 return csum_add(csum, ~addend);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 csum16_add(__sum16 csum, __be16 addend)
{
 u16 res = ( u16)csum;

 res += ( u16)addend;
 return ( __sum16)(res + (res < ( u16)addend));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
 return csum16_add(csum, ~addend);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum
csum_block_add(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;


 if (offset & 1)
  sum = ror32(sum, 8);

 return csum_add(csum, ( __wsum)sum);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum
csum_block_add_ext(__wsum csum, __wsum csum2, int offset, int len)
{
 return csum_block_add(csum, csum2, offset);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum
csum_block_sub(__wsum csum, __wsum csum2, int offset)
{
 return csum_block_add(csum, ~csum2, offset);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum csum_unfold(__sum16 n)
{
 return ( __wsum)n;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum csum_partial_ext(const void *buff, int len, __wsum sum)
{
 return csum_partial(buff, len, sum);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void csum_replace_by_diff(__sum16 *sum, __wsum diff)
{
 *sum = csum_fold(csum_add(diff, ~csum_unfold(*sum)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
{
 __wsum tmp = csum_sub(~csum_unfold(*sum), ( __wsum)from);

 *sum = csum_fold(csum_add(tmp, ( __wsum)to));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
 *sum = ~csum16_add(csum16_sub(~(*sum), old), new);
}

struct sk_buff;
void inet_proto_csum_replace4(__sum16 *sum, struct sk_buff *skb,
         __be32 from, __be32 to, bool pseudohdr);
void inet_proto_csum_replace16(__sum16 *sum, struct sk_buff *skb,
          const __be32 *from, const __be32 *to,
          bool pseudohdr);
void inet_proto_csum_replace_by_diff(__sum16 *sum, struct sk_buff *skb,
         __wsum diff, bool pseudohdr);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inet_proto_csum_replace2(__sum16 *sum, struct sk_buff *skb,
         __be16 from, __be16 to,
         bool pseudohdr)
{
 inet_proto_csum_replace4(sum, skb, ( __be32)from,
     ( __be32)to, pseudohdr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum remcsum_adjust(void *ptr, __wsum csum,
        int start, int offset)
{
 __sum16 *psum = (__sum16 *)(ptr + offset);
 __wsum delta;


 csum = csum_sub(csum, csum_partial(ptr, start, 0));


 delta = csum_sub(( __wsum)csum_fold(csum),
    ( __wsum)*psum);
 *psum = csum_fold(csum);

 return delta;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void remcsum_unadjust(__sum16 *psum, __wsum delta)
{
 *psum = csum_fold(csum_sub(delta, ( __wsum)*psum));
}
# 32 "../include/linux/skbuff.h" 2


# 1 "../include/linux/dma-mapping.h" 1






# 1 "../include/linux/device.h" 1
# 16 "../include/linux/device.h"
# 1 "../include/linux/ioport.h" 1
# 19 "../include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 127 "../include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_DEVICE_PUBLIC_MEMORY = 7,
};
# 169 "../include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}
# 228 "../include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);






struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern int iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(u64, u64, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(u64, u64, void *));


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}
# 17 "../include/linux/device.h" 2
# 1 "../include/linux/kobject.h" 1
# 21 "../include/linux/kobject.h"
# 1 "../include/linux/sysfs.h" 1
# 16 "../include/linux/sysfs.h"
# 1 "../include/linux/kernfs.h" 1
# 14 "../include/linux/kernfs.h"
# 1 "../include/linux/idr.h" 1
# 19 "../include/linux/idr.h"
struct idr {
 struct radix_tree_root idr_rt;
 unsigned int idr_next;
};
# 47 "../include/linux/idr.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u; if (1) __read_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); else __read_once_size_nocheck(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); do { } while (0); __u.__val; });
}
# 60 "../include/linux/idr.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u = { .__val = ( typeof(idr->idr_next)) (val) }; __write_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); __u.__val; });
}
# 82 "../include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc_cmn(struct idr *idr, void *ptr, unsigned long *index,
    unsigned long start, unsigned long end, gfp_t gfp,
    bool ext);
# 107 "../include/linux/idr.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int idr_alloc(struct idr *idr, void *ptr,
       int start, int end, gfp_t gfp)
{
 unsigned long id;
 int ret;

 if (({ int __ret_warn_on = !!(start < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/idr.h\"; .popsection; .long 2b - 0b; .short 113; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return -22;

 ret = idr_alloc_cmn(idr, ptr, &id, start, end, gfp, false);

 if (ret)
  return ret;

 return id;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int idr_alloc_ext(struct idr *idr, void *ptr,
    unsigned long *index,
    unsigned long start,
    unsigned long end,
    gfp_t gfp)
{
 return idr_alloc_cmn(idr, ptr, index, start, end, gfp, true);
}

int idr_alloc_cyclic(struct idr *, void *entry, int start, int end, gfp_t);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ext(struct idr *idr, unsigned long *nextid);
void *idr_replace(struct idr *, void *, int id);
void *idr_replace_ext(struct idr *idr, void *ptr, unsigned long id);
void idr_destroy(struct idr *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *idr_remove_ext(struct idr *idr, unsigned long id)
{
 return radix_tree_delete_item(&idr->idr_rt, id, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *idr_remove(struct idr *idr, int id)
{
 return idr_remove_ext(idr, id);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void idr_init(struct idr *idr)
{
 do { (&idr->idr_rt)->gfp_mask = ((( gfp_t)(3 << 27))); (&idr->idr_rt)->rnode = ((void *)0); } while (0);
 idr->idr_next = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void idr_preload_end(void)
{
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0);
}
# 187 "../include/linux/idr.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *idr_find_ext(const struct idr *idr, unsigned long id)
{
 return radix_tree_lookup(&idr->idr_rt, id);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *idr_find(const struct idr *idr, int id)
{
 return idr_find_ext(idr, id);
}
# 234 "../include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct ida_bitmap *) ida_bitmap;

struct ida {
 struct radix_tree_root ida_rt;
};






int ida_pre_get(struct ida *ida, gfp_t gfp_mask);
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id);
void ida_remove(struct ida *ida, int id);
void ida_destroy(struct ida *ida);

int ida_simple_get(struct ida *ida, unsigned int start, unsigned int end,
     gfp_t gfp_mask);
void ida_simple_remove(struct ida *ida, unsigned int id);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ida_init(struct ida *ida)
{
 do { (&ida->ida_rt)->gfp_mask = ((( gfp_t)(3 << 27)) | ((( gfp_t)0x1000000u))); (&ida->ida_rt)->rnode = ((void *)0); } while (0);
}
# 270 "../include/linux/idr.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ida_get_new(struct ida *ida, int *p_id)
{
 return ida_get_new_above(ida, 0, p_id);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ida_is_empty(const struct ida *ida)
{
 return radix_tree_empty(&ida->ida_rt);
}
# 15 "../include/linux/kernfs.h" 2





struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;

struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};




enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 72 "../include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};


union kernfs_node_id {
 struct {






  u32 ino;
  u32 generation;
 };
 u64 id;
};
# 129 "../include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 141 "../include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;

 union kernfs_node_id id;
 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 169 "../include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*remount_fs)(struct kernfs_root *root, int *flags, char *data);
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_ino;
 u32 next_generation;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 238 "../include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 254 "../include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 unsigned int (*poll)(struct kernfs_open_file *of,
        struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}
# 290 "../include/linux/kernfs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/kernfs.h\"; .popsection; .long 2b - 0b; .short 292; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ union { typeof((&kn->dir.children)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); else __read_once_size_nocheck(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/kernfs.h\"; .popsection; .long 2b - 0b; .short 293; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name,
      umode_t mode, loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
unsigned int kernfs_generic_poll(struct kernfs_open_file *of,
     struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

const void *kernfs_super_ns(struct super_block *sb);
struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
          struct kernfs_root *root, unsigned long magic,
          bool *new_sb_created, const void *ns);
void kernfs_kill_sb(struct super_block *sb);
struct super_block *kernfs_pin_sb(struct kernfs_root *root, const void *ns);

void kernfs_init(void);

struct kernfs_node *kernfs_get_node_by_id(struct kernfs_root *root,
 const union kernfs_node_id *id);
# 487 "../include/linux/kernfs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode, priv, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, size, ops, priv, ns,
        key);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode, size, ops, priv, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *
kernfs_mount(struct file_system_type *fs_type, int flags,
  struct kernfs_root *root, unsigned long magic,
  bool *new_sb_created)
{
 return kernfs_mount_ns(fs_type, flags, root,
    magic, new_sb_created, ((void *)0));
}
# 17 "../include/linux/sysfs.h" 2




# 1 "../include/linux/kobject_ns.h" 1
# 20 "../include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 40 "../include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "../include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "../include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 159 "../include/linux/sysfs.h"
struct file;
struct vm_area_struct;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 216 "../include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((warn_unused_result)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((warn_unused_result)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((warn_unused_result)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((warn_unused_result)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((warn_unused_result)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((warn_unused_result)) sysfs_create_files(struct kobject *kobj,
       const struct attribute **attr);
int __attribute__((warn_unused_result)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute **attr);

int __attribute__((warn_unused_result)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((warn_unused_result)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((warn_unused_result)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((warn_unused_result)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((warn_unused_result)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
          struct kobject *target_kobj,
          const char *target_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((warn_unused_result)) sysfs_init(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

__attribute__((format(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((format(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 528 "../include/linux/sysfs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 22 "../include/linux/kobject.h" 2


# 1 "../include/linux/kref.h" 1
# 21 "../include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 67 "../include/linux/kref.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 114 "../include/linux/kref.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 25 "../include/linux/kobject.h" 2
# 42 "../include/linux/kobject.h"
extern char uevent_helper[];



extern u64 uevent_seqnum;
# 58 "../include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
 KOBJ_MAX
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((format(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((format(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((format(printf, 3, 4))) __attribute__((warn_unused_result))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((format(printf, 4, 5))) __attribute__((warn_unused_result))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((warn_unused_result)) kobject_create(void);
extern struct kobject * __attribute__((warn_unused_result)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((warn_unused_result)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((warn_unused_result)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((warn_unused_result)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 135 "../include/linux/kobject.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/kobject.h\"; .popsection; .long 2b - 0b; .short 137; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[128];
 int envp_idx;
 char buf[4096];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 194 "../include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((warn_unused_result)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((warn_unused_result)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void)))); extern void __compiletime_assert_69(void) ; if (__cond) __compiletime_assert_69(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((format(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 18 "../include/linux/device.h" 2
# 1 "../include/linux/klist.h" 1
# 19 "../include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 36 "../include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 19 "../include/linux/device.h" 2





# 1 "../include/linux/pinctrl/devinfo.h" 1
# 21 "../include/linux/pinctrl/devinfo.h"
# 1 "../include/linux/pinctrl/consumer.h" 1
# 17 "../include/linux/pinctrl/consumer.h"
# 1 "../include/linux/seq_file.h" 1
# 12 "../include/linux/seq_file.h"
# 1 "../include/linux/cred.h" 1
# 17 "../include/linux/cred.h"
# 1 "../include/linux/key.h" 1
# 22 "../include/linux/key.h"
# 1 "../include/linux/sysctl.h" 1
# 30 "../include/linux/sysctl.h"
# 1 "../include/uapi/linux/sysctl.h" 1
# 35 "../include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_BOOT_REASON=78,
 KERN_COLD_BOOT=79,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
 NET_IPV4_CONF_NF_IPV4_DEFRAG_SKIP = 23,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT=1
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};


enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "../include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec_minmax(struct ctl_table *table, int write,
     void *buffer, size_t *lenp,
     loff_t *ppos);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec_capacity(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);
# 98 "../include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)({ union { typeof((&poll->event)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&poll->event)->counter), __u.__c, sizeof((&poll->event)->counter)); else __read_once_size_nocheck(&((&poll->event)->counter), __u.__c, sizeof((&poll->event)->counter)); do { } while (0); __u.__val; });
}
# 116 "../include/linux/sysctl.h"
struct ctl_table
{
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header
{
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);

extern struct ctl_table sysctl_mount_point[];
# 236 "../include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write,
         void *buffer, size_t *lenp, loff_t *ppos);
# 23 "../include/linux/key.h" 2


# 1 "../include/linux/assoc_array.h" 1
# 26 "../include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 26 "../include/linux/key.h" 2






typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
# 77 "../include/linux/key.h"
struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct keyring_list;
struct keyring_name;

struct keyring_index_key {
 struct key_type *type;
 const char *description;
 size_t desc_len;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 112 "../include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 154 "../include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time_t expiry;
  time_t revoked_at;
 };
 time_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 201 "../include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   struct key_type *type;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 233 "../include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 252 "../include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct key *__key_get(struct key *key)
{
 refcount_inc(&key->usage);
 return key;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         const void *callout_info,
         size_t callout_len,
         void *aux);

extern struct key *request_key_async(struct key_type *type,
         const char *description,
         const void *callout_info,
         size_t callout_len);

extern struct key *request_key_async_with_auxdata(struct key_type *type,
        const char *description,
        const void *callout_info,
        size_t callout_len,
        void *aux);

extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     key_perm_t perm);
# 362 "../include/linux/key.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) short key_read_state(const struct key *key)
{

 return ({ union { typeof(*&key->state) __val; char __c[1]; } __u; do { bool __cond = !((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long))); extern void __compiletime_assert_70(void) ; if (__cond) __compiletime_assert_70(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); switch (sizeof(*&key->state)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*&key->state) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*&key->state) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*&key->state) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*&key->state) : "memory"); break; } __u.__val; });
}
# 375 "../include/linux/key.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 398 "../include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct task_struct *tsk);
extern void key_fsgid_changed(struct task_struct *tsk);
extern void key_init(void);
# 18 "../include/linux/cred.h" 2
# 1 "../include/linux/selinux.h" 1
# 17 "../include/linux/selinux.h"
struct selinux_audit_rule;
struct audit_context;
struct kern_ipc_perm;






bool selinux_is_enabled(void);
# 19 "../include/linux/cred.h" 2



# 1 "../include/linux/sched/user.h" 1







struct key;




struct user_struct {
 atomic_t __count;
 atomic_t processes;
 atomic_t sigpending;




 atomic_long_t epoll_watches;





 unsigned long locked_shm;
 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct key *uid_keyring;
 struct key *session_keyring;



 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;

};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct user_struct *get_uid(struct user_struct *u)
{
 atomic_add(1, (&u->__count));
 return u;
}
extern void free_uid(struct user_struct *);
# 23 "../include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[0];
} ;
# 45 "../include/linux/cred.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_add(1, (&gi->usage));
 return gi;
}
# 61 "../include/linux/cred.h"
extern struct group_info init_groups;

extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
# 82 "../include/linux/cred.h"
extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern int groups_search(const struct group_info *, kgid_t);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 111 "../include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern void __attribute__ ((__section__(".init.text"))) cred_init(void);
# 202 "../include/linux/cred.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void validate_process_creds(void)
{
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 227 "../include/linux/cred.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_add(1, (&cred->usage));
 return cred;
}
# 246 "../include/linux/cred.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}
# 265 "../include/linux/cred.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 validate_creds(cred);
 if ((atomic_sub_return(1, (&(cred)->usage)) == 0))
  __put_cred(cred);
}
# 374 "../include/linux/cred.h"
extern struct user_namespace init_user_ns;



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct user_namespace *current_user_ns(void)
{
 return &init_user_ns;
}
# 13 "../include/linux/seq_file.h" 2

struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "../include/linux/seq_file.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "../include/linux/seq_file.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/seq_file.h\"; .popsection; .long 2b - 0b; .short 66; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "../include/linux/seq_file.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/seq_file.h\"; .popsection; .long 2b - 0b; .short 89; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 102 "../include/linux/seq_file.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((format(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((format(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_escape(struct seq_file *m, const char *s, const char *esc);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);
# 157 "../include/linux/seq_file.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{



 extern struct user_namespace init_user_ns;
 return &init_user_ns;

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 207 "../include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);
# 18 "../include/linux/pinctrl/consumer.h" 2
# 1 "../include/linux/pinctrl/pinctrl-state.h" 1
# 19 "../include/linux/pinctrl/consumer.h" 2


struct pinctrl;
struct pinctrl_state;
struct device;




extern int pinctrl_request_gpio(unsigned gpio);
extern void pinctrl_free_gpio(unsigned gpio);
extern int pinctrl_gpio_direction_input(unsigned gpio);
extern int pinctrl_gpio_direction_output(unsigned gpio);
extern int pinctrl_gpio_set_config(unsigned gpio, unsigned long config);

extern struct pinctrl * __attribute__((warn_unused_result)) pinctrl_get(struct device *dev);
extern void pinctrl_put(struct pinctrl *p);
extern struct pinctrl_state * __attribute__((warn_unused_result)) pinctrl_lookup_state(
       struct pinctrl *p,
       const char *name);
extern int pinctrl_select_state(struct pinctrl *p, struct pinctrl_state *s);

extern struct pinctrl * __attribute__((warn_unused_result)) devm_pinctrl_get(struct device *dev);
extern void devm_pinctrl_put(struct pinctrl *p);


extern int pinctrl_pm_select_default_state(struct device *dev);
extern int pinctrl_pm_select_sleep_state(struct device *dev);
extern int pinctrl_pm_select_idle_state(struct device *dev);
# 137 "../include/linux/pinctrl/consumer.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pinctrl * __attribute__((warn_unused_result)) pinctrl_get_select(
     struct device *dev, const char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  pinctrl_put(p);
  return ERR_CAST(s);
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pinctrl * __attribute__((warn_unused_result)) pinctrl_get_select_default(
     struct device *dev)
{
 return pinctrl_get_select(dev, "default");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pinctrl * __attribute__((warn_unused_result)) devm_pinctrl_get_select(
     struct device *dev, const char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = devm_pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  devm_pinctrl_put(p);
  return ERR_CAST(s);
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  devm_pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pinctrl * __attribute__((warn_unused_result)) devm_pinctrl_get_select_default(
     struct device *dev)
{
 return devm_pinctrl_get_select(dev, "default");
}
# 22 "../include/linux/pinctrl/devinfo.h" 2
# 31 "../include/linux/pinctrl/devinfo.h"
struct dev_pin_info {
 struct pinctrl *p;
 struct pinctrl_state *default_state;
 struct pinctrl_state *init_state;

 struct pinctrl_state *sleep_state;
 struct pinctrl_state *idle_state;

};

extern int pinctrl_bind_pins(struct device *dev);
extern int pinctrl_init_done(struct device *dev);
# 25 "../include/linux/device.h" 2
# 1 "../include/linux/pm.h" 1
# 34 "../include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pm_vt_switch_required(struct device *dev, bool required)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pm_vt_switch_unregister(struct device *dev)
{
}






struct device;


extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 290 "../include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 508 "../include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 530 "../include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 struct list_head clock_list;


 struct pm_domain_data *domain_data;

};

struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;




 struct timer_list suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 unsigned long last_busy;
 unsigned long active_jiffies;
 unsigned long suspended_jiffies;
 unsigned long accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern void update_pm_runtime_accounting(struct device *dev);
extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 627 "../include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 690 "../include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_noirq_resume_devices(pm_message_t state);
extern void dpm_noirq_end(void);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern void dpm_noirq_begin(void);
extern int dpm_noirq_suspend_devices(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);
extern void pm_complete_with_resume_check(struct device *dev);
# 786 "../include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "../include/linux/device.h" 2

# 1 "../include/linux/ratelimit.h" 1
# 25 "../include/linux/ratelimit.h"
struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 50 "../include/linux/ratelimit.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { 0 , 0 }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 100),
     10);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & (1UL << (0))))
  return;

 if (rs->missed) {
  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed);

  rs->missed = 0;
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 28 "../include/linux/device.h" 2


# 1 "../arch/arm64/include/asm/device.h" 1
# 19 "../arch/arm64/include/asm/device.h"
struct dev_archdata {

 void *iommu;




 bool dma_coherent;

 struct dma_iommu_mapping *mapping;

};

struct pdev_archdata {
};
# 31 "../include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct iommu_fwspec;

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 61 "../include/linux/device.h"
extern int __attribute__((warn_unused_result)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
# 112 "../include/linux/device.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;
};

extern int __attribute__((warn_unused_result)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((warn_unused_result)) bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          void *data,
          int (*match)(struct device *dev, void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name);
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 204 "../include/linux/device.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 229 "../include/linux/device.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 268 "../include/linux/device.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;

 const struct dev_pm_ops *pm;

 struct driver_private *p;
};


extern int __attribute__((warn_unused_result)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);




struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 319 "../include/linux/device.h"
extern int __attribute__((warn_unused_result)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((warn_unused_result)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, void *data,
      int (*match)(struct device *dev, void *data));
# 346 "../include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 391 "../include/linux/device.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);
 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((warn_unused_result)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 436 "../include/linux/device.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));

struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 473 "../include/linux/device.h"
extern int __attribute__((warn_unused_result)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 505 "../include/linux/device.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((warn_unused_result)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((warn_unused_result)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 541 "../include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 600 "../include/linux/device.h"
extern int device_create_file(struct device *device,
         const struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          const struct device_attribute *attr);
extern bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
extern int __attribute__((warn_unused_result)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);
# 623 "../include/linux/device.h"
extern void *devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
          int nid) __attribute__((__malloc__));
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
{
 return devres_alloc_node(release, size, gfp, (-1));
}


extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * __attribute__((warn_unused_result)) devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 0)))
char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
        va_list ap) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 4)))
char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x8000u));
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 return devm_kmalloc(dev, n * size, flags);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x8000u));
}
extern void devm_kfree(struct device *dev, void *p);
extern char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
extern void *devm_kmemdup(struct device *dev, const void *src, size_t len,
     gfp_t gfp);

extern unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
extern void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 721 "../include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;
};
# 743 "../include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 776 "../include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 enum device_link_state status;
 u32 flags;
 bool rpm_active;

 struct callback_head callback_head;

};
# 796 "../include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};







struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 enum dl_dev_state status;
};
# 891 "../include/linux/device.h"
struct device {
 struct device *parent;

 struct device_private *p;

 struct kobject kobj;
 const char *init_name;
 const struct device_type *type;

 struct mutex mutex;



 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;

 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct irq_domain *msi_domain;


 struct dev_pin_info *pins;


 struct list_head msi_list;





 const struct dma_map_ops *dma_ops;
 u64 *dma_mask;
 u64 coherent_dma_mask;




 unsigned long dma_pfn_offset;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;

 struct dma_coherent_mem *dma_mem;


 struct cma *cma_area;


 struct removed_region *removed_mem;

 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct klist_node knode_class;
 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct iommu_fwspec *iommu_fwspec;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void)))); extern void __compiletime_assert_71(void) ; if (__cond) __compiletime_assert_71(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}


# 1 "../include/linux/pm_wakeup.h" 1
# 31 "../include/linux/pm_wakeup.h"
struct wake_irq;
# 56 "../include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;



 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}


extern void wakeup_source_prepare(struct wakeup_source *ws, const char *name);
extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_drop(struct wakeup_source *ws);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 202 "../include/linux/pm_wakeup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void wakeup_source_init(struct wakeup_source *ws,
          const char *name)
{
 wakeup_source_prepare(ws, name);
 wakeup_source_add(ws);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void wakeup_source_trash(struct wakeup_source *ws)
{
 wakeup_source_remove(ws);
 wakeup_source_drop(ws);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 980 "../include/linux/device.h" 2

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((format(printf, 2, 3)))
int dev_set_name(struct device *dev, const char *name, ...);
# 1003 "../include/linux/device.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dev_to_node(struct device *dev)
{
 return -1;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_dev_node(struct device *dev, int node)
{
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1)
  return ((void *)0);
 return dev->of_node;
}

void driver_init(void);




extern int __attribute__((warn_unused_result)) device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int __attribute__((warn_unused_result)) device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern int device_for_each_child_reverse(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern int device_rename(struct device *dev, const char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern const char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          const char **tmp);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern void lock_device_hotplug_assert(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);
extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




extern struct device *__root_device_register(const char *name,
          struct module *owner);





extern void root_device_unregister(struct device *root);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





extern int __attribute__((warn_unused_result)) device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int __attribute__((warn_unused_result)) device_attach(struct device *dev);
extern int __attribute__((warn_unused_result)) driver_attach(struct device_driver *drv);
extern void device_initial_probe(struct device *dev);
extern int __attribute__((warn_unused_result)) device_reprobe(struct device *dev);

extern bool device_is_bound(struct device *dev);




extern __attribute__((format(printf, 5, 0)))
struct device *device_create_vargs(struct class *cls, struct device *parent,
       dev_t devt, void *drvdata,
       const char *fmt, va_list vargs);
extern __attribute__((format(printf, 5, 6)))
struct device *device_create(struct class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        const char *fmt, ...);
extern __attribute__((format(printf, 6, 7)))
struct device *device_create_with_groups(struct class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        const struct attribute_group **groups,
        const char *fmt, ...);
extern void device_destroy(struct class *cls, dev_t devt);

extern int __attribute__((warn_unused_result)) device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __attribute__((warn_unused_result)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

extern int __attribute__((warn_unused_result)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
extern int __attribute__((warn_unused_result)) devm_device_add_group(struct device *dev,
     const struct attribute_group *grp);
extern void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int devtmpfs_create_node(struct device *dev) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int devtmpfs_delete_node(struct device *dev) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int devtmpfs_mount(const char *mountpoint) { return 0; }



extern void device_shutdown(void);


extern const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);



extern __attribute__((format(printf, 3, 0)))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

extern __attribute__((format(printf, 3, 4)))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_emerg(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_alert(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_crit(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_err(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_warn(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_notice(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 8 "../include/linux/dma-mapping.h" 2

# 1 "../include/linux/dma-debug.h" 1
# 25 "../include/linux/dma-debug.h"
struct device;
struct scatterlist;
struct bus_type;
# 99 "../include/linux/dma-debug.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_debug_add_bus(struct bus_type *bus)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_debug_init(u32 num_entries)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_debug_resize_entries(u32 num_entries)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          int direction, dma_addr_t dma_addr,
          bool map_single)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_mapping_error(struct device *dev,
       dma_addr_t dma_addr)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
     size_t size, int direction,
     bool map_single)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_map_sg(struct device *dev, struct scatterlist *sg,
        int nents, int mapped_ents, int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_unmap_sg(struct device *dev,
          struct scatterlist *sglist,
          int nelems, int dir)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_alloc_coherent(struct device *dev, size_t size,
         dma_addr_t dma_addr, void *virt)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_free_coherent(struct device *dev, size_t size,
        void *virt, dma_addr_t addr)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_map_resource(struct device *dev, phys_addr_t addr,
       size_t size, int direction,
       dma_addr_t dma_addr)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_unmap_resource(struct device *dev,
         dma_addr_t dma_addr, size_t size,
         int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_single_for_cpu(struct device *dev,
       dma_addr_t dma_handle,
       size_t size, int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_single_for_device(struct device *dev,
          dma_addr_t dma_handle,
          size_t size, int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_single_range_for_cpu(struct device *dev,
             dma_addr_t dma_handle,
             unsigned long offset,
             size_t size,
             int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_single_range_for_device(struct device *dev,
         dma_addr_t dma_handle,
         unsigned long offset,
         size_t size,
         int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_sg_for_cpu(struct device *dev,
          struct scatterlist *sg,
          int nelems, int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_sync_sg_for_device(struct device *dev,
      struct scatterlist *sg,
      int nelems, int direction)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_dump_mappings(struct device *dev)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void debug_dma_assert_idle(struct page *page)
{
}
# 10 "../include/linux/dma-mapping.h" 2
# 1 "../include/linux/dma-direction.h" 1







enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};
# 11 "../include/linux/dma-mapping.h" 2
# 1 "../include/linux/scatterlist.h" 1







# 1 "../include/linux/mm.h" 1
# 18 "../include/linux/mm.h"
# 1 "../include/linux/range.h" 1




struct range {
 u64 start;
 u64 end;
};

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 19 "../include/linux/mm.h" 2

# 1 "../include/linux/percpu-refcount.h" 1
# 55 "../include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {






 PERCPU_REF_INIT_ATOMIC = 1 << 0,





 PERCPU_REF_INIT_DEAD = 1 << 1,
};

struct percpu_ref {
 atomic_long_t count;




 unsigned long percpu_count_ptr;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 struct callback_head rcu;
};

int __attribute__((warn_unused_result)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_reinit(struct percpu_ref *ref);
# 119 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 143 "../include/linux/percpu-refcount.h"
 percpu_ptr = ({ union { typeof(ref->percpu_count_ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); else __read_once_size_nocheck(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); do { } while (0); __u.__val; });


 do { } while (0);







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 170 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (nr), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (nr), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (nr), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (nr), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->count);

 rcu_read_unlock_sched();
}
# 192 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 206 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = (({ typeof((((atomic64_t *)(&ref->count)))->counter) c, old; c = ({ union { typeof((((atomic64_t *)(&ref->count)))->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((((atomic64_t *)(&ref->count)))->counter), __u.__c, sizeof((((atomic64_t *)(&ref->count)))->counter)); else __read_once_size_nocheck(&((((atomic64_t *)(&ref->count)))->counter), __u.__c, sizeof((((atomic64_t *)(&ref->count)))->counter)); do { } while (0); __u.__val; }); while (c != (0) && (old = ({ __typeof__(*(&(((((atomic64_t *)(&ref->count))))->counter))) __ret; __ret = (__typeof__(*(&(((((atomic64_t *)(&ref->count))))->counter)))) __cmpxchg_mb((&(((((atomic64_t *)(&ref->count))))->counter)), (unsigned long)((c)), (unsigned long)((c + (1))), sizeof(*(&(((((atomic64_t *)(&ref->count))))->counter)))); __ret; })) != c) c = old; c; }) != 0);
 }

 rcu_read_unlock_sched();

 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = (({ typeof((((atomic64_t *)(&ref->count)))->counter) c, old; c = ({ union { typeof((((atomic64_t *)(&ref->count)))->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((((atomic64_t *)(&ref->count)))->counter), __u.__c, sizeof((((atomic64_t *)(&ref->count)))->counter)); else __read_once_size_nocheck(&((((atomic64_t *)(&ref->count)))->counter), __u.__c, sizeof((((atomic64_t *)(&ref->count)))->counter)); do { } while (0); __u.__val; }); while (c != (0) && (old = ({ __typeof__(*(&(((((atomic64_t *)(&ref->count))))->counter))) __ret; __ret = (__typeof__(*(&(((((atomic64_t *)(&ref->count))))->counter)))) __cmpxchg_mb((&(((((atomic64_t *)(&ref->count))))->counter)), (unsigned long)((c)), (unsigned long)((c + (1))), sizeof(*(&(((((atomic64_t *)(&ref->count))))->counter)))); __ret; })) != c) c = old; c; }) != 0);
 }

 return ret;
}
# 255 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 bool ret;

 rcu_read_lock_sched();
 ret = __percpu_ref_tryget_live(ref);
 rcu_read_unlock_sched();

 return ret;
}
# 276 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*percpu_count))(nr)), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*percpu_count))(nr)), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*percpu_count))(nr)), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*percpu_count) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*percpu_count))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*percpu_count))(nr)), sizeof(*percpu_count)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->count)), 0))
  ref->release(ref);

 rcu_read_unlock_sched();
}
# 299 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 313 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 326 "../include/linux/percpu-refcount.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool percpu_ref_is_zero(struct percpu_ref *ref)
{
 unsigned long *percpu_count;

 if (__ref_is_percpu(ref, &percpu_count))
  return false;
 return !atomic_long_read(&ref->count);
}
# 21 "../include/linux/mm.h" 2



# 1 "../include/linux/page_ext.h" 1





# 1 "../include/linux/stacktrace.h" 1






struct task_struct;
struct pt_regs;


struct stack_trace {
 unsigned int nr_entries, max_entries;
 unsigned long *entries;
 int skip;
};

extern void save_stack_trace(struct stack_trace *trace);
extern void save_stack_trace_regs(struct pt_regs *regs,
      struct stack_trace *trace);
extern void save_stack_trace_tsk(struct task_struct *tsk,
    struct stack_trace *trace);
extern int save_stack_trace_tsk_reliable(struct task_struct *tsk,
      struct stack_trace *trace);

extern void print_stack_trace(struct stack_trace *trace, int spaces);
extern int snprint_stack_trace(char *buf, size_t size,
   struct stack_trace *trace, int spaces);
# 7 "../include/linux/page_ext.h" 2
# 1 "../include/linux/stackdepot.h" 1
# 24 "../include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

struct stack_trace;

depot_stack_handle_t depot_save_stack(struct stack_trace *trace, gfp_t flags);

void depot_fetch_stack(depot_stack_handle_t handle, struct stack_trace *trace);
# 8 "../include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 29 "../include/linux/page_ext.h"
enum page_ext_flags {
 PAGE_EXT_DEBUG_POISON,
 PAGE_EXT_DEBUG_GUARD,
 PAGE_EXT_OWNER,




};
# 46 "../include/linux/page_ext.h"
struct page_ext {
 unsigned long flags;
};

extern void pgdat_page_ext_init(struct pglist_data *pgdat);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ext_init_flatmem(void)
{
}
extern void page_ext_init(void);







struct page_ext *lookup_page_ext(struct page *page);
# 25 "../include/linux/mm.h" 2

# 1 "../include/linux/page_ref.h" 1






# 1 "../include/linux/page-flags.h" 1
# 75 "../include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,
# 110 "../include/linux/page-flags.h"
 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_private_2,


 PG_isolated = PG_reclaim,
};



struct page;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *compound_head(struct page *page)
{
 unsigned long head = ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; });

 if (__builtin_expect(!!(head & 1), 0))
  return (struct page *) (head - 1);
 return page;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageTail(struct page *page)
{
 return ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; }) & 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageCompound(struct page *page)
{
 return test_bit(PG_head, &page->flags) || PageTail(page);
}
# 266 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageLocked(struct page *page) { return test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); page;})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageError(struct page *page) { return test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReferenced(struct page *page) { return test_bit(PG_referenced, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &compound_head(page)->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageDirty(struct page *page) { return test_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &compound_head(page)->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageLRU(struct page *page) { return test_bit(PG_lru, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &compound_head(page)->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageActive(struct page *page) { return test_bit(PG_active, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageActive(struct page *page) { set_bit(PG_active, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &compound_head(page)->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &compound_head(page)->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSlab(struct page *page) { return test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageChecked(struct page *page) { return test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); };
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); };

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePrivate(struct page *page) { return test_bit(PG_private, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &page->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &page->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &page->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &page->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &page->flags); }





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageReadahead(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); page;})->flags); }
# 327 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void SetPageHighMem(struct page *page) { } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageSwapCache(struct page *page)
{



 return PageSwapBacked(page) && test_bit(PG_swapcache, &page->flags);

}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &compound_head(page)->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &compound_head(page)->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &compound_head(page)->flags); }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }
# 361 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void SetPageUncached(struct page *page) { } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ClearPageUncached(struct page *page) { }







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ClearPageHWPoison(struct page *page) { }
# 402 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageAnon(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & 0x1) != 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 433 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageKsm(const struct page *page) { return 0; }


u64 stable_page_flags(struct page *page);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageUptodate(struct page *page)
{
 int ret;
 page = compound_head(page);
 ret = test_bit(PG_uptodate, &(page)->flags);
# 451 "../include/linux/page-flags.h"
 if (ret)
  asm volatile("dmb " "ishld" : : : "memory");

 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 asm volatile("dmb " "ishst" : : : "memory");
 __set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));





 asm volatile("dmb " "ishst" : : : "memory");
 set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); compound_head(page);})->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageHead(struct page *page) { return test_bit(PG_head, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &page->flags); }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void set_compound_head(struct page *page, struct page *head)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) ((unsigned long)head + 1) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_compound_head(struct page *page)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) (0) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}
# 523 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageHuge(const struct page *page) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageHeadHuge(const struct page *page) { return 0; }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool page_huge_active(struct page *page)
{
 return 0;
}
# 647 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageTransHuge(const struct page *page) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageTransCompound(const struct page *page) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageTransCompoundMap(const struct page *page) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageTransTail(const struct page *page) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageDoubleMap(const struct page *page) { return 0; } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void SetPageDoubleMap(struct page *page) { } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ClearPageDoubleMap(struct page *page) { }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int TestSetPageDoubleMap(struct page *page) { return 0; }
 static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int TestClearPageDoubleMap(struct page *page) { return 0; }
# 685 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageBuddy(struct page *page) { return ({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) == (-128); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) != -1)))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) (((-128))) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) ((-1)) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); }






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageBalloon(struct page *page) { return ({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) == (-256); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageBalloon(struct page *page) { ((void)(sizeof(( long)(({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) != -1)))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) (((-256))) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageBalloon(struct page *page) { ((void)(sizeof(( long)(!PageBalloon(page))))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) ((-1)) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); }






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageKmemcg(struct page *page) { return ({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) == (-512); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageKmemcg(struct page *page) { ((void)(sizeof(( long)(({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) != -1)))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) (((-512))) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageKmemcg(struct page *page) { ((void)(sizeof(( long)(!PageKmemcg(page))))); ({ union { typeof(((&page->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_mapcount)->counter))) ((-1)) }; __write_once_size(&(((&page->_mapcount)->counter)), __u.__c, sizeof(((&page->_mapcount)->counter))); __u.__val; }); }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int PageIsolated(struct page *page) { return test_bit(PG_isolated, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &page->flags); } static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &page->flags); };





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 770 "../include/linux/page-flags.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 8 "../include/linux/page_ref.h" 2
# 1 "../include/linux/tracepoint-defs.h" 1
# 12 "../include/linux/tracepoint-defs.h"
# 1 "../include/linux/static_key.h" 1
# 13 "../include/linux/tracepoint-defs.h" 2

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};
# 9 "../include/linux/page_ref.h" 2

extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "../include/linux/page_ref.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_count(struct page *page)
{
 return ({ union { typeof((&page->_refcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_refcount)->counter), __u.__c, sizeof((&page->_refcount)->counter)); else __read_once_size_nocheck(&((&page->_refcount)->counter), __u.__c, sizeof((&page->_refcount)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_count(struct page *page)
{
 return ({ union { typeof((&compound_head(page)->_refcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&compound_head(page)->_refcount)->counter), __u.__c, sizeof((&compound_head(page)->_refcount)->counter)); else __read_once_size_nocheck(&((&compound_head(page)->_refcount)->counter), __u.__c, sizeof((&compound_head(page)->_refcount)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_count(struct page *page, int v)
{
 ({ union { typeof(((&page->_refcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_refcount)->counter))) ((v)) }; __write_once_size(&(((&page->_refcount)->counter)), __u.__c, sizeof(((&page->_refcount)->counter))); __u.__val; });
 if (false)
  __page_ref_set(page, v);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ref_inc(struct page *page)
{
 atomic_add(1, (&page->_refcount));
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ref_dec(struct page *page)
{
 atomic_sub(1, (&page->_refcount));
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = (atomic_sub_return((nr), (&page->_refcount)) == 0);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_add_return(1, (&page->_refcount));

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_dec_and_test(struct page *page)
{
 int ret = (atomic_sub_return(1, (&page->_refcount)) == 0);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_sub_return(1, (&page->_refcount));

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_add_unless(struct page *page, int nr, int u)
{
 int ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(({ __typeof__(*(&((&page->_refcount)->counter))) __ret; __ret = (__typeof__(*(&((&page->_refcount)->counter)))) __cmpxchg_mb((&((&page->_refcount)->counter)), (unsigned long)((count)), (unsigned long)((0)), sizeof(*(&((&page->_refcount)->counter)))); __ret; }) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 asm volatile("dmb " "ish" : : : "memory");
 ({ union { typeof(((&page->_refcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&page->_refcount)->counter))) ((count)) }; __write_once_size(&(((&page->_refcount)->counter)), __u.__c, sizeof(((&page->_refcount)->counter))); __u.__val; });
 if (false)
  __page_ref_unfreeze(page, count);
}
# 27 "../include/linux/mm.h" 2
# 1 "../include/linux/memremap.h" 1



# 1 "../include/linux/mm.h" 1
# 5 "../include/linux/memremap.h" 2





struct resource;
struct device;
# 21 "../include/linux/memremap.h"
struct vmem_altmap {
 const unsigned long base_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};

unsigned long vmem_altmap_offset(struct vmem_altmap *altmap);
void vmem_altmap_free(struct vmem_altmap *altmap, unsigned long nr_pfns);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct vmem_altmap *to_vmem_altmap(unsigned long memmap_start)
{
 return ((void *)0);
}
# 69 "../include/linux/memremap.h"
enum memory_type {
 MEMORY_DEVICE_HOST = 0,
 MEMORY_DEVICE_PRIVATE,
 MEMORY_DEVICE_PUBLIC,
};
# 107 "../include/linux/memremap.h"
typedef int (*dev_page_fault_t)(struct vm_area_struct *vma,
    unsigned long addr,
    const struct page *page,
    unsigned int flags,
    pmd_t *pmdp);
typedef void (*dev_page_free_t)(struct page *page, void *data);
# 125 "../include/linux/memremap.h"
struct dev_pagemap {
 dev_page_fault_t page_fault;
 dev_page_free_t page_free;
 struct vmem_altmap *altmap;
 const struct resource *res;
 struct percpu_ref *ref;
 struct device *dev;
 void *data;
 enum memory_type type;
};
# 143 "../include/linux/memremap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *devm_memremap_pages(struct device *dev,
  struct resource *res, struct percpu_ref *ref,
  struct vmem_altmap *altmap)
{





 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/memremap.h\"; .popsection; .long 2b - 0b; .short 152; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dev_pagemap *find_dev_pagemap(resource_size_t phys)
{
 return ((void *)0);
}
# 184 "../include/linux/memremap.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 const struct resource *res = pgmap ? pgmap->res : ((void *)0);
 resource_size_t phys = ((phys_addr_t)(pfn) << 12);





 if (res && phys >= res->start && phys <= res->end) {
  percpu_ref_get(pgmap->ref);
  return pgmap;
 }


 rcu_read_lock();
 pgmap = find_dev_pagemap(phys);
 if (pgmap && !percpu_ref_tryget_live(pgmap->ref))
  pgmap = ((void *)0);
 rcu_read_unlock();

 return pgmap;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 28 "../include/linux/mm.h" 2

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct bdi_writeback;

void init_mm_internals(void);


extern unsigned long max_mapnr;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_max_mapnr(unsigned long limit)
{
 max_mapnr = limit;
}




extern unsigned long totalram_pages;
extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));
# 128 "../include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

extern int overcommit_ratio_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
extern int overcommit_kbytes_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
# 159 "../include/linux/mm.h"
extern struct kmem_cache *vm_area_cachep;
# 315 "../include/linux/mm.h"
extern pgprot_t protection_map[16];
# 351 "../include/linux/mm.h"
struct vm_fault {
 struct vm_area_struct *vma;
 unsigned int flags;
 gfp_t gfp_mask;
 unsigned long pgoff;
 unsigned long address;

 unsigned int sequence;
 pmd_t orig_pmd;

 pmd_t *pmd;

 pud_t *pud;


 pte_t orig_pte;

 struct page *cow_page;
 struct mem_cgroup *memcg;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;
# 395 "../include/linux/mm.h"
 unsigned long vma_flags;
 pgprot_t vma_page_prot;
};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);
 int (*split)(struct vm_area_struct * area, unsigned long addr);
 int (*mremap)(struct vm_area_struct * area);
 int (*fault)(struct vm_fault *vmf);
 int (*huge_fault)(struct vm_fault *vmf, enum page_entry_size pe_size);
 void (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);



 int (*page_mkwrite)(struct vm_fault *vmf);


 int (*pfn_mkwrite)(struct vm_fault *vmf);




 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 467 "../include/linux/mm.h"
 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

struct mmu_gather;
struct inode;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pmd_devmap(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pud_devmap(pud_t pud)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}







# 1 "../include/linux/huge_mm.h" 1




# 1 "../include/linux/sched/coredump.h" 1
# 17 "../include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "../include/linux/huge_mm.h" 2



extern int do_huge_pmd_anonymous_page(struct vm_fault *vmf);
extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *vma);
extern void huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd);
extern int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
{
}


extern int do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd);
extern struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr,
       pmd_t *pmd,
       unsigned int flags);
extern bool madvise_free_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr, unsigned long next);
extern int zap_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr);
extern int zap_huge_pud(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pud_t *pud, unsigned long addr);
extern int mincore_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, unsigned long end,
   unsigned char *vec);
extern bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
    unsigned long new_addr, unsigned long old_end,
    pmd_t *old_pmd, pmd_t *new_pmd);
extern int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, pgprot_t newprot,
   int prot_numa);
int vmf_insert_pfn_pmd(struct vm_area_struct *vma, unsigned long addr,
   pmd_t *pmd, pfn_t pfn, bool write);
int vmf_insert_pfn_pud(struct vm_area_struct *vma, unsigned long addr,
   pud_t *pud, pfn_t pfn, bool write);
enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,



};

struct kobject;
struct kobj_attribute;

extern ssize_t single_hugepage_flag_store(struct kobject *kobj,
     struct kobj_attribute *attr,
     const char *buf, size_t count,
     enum transparent_hugepage_flag flag);
extern ssize_t single_hugepage_flag_show(struct kobject *kobj,
    struct kobj_attribute *attr, char *buf,
    enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 259 "../include/linux/huge_mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool transparent_hugepage_enabled(struct vm_area_struct *vma)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void prep_transhuge_page(struct page *page) {}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
can_split_huge_page(struct page *page, int *pextra_pins)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_72(void) ; if (__cond) __compiletime_assert_72(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return false;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
split_huge_page_to_list(struct page *page, struct list_head *list)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int split_huge_page(struct page *page)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void deferred_split_huge_page(struct page *page) {}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page) {}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void split_huge_pmd_address(struct vm_area_struct *vma,
  unsigned long address, bool freeze, struct page *page) {}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice)
{
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/huge_mm.h\"; .popsection; .long 2b - 0b; .short 300; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0);
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_swap_pmd(pmd_t pmd)
{
 return 0;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 return ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t orig_pmd)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_huge_zero_page(struct page *page)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_put_huge_zero_page(struct mm_struct *mm)
{
 return;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *follow_devmap_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd, int flags)
{
 return ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *follow_devmap_pud(struct vm_area_struct *vma,
  unsigned long addr, pud_t *pud, int flags)
{
 return ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool thp_migration_supported(void)
{
 return false;
}
# 498 "../include/linux/mm.h" 2
# 515 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);
# 555 "../include/linux/mm.h"
extern int is_vmalloc_addr(const void *x);
# 564 "../include/linux/mm.h"
extern int is_vmalloc_or_module_addr(const void *x);







extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x8000u));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);

 return kvmalloc(n * size, flags);
}

extern void kvfree(const void *addr);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = compound_head(page);
 return ({ union { typeof((compound_mapcount_ptr(page))->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((compound_mapcount_ptr(page))->counter), __u.__c, sizeof((compound_mapcount_ptr(page))->counter)); else __read_once_size_nocheck(&((compound_mapcount_ptr(page))->counter), __u.__c, sizeof((compound_mapcount_ptr(page))->counter)); do { } while (0); __u.__val; }) + 1;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_mapcount_reset(struct page *page)
{
 ({ union { typeof(((&(page)->_mapcount)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&(page)->_mapcount)->counter))) ((-1)) }; __write_once_size(&(((&(page)->_mapcount)->counter)), __u.__c, sizeof(((&(page)->_mapcount)->counter))); __u.__val; });
}

int __page_mapcount(struct page *page);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(PageSlab(page)))));

 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return ({ union { typeof((&page->_mapcount)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); else __read_once_size_nocheck(&((&page->_mapcount)->counter), __u.__c, sizeof((&page->_mapcount)->counter)); do { } while (0); __u.__val; }) + 1;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int total_mapcount(struct page *page)
{
 return page_mapcount(page);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_trans_huge_mapcount(struct page *page,
        int *total_mapcount)
{
 int mapcount = page_mapcount(page);
 if (total_mapcount)
  *total_mapcount = mapcount;
 return mapcount;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = ((struct page *)(((((u64)(x) & ~((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)) / ((1UL) << 12) * sizeof(struct page))) | (((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6)))));

 return compound_head(page);
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,






 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[];

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) compound_page_dtor *get_compound_page_dtor(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 return compound_page_dtors[page[1].compound_dtor];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
}

void free_compound_page(struct page *page);
# 710 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t maybe_mkwrite(pte_t pte, unsigned long vma_flags)
{
 if (__builtin_expect(!!(vma_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

int alloc_set_pte(struct vm_fault *vmf, struct mem_cgroup *memcg,
  struct page *page);
int finish_fault(struct vm_fault *vmf);
int finish_mkwrite_fault(struct vm_fault *vmf);
# 830 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) enum zone_type page_zonenum(const struct page *page)
{
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_zone_device_page(const struct page *page)
{
 return false;
}
# 854 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_zone_device_private_or_public_page(struct page *page)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_device_private_page(const struct page *page)
{
 return false;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_device_public_page(const struct page *page)
{
 return false;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_page(struct page *page)
{
 page = compound_head(page);




 ((void)(sizeof(( long)(((unsigned int) page_ref_count(page) + 127u <= 127u)))));
 page_ref_inc(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool try_get_page(struct page *page)
{
 page = compound_head(page);
 if (({ int __ret_warn_on = !!(page_ref_count(page) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/mm.h\"; .popsection; .long 2b - 0b; .short 887; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_page(struct page *page)
{
 page = compound_head(page);







 if (0 && __builtin_expect(!!(is_device_private_page(page) || __builtin_expect(!!(is_device_public_page(page)), 0)), 0)) {

  put_zone_device_private_or_public_page(page);
  return;
 }

 if (put_page_testzero(page))
  __put_page(page);
}
# 925 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 0) < ((((sizeof(unsigned long)*8) - 0) - 0) - 2))? (((sizeof(unsigned long)*8) - 0) - 0) : ((((sizeof(unsigned long)*8) - 0) - 0) - 2)) * ((0 + 2) != 0))) & ((1UL << (0 + 2)) - 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int zone_to_nid(struct zone *zone)
{



 return 0;

}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_to_nid(const struct page *page)
{
 return (page->flags >> ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0))) & ((1UL << 0) - 1);
}
# 1013 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_cpupid_xchg_last(struct page *page, int cpupid)
{
 return page_to_nid(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int page_cpupid_last(struct page *page)
{
 return page_to_nid(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpupid_to_nid(int cpupid)
{
 return -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpupid_to_pid(int cpupid)
{
 return -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpupid_to_cpu(int cpupid)
{
 return -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cpu_pid_to_cpupid(int nid, int pid)
{
 return -1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpupid_pid_unset(int cpupid)
{
 return 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_cpupid_reset_last(struct page *page)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cpupid_match_pid(struct task_struct *task, int cpupid)
{
 return false;
}
# 1075 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void page_kasan_tag_reset(struct page *page) { }


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct zone *page_zone(const struct page *page)
{
 return &(&contig_page_data)->node_zones[page_zonenum(page)];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pg_data_t *page_pgdat(const struct page *page)
{
 return (&contig_page_data);
}
# 1107 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 0) - 2) * (2 != 0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 0) - 1) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0)));
 page->flags |= (node & ((1UL << 0) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 0) * (0 != 0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mem_cgroup *page_memcg(struct page *page)
{
 return page->mem_cgroup;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mem_cgroup *page_memcg_rcu(struct page *page)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/mm.h\"; .popsection; .long 2b - 0b; .short 1136; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return ({ union { typeof(page->mem_cgroup) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->mem_cgroup), __u.__c, sizeof(page->mem_cgroup)); else __read_once_size_nocheck(&(page->mem_cgroup), __u.__c, sizeof(page->mem_cgroup)); do { } while (0); __u.__val; });
}
# 1154 "../include/linux/mm.h"
# 1 "../include/linux/vmstat.h" 1







# 1 "../include/linux/vm_event_item.h" 1
# 25 "../include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PGPGOUTCLEAN, PSWPIN, PSWPOUT,
  PGALLOC_DMA, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_DMA, ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_DMA, PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,



  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,
# 54 "../include/linux/vm_event_item.h"
  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,
  KCOMPACTD_MIGRATE_SCANNED, KCOMPACTD_FREE_SCANNED,




  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,
# 110 "../include/linux/vm_event_item.h"
  SWAP_RA,
  SWAP_RA_HIT,


  SPECULATIVE_PGFAULT,

  NR_VM_EVENT_ITEMS
};
# 9 "../include/linux/vmstat.h" 2


extern int sysctl_stat_interval;
# 24 "../include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (delta), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (delta), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (delta), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(vm_event_states.event[item]) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(vm_event_states.event[item]))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), (delta), sizeof(vm_event_states.event[item])); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 110 "../include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_numa_stat[0];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];
# 142 "../include/linux/vmstat.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long global_node_page_state(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->pageset) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((zone->pageset))) *)((zone->pageset)))); (typeof((typeof(*((zone->pageset))) *)((zone->pageset)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long node_page_state_snapshot(pg_data_t *pgdat,
     enum node_stat_item item)
{
 long x = atomic_long_read(&pgdat->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((pgdat->per_cpu_nodestats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((pgdat->per_cpu_nodestats))) *)((pgdat->per_cpu_nodestats)))); (typeof((typeof(*((pgdat->per_cpu_nodestats))) *)((pgdat->per_cpu_nodestats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_node_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}
# 244 "../include/linux/vmstat.h"
void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void __mod_node_page_state(struct pglist_data *, enum node_stat_item item, long);
void __inc_node_page_state(struct page *, enum node_stat_item);
void __dec_node_page_state(struct page *, enum node_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
void inc_node_page_state(struct page *, enum node_stat_item);
void dec_node_page_state(struct page *, enum node_stat_item);

extern void inc_node_state(struct pglist_data *, enum node_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_node_state(struct pglist_data *, enum node_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_node_state(struct pglist_data *, enum node_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_pageset *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 375 "../include/linux/vmstat.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (__builtin_expect(!!((migratetype) == MIGRATE_CMA), 0))
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];
# 1155 "../include/linux/mm.h" 2

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *lowmem_page_address(const struct page *page)
{
 return ({ unsigned long __addr = (((((u64)(page) & ~(((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6)))) * ((1UL) << 12) / sizeof(struct page))) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)); const void *__addr_tag = __tag_set((void *)__addr, page_kasan_tag(page)); ((void *)__addr_tag); });
}
# 1189 "../include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern struct address_space *page_mapping(struct page *page);

extern struct address_space *__page_file_mapping(struct page *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
struct address_space *page_file_mapping(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_mapping(page);

 return page->mapping;
}

extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
struct address_space *page_mapping(struct page *page);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool page_is_pfmemalloc(struct page *page)
{




 return page->index == -1UL;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_page_pfmemalloc(struct page *page)
{
 page->index = -1UL;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_page_pfmemalloc(struct page *page)
{
 page->index = 0;
}
# 1296 "../include/linux/mm.h"
extern void pagefault_out_of_memory(void);
# 1306 "../include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);
void shmem_set_file(struct vm_area_struct *vma, struct file *file);

void shmem_set_file(struct vm_area_struct *vma, struct file *file);

extern bool can_do_mlock(void);
extern int user_shm_lock(size_t, struct user_struct *);
extern void user_shm_unlock(size_t, struct user_struct *);




struct zap_details {
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void INIT_VMA(struct vm_area_struct *vma)
{
 INIT_LIST_HEAD(&vma->anon_vma_chain);

 __seqcount_init(&vma->vm_sequence, ((void *)0), ((void *)0));
 ({ union { typeof(((&vma->vm_ref_count)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&vma->vm_ref_count)->counter))) ((1)) }; __write_once_size(&(((&vma->vm_ref_count)->counter)), __u.__c, sizeof(((&vma->vm_ref_count)->counter))); __u.__val; });

}

struct page *__vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
         pte_t pte, bool with_public_device,
         unsigned long vma_flags);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *_vm_normal_page(struct vm_area_struct *vma,
         unsigned long addr, pte_t pte,
         bool with_public_device)
{
 return __vm_normal_page(vma, addr, pte, with_public_device,
    vma->vm_flags);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *vm_normal_page(struct vm_area_struct *vma,
       unsigned long addr, pte_t pte)
{
 return _vm_normal_page(vma, addr, pte, false);
}

struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
  unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
  unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);
# 1383 "../include/linux/mm.h"
struct mm_walk {
 int (*pud_entry)(pud_t *pud, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_entry)(pte_t *pte, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_hole)(unsigned long addr, unsigned long next,
   struct mm_walk *walk);
 int (*hugetlb_entry)(pte_t *pte, unsigned long hmask,
        unsigned long addr, unsigned long next,
        struct mm_walk *walk);
 int (*test_walk)(unsigned long addr, unsigned long next,
   struct mm_walk *walk);
 struct mm_struct *mm;
 struct vm_area_struct *vma;
 void *private;
};

int walk_page_range(unsigned long addr, unsigned long end,
  struct mm_walk *walk);
int walk_page_vma(struct vm_area_struct *vma, struct mm_walk *walk);
void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
   struct vm_area_struct *vma);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
int follow_pte_pmd(struct mm_struct *mm, unsigned long address,
        unsigned long *start, unsigned long *end,
        pte_t **ptepp, pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vm_write_begin(struct vm_area_struct *vma)
{
 write_seqcount_begin(&vma->vm_sequence);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vm_write_begin_nested(struct vm_area_struct *vma,
      int subclass)
{
 write_seqcount_begin_nested(&vma->vm_sequence, subclass);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vm_write_end(struct vm_area_struct *vma)
{
 write_seqcount_end(&vma->vm_sequence);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vm_raw_write_begin(struct vm_area_struct *vma)
{
 raw_write_seqcount_begin(&vma->vm_sequence);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vm_raw_write_end(struct vm_area_struct *vma)
{
 raw_write_seqcount_end(&vma->vm_sequence);
}
# 1468 "../include/linux/mm.h"
extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern int handle_mm_fault(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags);


extern int __handle_speculative_fault(struct mm_struct *mm,
          unsigned long address,
          unsigned int flags,
          struct vm_area_struct **vma);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int handle_speculative_fault(struct mm_struct *mm,
        unsigned long address,
        unsigned int flags,
        struct vm_area_struct **vma)
{



 if (!(flags & 0x40) || ({ union { typeof((&mm->mm_users)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mm->mm_users)->counter), __u.__c, sizeof((&mm->mm_users)->counter)); else __read_once_size_nocheck(&((&mm->mm_users)->counter), __u.__c, sizeof((&mm->mm_users)->counter)); do { } while (0); __u.__val; }) == 1) {
  *vma = ((void *)0);
  return 0x0400;
 }
 return __handle_speculative_fault(mm, address, flags, vma);
}
extern bool can_reuse_spf_vma(struct vm_area_struct *vma,
         unsigned long address);
# 1516 "../include/linux/mm.h"
extern int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
# 1537 "../include/linux/mm.h"
extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len,
  unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,
  unsigned long addr, void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long get_user_pages_longterm(unsigned long start,
  unsigned long nr_pages, unsigned int gup_flags,
  struct page **pages, struct vm_area_struct **vmas)
{
 return get_user_pages(start, nr_pages, gup_flags, pages, vmas);
}


int get_user_pages_fast(unsigned long start, int nr_pages, int write,
   struct page **pages);


struct frame_vector {
 unsigned int nr_allocated;
 unsigned int nr_frames;
 bool got_ref;
 bool is_pfns;
 void *ptrs[0];


};

struct frame_vector *frame_vector_create(unsigned int nr_frames);
void frame_vector_destroy(struct frame_vector *vec);
int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
       unsigned int gup_flags, struct frame_vector *vec);
void put_vaddr_frames(struct frame_vector *vec);
int frame_vector_to_pages(struct frame_vector *vec);
void frame_vector_to_pfns(struct frame_vector *vec);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int frame_vector_count(struct frame_vector *vec)
{
 return vec->nr_frames;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page **frame_vector_pages(struct frame_vector *vec)
{
 if (vec->is_pfns) {
  int err = frame_vector_to_pages(vec);

  if (err)
   return ERR_PTR(err);
 }
 return (struct page **)(vec->ptrs);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long *frame_vector_pfns(struct frame_vector *vec)
{
 if (!vec->is_pfns)
  frame_vector_to_pfns(vec);
 return (unsigned long *)(vec->ptrs);
}

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
int get_kernel_page(unsigned long start, int write, struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);
int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
void account_page_dirtied(struct page *page, struct address_space *mapping);
void account_page_cleaned(struct page *page, struct address_space *mapping,
     struct bdi_writeback *wb);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
void cancel_dirty_page(struct page *page);
int clear_page_dirty_for_io(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         int dirty_accountable, int prot_numa);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int __get_user_pages_fast(unsigned long start, int nr_pages, int write,
     struct page **pages);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 atomic_long_add(value, &mm->rss_stat.count[member]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_inc(&mm->rss_stat.count[member]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_dec(&mm->rss_stat.count[member]);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_rss) __UNIQUE_ID_max1_73 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID_max2_74 = (get_mm_rss(mm)); (void) (&__UNIQUE_ID_max1_73 == &__UNIQUE_ID_max2_74); __UNIQUE_ID_max1_73 > __UNIQUE_ID_max2_74 ? __UNIQUE_ID_max1_73 : __UNIQUE_ID_max2_74; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_vm) __UNIQUE_ID_max1_75 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID_max2_76 = (mm->total_vm); (void) (&__UNIQUE_ID_max1_75 == &__UNIQUE_ID_max2_76); __UNIQUE_ID_max1_75 > __UNIQUE_ID_max2_76 ? __UNIQUE_ID_max1_75 : __UNIQUE_ID_max2_76; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pte_devmap(pte_t pte)
{
 return 0;
}


int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __pud_alloc(struct mm_struct *mm, pgd_t *p4d,
      unsigned long address)
{
 return 0;
}
# 1828 "../include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_nr_pmds_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->nr_pmds, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long mm_nr_pmds(struct mm_struct *mm)
{
 return atomic_long_read(&mm->nr_pmds);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 atomic_long_inc(&mm->nr_pmds);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 atomic_long_dec(&mm->nr_pmds);
}


int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address);
int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);
# 1876 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!((!((((*pud).pgd).pgd)))), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): ((pmd_t *)((void *)((unsigned long)(((phys_addr_t)((pud_page_paddr(*((pud))) + ((((address)) >> ((12 - 3) * (4 - (2)) + 3)) & ((1 << (12 - 3)) - 1)) * sizeof(pmd_t)))) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1))));
}
# 1894 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ptlock_cache_init(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ptlock_alloc(struct page *page)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ptlock_free(struct page *page)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((((struct page *)(((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - (memstart_addr >> 12)) + (((unsigned long)((((*pmd).pmd) & (((1UL) << (48)) - 1)) >> 12)))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ptlock_init(struct page *page)
{







 ((void)(sizeof(( long)(*(unsigned long *)&page->ptl))));
 if (!ptlock_alloc(page))
  return false;
 do { spinlock_check(ptlock_ptr(page)); do { *(&(ptlock_ptr(page))->rlock) = (raw_spinlock_t) { .raw_lock = { 0 , 0 }, }; } while (0); } while (0);
 return true;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pte_lock_deinit(struct page *page)
{
 page->mapping = ((void *)0);
 ptlock_free(page);
}
# 1954 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgd_cache_init();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool pgtable_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 inc_zone_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgtable_page_dtor(struct page *page)
{
 pte_lock_deinit(page);
 dec_zone_page_state(page, NR_PAGETABLE);
}
# 2035 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return &mm->page_table_lock;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool pgtable_pmd_page_ctor(struct page *page) { return true; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pgtable_pmd_page_dtor(struct page *page) {}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__ ((__section__(".init.text"))) pagecache_init(void);
extern void free_area_init(unsigned long * zones_size);
extern void free_area_init_node(int nid, unsigned long * zones_size,
  unsigned long zone_start_pfn, unsigned long *zholes_size);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, char *s);
# 2096 "../include/linux/mm.h"
extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(const char *str);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void free_reserved_page(struct page *page)
{
 __free_reserved_page(page);
 adjust_managed_page_count(page, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  phys_pages += ((&contig_page_data)->node_present_pages);

 return phys_pages;
}
# 2190 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __early_pfn_to_nid(unsigned long pfn,
     struct mminit_pfnnid_cache *state)
{
 return 0;
}
# 2203 "../include/linux/mm.h"
extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_zone(unsigned long, int, unsigned long,
    unsigned long, enum memmap_context);
extern void setup_per_zone_wmarks(void);
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((no_instrument_function)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__ ((__section__(".init.text"))) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((format(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);

extern void zone_pcp_update(struct zone *zone);
extern void zone_pcp_reset(struct zone *zone);


extern int min_free_kbytes;
extern int watermark_scale_factor;


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 2269 "../include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand, bool keep_locked);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0), false);
}

extern struct vm_area_struct *__vma_merge(struct mm_struct *mm,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *anon, struct file *file,
 unsigned long pgoff, struct mempolicy *mpol, struct vm_userfaultfd_ctx uff,
 const char *user, bool keep_locked);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct vm_area_struct *vma_merge(struct mm_struct *mm,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *anon, struct file *file,
 unsigned long off, struct mempolicy *pol, struct vm_userfaultfd_ctx uff,
 const char *user)
{
 return __vma_merge(mm, prev, addr, end, vm_flags, anon, file, off,
      pol, uff, user, false);
}

extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 vm_flags_t vm_flags, unsigned long pgoff, unsigned long *populate,
 struct list_head *uf);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
do_mmap_pgoff(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate,
 struct list_head *uf)
{
 return do_mmap(file, addr, len, prot, flags, 0, pgoff, populate, uf);
}


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((warn_unused_result)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((warn_unused_result)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((warn_unused_result)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long unmapped_area(struct vm_unmapped_area_info *info);
extern unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info);
# 2407 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
vm_unmapped_area(struct vm_unmapped_area_info *info)
{
 if (info->flags & 1)
  return unmapped_area_topdown(info);
 else
  return unmapped_area(info);
}


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern int filemap_fault(struct vm_fault *vmf);
extern void filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern int filemap_page_mkwrite(struct vm_fault *vmf);


int __attribute__((warn_unused_result)) write_one_page(struct page *page);
void task_dirty_inc(struct task_struct *tsk);





int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);

void page_cache_sync_readahead(struct address_space *mapping,
          struct file_ra_state *ra,
          struct file *filp,
          unsigned long offset,
          unsigned long size);

void page_cache_async_readahead(struct address_space *mapping,
    struct file_ra_state *ra,
    struct file *filp,
    struct page *pg,
    unsigned long offset,
    unsigned long size);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
 struct vm_area_struct * vma = find_vma(mm,start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;


 if (((vma->vm_flags) & 0x200000000UL))
  return vm_start;




 if (((vma->vm_flags) & 0x200000000UL))
  return vm_start;


 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;



 if (((vma->vm_flags) & 0x200000000UL))
  return vm_end;



 if (((vma->vm_flags) & 0x200000000UL))
  return vm_end;


 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << 12);
 }
 return vm_end;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 12;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2569 "../include/linux/mm.h"
struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
int vm_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
int vm_insert_mixed_mkwrite(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);


struct page *follow_page_mask(struct vm_area_struct *vma,
         unsigned long address, unsigned int foll_flags,
         unsigned int *page_mask);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *follow_page(struct vm_area_struct *vma,
  unsigned long address, unsigned int foll_flags)
{
 unsigned int unused_page_mask;
 return follow_page_mask(vma, address, foll_flags, &unused_page_mask);
}
# 2613 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int vm_fault_to_errno(int vm_fault, int foll_flags)
{
 if (vm_fault & 0x0001)
  return -12;
 if (vm_fault & (0x0010 | 0x0020))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (0x0002 | 0x0040))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
   void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void kernel_poison_pages(struct page *page, int numpages,
     int enable) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool page_is_poisoned(struct page *page) { return false; }





extern struct static_key_false init_on_alloc;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool want_init_on_alloc(gfp_t flags)
{
 if (__builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_alloc)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_alloc)->key) > 0; })), 0) &&
     !page_poisoning_enabled())
  return true;
 return flags & (( gfp_t)0x8000u);
}




extern struct static_key_false init_on_free;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool want_init_on_free(void)
{
 return __builtin_expect(!!(({ if (!__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&(&init_on_free)->key), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&(&init_on_free)->key) > 0; })), 0) &&
        !page_poisoning_enabled();
}
# 2686 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
kernel_map_pages(struct page *page, int numpages, int enable) {}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool debug_pagealloc_enabled(void)
{
 return false;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
{
 return ((void *)0);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int in_gate_area_no_mm(unsigned long addr) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int in_gate_area(struct mm_struct *mm, unsigned long addr)
{
 return 0;
}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);
void print_vma_addr(char *prefix, unsigned long rip);

void sparse_mem_maps_populate_node(struct page **map_map,
       unsigned long pnum_begin,
       unsigned long pnum_end,
       unsigned long map_count,
       int nodeid);

struct page *sparse_mem_map_populate(unsigned long pnum, int nid);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
pgd_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(pgd_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *__vmemmap_alloc_block_buf(unsigned long size, int node,
  struct vmem_altmap *altmap);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *vmemmap_alloc_block_buf(unsigned long size, int node)
{
 return __vmemmap_alloc_block_buf(size, node, ((void *)0));
}

void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node);
int vmemmap_populate(unsigned long start, unsigned long end, int node);
void vmemmap_populate_print_last(void);



void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int trapno, int flags);
extern void memory_failure_queue(unsigned long pfn, int trapno, int flags);
extern int unpoison_memory(unsigned long pfn);
extern int get_hwpoison_page(struct page *page);

extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p, int access);
extern atomic_long_t num_poisoned_pages;
extern int soft_offline_page(struct page *page, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_UNKNOWN,
};
# 2830 "../include/linux/mm.h"
extern struct page_ext_operations debug_guardpage_ops;
# 2860 "../include/linux/mm.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool page_is_guard(struct page *page) { return false; }





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void setup_nr_node_ids(void) {}


extern int want_old_faultaround_pte;


struct reclaim_param {
 struct vm_area_struct *vma;

 int nr_scanned;

 int nr_to_reclaim;

 int nr_reclaimed;

 bool inactive_lru;
 struct task_struct *reclaimed_task;

};
extern struct reclaim_param reclaim_task_anon(struct task_struct *task,
  int nr_to_reclaim);
# 9 "../include/linux/scatterlist.h" 2
# 1 "../arch/arm64/include/asm/io.h" 1
# 30 "../arch/arm64/include/asm/io.h"
# 1 "./arch/arm64/include/generated/asm/early_ioremap.h" 1
# 1 "../include/asm-generic/early_ioremap.h" 1
# 11 "../include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);





extern void early_ioremap_shutdown(void);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 2 "./arch/arm64/include/generated/asm/early_ioremap.h" 2
# 31 "../arch/arm64/include/asm/io.h" 2


# 1 "../include/linux/msm_rtb.h" 1
# 20 "../include/linux/msm_rtb.h"
enum logk_event_type {
 LOGK_NONE = 0,
 LOGK_READL = 1,
 LOGK_WRITEL = 2,
 LOGK_LOGBUF = 3,
 LOGK_HOTPLUG = 4,
 LOGK_CTXID = 5,
 LOGK_TIMESTAMP = 6,
 LOGK_L2CPREAD = 7,
 LOGK_L2CPWRITE = 8,
 LOGK_IRQ = 9,
};



struct msm_rtb_platform_data {
 unsigned int size;
};
# 73 "../include/linux/msm_rtb.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int uncached_logk_pc(enum logk_event_type log_type,
     void *caller,
     void *data) { return 0; }

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int uncached_logk(enum logk_event_type log_type,
     void *data) { return 0; }
# 34 "../arch/arm64/include/asm/io.h" 2

# 1 "../include/xen/xen.h" 1




enum xen_domain_type {
 XEN_NATIVE,
 XEN_PV_DOMAIN,
 XEN_HVM_DOMAIN,
};
# 36 "../arch/arm64/include/asm/io.h" 2





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_writeb_no_log(u8 val, volatile void *addr)
{
 asm volatile("strb %w0, [%1]" : : "rZ" (val), "r" (addr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_writew_no_log(u16 val, volatile void *addr)
{
 asm volatile("strh %w0, [%1]" : : "rZ" (val), "r" (addr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_writel_no_log(u32 val, volatile void *addr)
{
 asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __raw_writeq_no_log(u64 val, volatile void *addr)
{
 asm volatile("str %x0, [%1]" : : "rZ" (val), "r" (addr));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 __raw_readb_no_log(const volatile void *addr)
{
 u8 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrb %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldarb %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 __raw_readw_no_log(const volatile void *addr)
{
 u16 val;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrh %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldarh %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 __raw_readl_no_log(const volatile void *addr)
{
 u32 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldar %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 __raw_readq_no_log(const volatile void *addr)
{
 u64 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .word 663f - .\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldar %0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}
# 238 "../arch/arm64/include/asm/io.h"
extern void __memcpy_fromio(void *, const volatile void *, size_t);
extern void __memcpy_toio(volatile void *, const void *, size_t);
extern void __memset_io(volatile void *, int, size_t);
# 249 "../arch/arm64/include/asm/io.h"
extern void *__ioremap(phys_addr_t phys_addr, size_t size, pgprot_t prot);
extern void __iounmap(volatile void *addr);
extern void *ioremap_cache(phys_addr_t phys_addr, size_t size);
# 280 "../arch/arm64/include/asm/io.h"
# 1 "../include/asm-generic/io.h" 1
# 22 "../include/asm-generic/io.h"
# 1 "../include/asm-generic/pci_iomap.h" 1
# 14 "../include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 23 "../include/asm-generic/io.h" 2
# 220 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void readsb(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u8 *buf = buffer;

  do {
   u8 x = ({ u8 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readb_no_log(_a); if (_ret) asm volatile ("nop"); __a; });
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void readsw(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u16 *buf = buffer;

  do {
   u16 x = ({ u16 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readw_no_log(_a); if (_ret) asm volatile ("nop"); __a; });
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void readsl(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u32 *buf = buffer;

  do {
   u32 x = ({ u32 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readl_no_log(_a); if (_ret) asm volatile ("nop"); __a; });
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = ({ u64 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readq_no_log(_a); if (_ret) asm volatile ("nop"); __a; });
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void writesb(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u8 *buf = buffer;

  do {
   ({ int _ret; volatile void *_a = (addr); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writeb_no_log(((*buf++)), _a); if (_ret) asm volatile ("nop"); });
  } while (--count);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void writesw(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u16 *buf = buffer;

  do {
   ({ int _ret; volatile void *_a = (addr); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writew_no_log(((*buf++)), _a); if (_ret) asm volatile ("nop"); });
  } while (--count);
 }
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void writesl(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u32 *buf = buffer;

  do {
   ({ int _ret; volatile void *_a = (addr); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writel_no_log(((*buf++)), _a); if (_ret) asm volatile ("nop"); });
  } while (--count);
 }
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   ({ int _ret; volatile void *_a = (addr); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writeq_no_log(((*buf++)), _a); if (_ret) asm volatile ("nop"); });
  } while (--count);
 }
}
# 362 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 inb(unsigned long addr)
{
 return ({ u8 __v = ({ u8 __r = ({ u8 __a; const volatile void *_a = ((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readb_no_log(_a); if (_ret) asm volatile ("nop"); __a; }); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 inw(unsigned long addr)
{
 return ({ u16 __v = ({ u16 __r = (( __u16)(__le16)(( __le16)({ u16 __a; const volatile void *_a = ((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readw_no_log(_a); if (_ret) asm volatile ("nop"); __a; }))); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 inl(unsigned long addr)
{
 return ({ u32 __v = ({ u32 __r = (( __u32)(__le32)(( __le32)({ u32 __a; const volatile void *_a = ((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readl_no_log(_a); if (_ret) asm volatile ("nop"); __a; }))); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outb(u8 value, unsigned long addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writeb_no_log(((((value)))), _a); if (_ret) asm volatile ("nop"); })); });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outw(u16 value, unsigned long addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writew_no_log(((( u16)(( __le16)(__u16)((value))))), _a); if (_ret) asm volatile ("nop"); })); });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outl(u32 value, unsigned long addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writel_no_log(((( u32)(( __le32)(__u32)((value))))), _a); if (_ret) asm volatile ("nop"); })); });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 inb_p(unsigned long addr)
{
 return inb(addr);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 inw_p(unsigned long addr)
{
 return inw(addr);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 inl_p(unsigned long addr)
{
 return inl(addr);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outb_p(u8 value, unsigned long addr)
{
 outb(value, addr);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outw_p(u16 value, unsigned long addr)
{
 outw(value, addr);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outl_p(u32 value, unsigned long addr)
{
 outl(value, addr);
}
# 463 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insb(unsigned long addr, void *buffer, unsigned int count)
{
 readsb(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insw(unsigned long addr, void *buffer, unsigned int count)
{
 readsw(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insl(unsigned long addr, void *buffer, unsigned int count)
{
 readsl(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsb(unsigned long addr, const void *buffer,
    unsigned int count)
{
 writesb(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsw(unsigned long addr, const void *buffer,
    unsigned int count)
{
 writesw(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsl(unsigned long addr, const void *buffer,
    unsigned int count)
{
 writesl(((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 insb(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 insw(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 insl(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsb(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsw(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsl(addr, buffer, count);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 ioread8(const volatile void *addr)
{
 return ({ u8 __v = ({ u8 __r = ({ u8 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readb_no_log(_a); if (_ret) asm volatile ("nop"); __a; }); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 ioread16(const volatile void *addr)
{
 return ({ u16 __v = ({ u16 __r = (( __u16)(__le16)(( __le16)({ u16 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readw_no_log(_a); if (_ret) asm volatile ("nop"); __a; }))); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ioread32(const volatile void *addr)
{
 return ({ u32 __v = ({ u32 __r = (( __u32)(__le32)(( __le32)({ u32 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readl_no_log(_a); if (_ret) asm volatile ("nop"); __a; }))); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ioread64(const volatile void *addr)
{
 return ({ u64 __v = ({ u64 __r = (( __u64)(__le64)(( __le64)({ u64 __a; const volatile void *_a = ((addr)); void *_addr = (void *)(_a); int _ret; _ret = uncached_logk(LOGK_READL, _addr); ; __a = __raw_readq_no_log(_a); if (_ret) asm volatile ("nop"); __a; }))); __r; }); ({ unsigned long tmp; asm volatile("dsb " "ld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite8(u8 value, volatile void *addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writeb_no_log(((((value)))), _a); if (_ret) asm volatile ("nop"); })); });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite16(u16 value, volatile void *addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writew_no_log(((( u16)(( __le16)(__u16)((value))))), _a); if (_ret) asm volatile ("nop"); })); });
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite32(u32 value, volatile void *addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writel_no_log(((( u32)(( __le32)(__u32)((value))))), _a); if (_ret) asm volatile ("nop"); })); });
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite64(u64 value, volatile void *addr)
{
 ({ asm volatile("dsb " "st" : : : "memory"); ((void)({ int _ret; volatile void *_a = (((addr))); void *_addr = (void *)(_a); _ret = uncached_logk(LOGK_WRITEL, _addr); ; __raw_writeq_no_log(((( u64)(( __le64)(__u64)((value))))), _a); if (_ret) asm volatile ("nop"); })); });
}
# 686 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ioread8_rep(const volatile void *addr, void *buffer,
          unsigned int count)
{
 readsb(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ioread16_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsw(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ioread32_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsl(addr, buffer, count);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ioread64_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsq(addr, buffer, count);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite8_rep(volatile void *addr,
    const void *buffer,
    unsigned int count)
{
 writesb(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite16_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesw(addr, buffer, count);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite32_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesl(addr, buffer, count);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void iowrite64_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesq(addr, buffer, count);
}
# 771 "../include/asm-generic/io.h"
struct pci_dev;
extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pci_iounmap(struct pci_dev *dev, void *p)
{
}
# 823 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *ioremap_uc(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}
# 900 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *ioport_map(unsigned long port, unsigned int nr)
{
 return ((void *)(((((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - 0x00200000) - 0x01000000)) + (port & (0x01000000 - 1));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ioport_unmap(void *p)
{
}
# 923 "../include/asm-generic/io.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *xlate_dev_kmem_ptr(void *addr)
{
 return addr;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *xlate_dev_mem_ptr(phys_addr_t addr)
{
 return ((void *)((unsigned long)(((phys_addr_t)(addr)) - ({ ((void)(sizeof(( long)(memstart_addr & 1)))); memstart_addr; })) | ((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr)
{
}
# 281 "../arch/arm64/include/asm/io.h" 2






extern int valid_phys_addr_range(phys_addr_t addr, size_t size);
extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);

extern int devmem_is_allowed(unsigned long pfn);

struct bio_vec;
extern bool xen_biovec_phys_mergeable(const struct bio_vec *vec1,
          const struct bio_vec *vec2);
# 10 "../include/linux/scatterlist.h" 2

struct scatterlist {



 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;

 unsigned int dma_length;

};
# 39 "../include/linux/scatterlist.h"
struct sg_table {
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;
};
# 83 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & 0x3;





 do { if (__builtin_expect(!!((unsigned long) page & 0x03), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/scatterlist.h\"; .popsection; .long 2b - 0b; .short 91; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);




 sg->page_link = page_link | (unsigned long) page;
}
# 113 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *sg_page(struct scatterlist *sg)
{




 return (struct page *)((sg)->page_link & ~0x3);
}
# 137 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_set_buf(struct scatterlist *sg, const void *buf,
         unsigned int buflen)
{



 sg_set_page(sg, ((struct page *)(((((u64)(buf) & ~((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)) / ((1UL) << 12) * sizeof(struct page))) | (((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))))), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 12)-1))));
}
# 162 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{



 prv[prv_nents - 1].offset = 0;
 prv[prv_nents - 1].length = 0;





 prv[prv_nents - 1].page_link = ((unsigned long) sgl | 0x01) & ~0x02;
}
# 187 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_mark_end(struct scatterlist *sg)
{






 sg->page_link |= 0x02;
 sg->page_link &= ~0x01;
}
# 207 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sg_unmark_end(struct scatterlist *sg)
{



 sg->page_link &= ~0x02;
}
# 225 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t sg_phys(struct scatterlist *sg)
{
 return (((phys_addr_t)((unsigned long)((sg_page(sg)) - ((struct page *)(((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - (memstart_addr >> 12)))) << 12)) + sg->offset;
}
# 240 "../include/linux/scatterlist.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}

int sg_nents(struct scatterlist *sg);
int sg_nents_for_len(struct scatterlist *sg, u64 len);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, const void *, unsigned int);
int sg_split(struct scatterlist *in, const int in_mapped_nents,
      const off_t skip, const int nb_splits,
      const size_t *split_sizes,
      struct scatterlist **out, int *out_mapped_nents,
      gfp_t gfp_mask);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, bool, sg_free_fn *);
void sg_free_table(struct sg_table *);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
       struct scatterlist *, gfp_t, sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int sg_alloc_table_from_pages(struct sg_table *sgt,
 struct page **pages, unsigned int n_pages,
 unsigned long offset, unsigned long size,
 gfp_t gfp_mask);
# 280 "../include/linux/scatterlist.h"
size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
        size_t buflen, off_t skip, bool to_buffer);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      const void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       const void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
size_t sg_zero_buffer(struct scatterlist *sgl, unsigned int nents,
         size_t buflen, off_t skip);
# 321 "../include/linux/scatterlist.h"
void sg_free_table_chained(struct sg_table *table, bool first_chunk);
int sg_alloc_table_chained(struct sg_table *table, int nents,
      struct scatterlist *first_chunk);
# 336 "../include/linux/scatterlist.h"
struct sg_page_iter {
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;

};

bool __sg_page_iter_next(struct sg_page_iter *piter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return (((struct page *)(((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - (memstart_addr >> 12)) + ((unsigned long)(((sg_page(piter->sg))) - ((struct page *)(((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))) - (memstart_addr >> 12))) + (piter->sg_pgoffset)));
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t sg_page_iter_dma_address(struct sg_page_iter *piter)
{
 return ((piter->sg)->dma_address) + (piter->sg_pgoffset << 12);
}
# 400 "../include/linux/scatterlist.h"
struct sg_mapping_iter {

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_skip(struct sg_mapping_iter *miter, off_t offset);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
# 12 "../include/linux/dma-mapping.h" 2

# 1 "../include/linux/mem_encrypt.h" 1
# 28 "../include/linux/mem_encrypt.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool sme_active(void)
{
 return !!0ULL;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 sme_get_me_mask(void)
{
 return 0ULL;
}
# 14 "../include/linux/dma-mapping.h" 2
# 130 "../include/linux/dma-mapping.h"
struct dma_map_ops {
 void* (*alloc)(struct device *dev, size_t size,
    dma_addr_t *dma_handle, gfp_t gfp,
    unsigned long attrs);
 void (*free)(struct device *dev, size_t size,
         void *vaddr, dma_addr_t dma_handle,
         unsigned long attrs);
 int (*mmap)(struct device *, struct vm_area_struct *,
     void *, dma_addr_t, size_t,
     unsigned long attrs);

 int (*get_sgtable)(struct device *dev, struct sg_table *sgt, void *,
      dma_addr_t, size_t, unsigned long attrs);

 dma_addr_t (*map_page)(struct device *dev, struct page *page,
          unsigned long offset, size_t size,
          enum dma_data_direction dir,
          unsigned long attrs);
 void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      unsigned long attrs);




 int (*map_sg)(struct device *dev, struct scatterlist *sg,
        int nents, enum dma_data_direction dir,
        unsigned long attrs);
 void (*unmap_sg)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir,
    unsigned long attrs);
 dma_addr_t (*map_resource)(struct device *dev, phys_addr_t phys_addr,
          size_t size, enum dma_data_direction dir,
          unsigned long attrs);
 void (*unmap_resource)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      unsigned long attrs);
 void (*sync_single_for_cpu)(struct device *dev,
        dma_addr_t dma_handle, size_t size,
        enum dma_data_direction dir);
 void (*sync_single_for_device)(struct device *dev,
           dma_addr_t dma_handle, size_t size,
           enum dma_data_direction dir);
 void (*sync_sg_for_cpu)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir);
 void (*sync_sg_for_device)(struct device *dev,
       struct scatterlist *sg, int nents,
       enum dma_data_direction dir);
 int (*mapping_error)(struct device *dev, dma_addr_t dma_addr);
 int (*dma_supported)(struct device *dev, u64 mask);
 int (*set_dma_mask)(struct device *dev, u64 mask);
 void *(*remap)(struct device *dev, void *cpu_addr, dma_addr_t handle,
   size_t size, unsigned long attrs);
 void (*unremap)(struct device *dev, void *remapped_address,
   size_t size);



 int is_phys;
};

extern const struct dma_map_ops dma_noop_ops;
extern const struct dma_map_ops dma_virt_ops;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int valid_dma_direction(int dma_direction)
{
 return ((dma_direction == DMA_BIDIRECTIONAL) ||
  (dma_direction == DMA_TO_DEVICE) ||
  (dma_direction == DMA_FROM_DEVICE));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int is_device_dma_capable(struct device *dev)
{
 return dev->dma_mask != ((void *)0) && *dev->dma_mask != 0x0ULL;
}






int dma_alloc_from_dev_coherent(struct device *dev, ssize_t size,
           dma_addr_t *dma_handle, void **ret);
int dma_release_from_dev_coherent(struct device *dev, int order, void *vaddr);

int dma_mmap_from_dev_coherent(struct device *dev, struct vm_area_struct *vma,
       void *cpu_addr, size_t size, int *ret);

void *dma_alloc_from_global_coherent(ssize_t size, dma_addr_t *dma_handle);
int dma_release_from_global_coherent(int order, void *vaddr);
int dma_mmap_from_global_coherent(struct vm_area_struct *vma, void *cpu_addr,
      size_t size, int *ret);
# 254 "../include/linux/dma-mapping.h"
# 1 "../arch/arm64/include/asm/dma-mapping.h" 1
# 25 "../arch/arm64/include/asm/dma-mapping.h"
# 1 "../arch/arm64/include/asm/xen/hypervisor.h" 1
# 1 "../include/xen/arm/hypervisor.h" 1






extern struct shared_info *HYPERVISOR_shared_info;
extern struct start_info *xen_start_info;


enum paravirt_lazy_mode {
 PARAVIRT_LAZY_NONE,
 PARAVIRT_LAZY_MMU,
 PARAVIRT_LAZY_CPU,
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) enum paravirt_lazy_mode paravirt_get_lazy_mode(void)
{
 return PARAVIRT_LAZY_NONE;
}

extern const struct dma_map_ops *xen_dma_ops;




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void xen_early_init(void) { return; }



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void xen_arch_register_cpu(int num)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void xen_arch_unregister_cpu(int num)
{
}
# 2 "../arch/arm64/include/asm/xen/hypervisor.h" 2
# 26 "../arch/arm64/include/asm/dma-mapping.h" 2

extern const struct dma_map_ops dummy_dma_ops;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{




 return &dummy_dma_ops;
}

void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,
   const struct iommu_ops *iommu, bool coherent);



void arch_teardown_dma_ops(struct device *dev);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_device_dma_coherent(struct device *dev)
{
 return dev->archdata.dma_coherent;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
{
 dma_addr_t dev_addr = (dma_addr_t)paddr;

 return dev_addr - ((dma_addr_t)dev->dma_pfn_offset << 12);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) phys_addr_t dma_to_phys(struct device *dev, dma_addr_t dev_addr)
{
 phys_addr_t paddr = (phys_addr_t)dev_addr;

 return paddr + ((phys_addr_t)dev->dma_pfn_offset << 12);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)
{
 if (!dev->dma_mask)
  return false;

 return addr + size - 1 <= *dev->dma_mask;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_mark_clean(void *addr, size_t size)
{
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long dma_max_pfn(struct device *dev)
{
 dma_addr_t dma_max = (dma_addr_t)*dev->dma_mask;

 return (ulong)dma_to_phys(dev, dma_max) >> 12;
}
# 255 "../include/linux/dma-mapping.h" 2
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const struct dma_map_ops *get_dma_ops(struct device *dev)
{
 if (dev && dev->dma_ops)
  return dev->dma_ops;
 return get_arch_dma_ops(dev ? dev->bus : ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void set_dma_ops(struct device *dev,
          const struct dma_map_ops *dma_ops)
{
 dev->dma_ops = dma_ops;
}
# 280 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr,
           size_t size,
           enum dma_data_direction dir,
           unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 288; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 addr = ops->map_page(dev, ((struct page *)(((((u64)(ptr) & ~((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)) / ((1UL) << 12) * sizeof(struct page))) | (((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))))),
        ((unsigned long)(ptr) & ~(~(((1UL) << 12)-1))), size,
        dir, attrs);
 debug_dma_map_page(dev, ((struct page *)(((((u64)(ptr) & ~((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1)) / ((1UL) << 12) * sizeof(struct page))) | (((0xffffffffffffffffUL) - ((1UL) << ((39) - 1)) + 1) - ((1UL) << ((39) - 12 - 1 + 6))))),
      ((unsigned long)(ptr) & ~(~(((1UL) << 12)-1))), size,
      dir, addr, true);
 return addr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr,
       size_t size,
       enum dma_data_direction dir,
       unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 305; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, attrs);
 debug_dma_unmap_page(dev, addr, size, dir, true);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg,
       int nents, enum dma_data_direction dir,
       unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 int ents;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 322; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 ents = ops->map_sg(dev, sg, nents, dir, attrs);
 do { if (__builtin_expect(!!(ents < 0), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 324; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 debug_dma_map_sg(dev, sg, nents, ents, dir);

 return ents;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg,
          int nents, enum dma_data_direction dir,
          unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 336; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 debug_dma_unmap_sg(dev, sg, nents, dir);
 if (ops->unmap_sg)
  ops->unmap_sg(dev, sg, nents, dir, attrs);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t dma_map_page_attrs(struct device *dev,
         struct page *page,
         size_t offset, size_t size,
         enum dma_data_direction dir,
         unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 351; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 addr = ops->map_page(dev, page, offset, size, dir, attrs);
 debug_dma_map_page(dev, page, offset, size, dir, addr, false);

 return addr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_unmap_page_attrs(struct device *dev,
     dma_addr_t addr, size_t size,
     enum dma_data_direction dir,
     unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 365; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, attrs);
 debug_dma_unmap_page(dev, addr, size, dir, false);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t dma_map_resource(struct device *dev,
       phys_addr_t phys_addr,
       size_t size,
       enum dma_data_direction dir,
       unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 380; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);


 do { if (__builtin_expect(!!(pfn_valid(((unsigned long)((phys_addr) >> 12)))), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 383; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 addr = phys_addr;
 if (ops->map_resource)
  addr = ops->map_resource(dev, phys_addr, size, dir, attrs);

 debug_dma_map_resource(dev, phys_addr, size, dir, addr);

 return addr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_unmap_resource(struct device *dev, dma_addr_t addr,
          size_t size, enum dma_data_direction dir,
          unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 400; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->unmap_resource)
  ops->unmap_resource(dev, addr, size, dir, attrs);
 debug_dma_unmap_resource(dev, addr, size, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr,
        size_t size,
        enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 412; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr, size, dir);
 debug_dma_sync_single_for_cpu(dev, addr, size, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_sync_single_for_device(struct device *dev,
           dma_addr_t addr, size_t size,
           enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 424; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr, size, dir);
 debug_dma_sync_single_for_device(dev, addr, size, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_sync_single_range_for_cpu(struct device *dev,
       dma_addr_t addr,
       unsigned long offset,
       size_t size,
       enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 438; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_cpu(dev, addr, offset, size, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_sync_single_range_for_device(struct device *dev,
          dma_addr_t addr,
          unsigned long offset,
          size_t size,
          enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 452; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_device(dev, addr, offset, size, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 464; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_sg_for_cpu)
  ops->sync_sg_for_cpu(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_cpu(dev, sg, nelems, dir);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg,
         int nelems, enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 476; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->sync_sg_for_device)
  ops->sync_sg_for_device(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_device(dev, sg, nelems, dir);

}
# 490 "../include/linux/dma-mapping.h"
extern int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
      void *cpu_addr, dma_addr_t dma_addr, size_t size);

void *dma_common_contiguous_remap(struct page *page, size_t size,
   unsigned long vm_flags,
   pgprot_t prot, const void *caller);

void *dma_common_pages_remap(struct page **pages, size_t size,
   unsigned long vm_flags, pgprot_t prot,
   const void *caller);
void dma_common_free_remap(void *cpu_addr, size_t size, unsigned long vm_flags,
      bool nowarn);
# 516 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma, void *cpu_addr,
        dma_addr_t dma_addr, size_t size, unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 521; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->mmap)
  return ops->mmap(dev, vma, cpu_addr, dma_addr, size, attrs);
 return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
}



int
dma_common_get_sgtable(struct device *dev, struct sg_table *sgt,
         void *cpu_addr, dma_addr_t dma_addr, size_t size);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int
dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt, void *cpu_addr,
        dma_addr_t dma_addr, size_t size,
        unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 539; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (ops->get_sgtable)
  return ops->get_sgtable(dev, sgt, cpu_addr, dma_addr, size,
     attrs);
 return dma_common_get_sgtable(dev, sgt, cpu_addr, dma_addr, size);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_alloc_attrs(struct device *dev, size_t size,
           dma_addr_t *dma_handle, gfp_t flag,
           unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 void *cpu_addr;

 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 559; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 if (dma_alloc_from_dev_coherent(dev, size, dma_handle, &cpu_addr))
  return cpu_addr;

 if (!(true))
  return ((void *)0);
 if (!ops->alloc)
  return ((void *)0);

 cpu_addr = ops->alloc(dev, size, dma_handle, flag, attrs);
 debug_dma_alloc_coherent(dev, size, *dma_handle, cpu_addr);
 return cpu_addr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_free_attrs(struct device *dev, size_t size,
         void *cpu_addr, dma_addr_t dma_handle,
         unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!ops), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 580; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 ({ int __ret_warn_on = !!(({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 581; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 if (dma_release_from_dev_coherent(dev, get_order(size), cpu_addr))
  return;

 if (!ops->free || !cpu_addr)
  return;

 debug_dma_free_coherent(dev, size, cpu_addr, dma_handle);
 ops->free(dev, size, cpu_addr, dma_handle, attrs);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t flag)
{
 return dma_alloc_attrs(dev, size, dma_handle, flag, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_free_coherent(struct device *dev, size_t size,
  void *cpu_addr, dma_addr_t dma_handle)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_handle, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 debug_dma_mapping_error(dev, dma_addr);
 if (ops->mapping_error)
  return ops->mapping_error(dev, dma_addr);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_check_mask(struct device *dev, u64 mask)
{
 if (sme_active() && (mask < (((u64)sme_get_me_mask() << 1) - 1)))
  dev_warn(dev, "SME is active, device will require DMA bounce buffers\n");
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_supported(struct device *dev, u64 mask)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 if (!ops)
  return 0;
 if (!ops->dma_supported)
  return 1;
 return ops->dma_supported(dev, mask);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_set_mask(struct device *dev, u64 mask)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 if (ops->set_dma_mask)
  return ops->set_dma_mask(dev, mask);

 if (!dev->dma_mask || !dma_supported(dev, mask))
  return -5;

 dma_check_mask(dev, mask);

 *dev->dma_mask = mask;
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_remap(struct device *dev, void *cpu_addr,
  dma_addr_t dma_handle, size_t size, unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 if (!ops->remap) {
  ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("Remap function not implemented for %pS\n", ops->remap); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 656; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

  return ((void *)0);
 }

 return ops->remap(dev, cpu_addr, dma_handle, size, attrs);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_unremap(struct device *dev, void *remapped_addr,
    size_t size)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 if (!ops->unremap) {
  ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("unremap function not implemented for %pS\n", ops->unremap); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dma-mapping.h\"; .popsection; .long 2b - 0b; .short 671; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });

  return;
 }

 return ops->unremap(dev, remapped_addr, size);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 dma_get_mask(struct device *dev)
{
 if (dev && dev->dma_mask && *dev->dma_mask)
  return *dev->dma_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_set_coherent_mask(struct device *dev, u64 mask)
{
 if (!dma_supported(dev, mask))
  return -5;

 dma_check_mask(dev, mask);

 dev->coherent_dma_mask = mask;
 return 0;
}
# 707 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
 int rc = dma_set_mask(dev, mask);
 if (rc == 0)
  dma_set_coherent_mask(dev, mask);
 return rc;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_coerce_mask_and_coherent(struct device *dev, u64 mask)
{
 dev->dma_mask = &dev->coherent_dma_mask;
 return dma_set_mask_and_coherent(dev, mask);
}

extern u64 dma_get_required_mask(struct device *dev);
# 737 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int dma_get_max_seg_size(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->max_segment_size)
  return dev->dma_parms->max_segment_size;
 return 0x00010000;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_set_max_seg_size(struct device *dev, unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 }
 return -5;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long dma_get_seg_boundary(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->segment_boundary_mask)
  return dev->dma_parms->segment_boundary_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 }
 return -5;
}
# 776 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_zalloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t flag)
{
 void *ret = dma_alloc_coherent(dev, size, dma_handle,
           flag | (( gfp_t)0x8000u));
 return ret;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_get_cache_alignment(void)
{

 return (1 << 7);

 return 1;
}





int dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
    dma_addr_t device_addr, size_t size, int flags);
void dma_release_declared_memory(struct device *dev);
void *dma_mark_declared_memory_occupied(struct device *dev,
     dma_addr_t device_addr, size_t size);
dma_addr_t dma_get_device_base(struct device *dev,
          struct dma_coherent_mem *mem);
unsigned long dma_get_size(struct dma_coherent_mem *mem);
# 838 "../include/linux/dma-mapping.h"
int dma_configure(struct device *dev);
void dma_deconfigure(struct device *dev);
# 852 "../include/linux/dma-mapping.h"
extern void *dmam_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
          dma_addr_t dma_handle);
extern void *dmam_alloc_attrs(struct device *dev, size_t size,
         dma_addr_t *dma_handle, gfp_t gfp,
         unsigned long attrs);

extern int dmam_declare_coherent_memory(struct device *dev,
     phys_addr_t phys_addr,
     dma_addr_t device_addr, size_t size,
     int flags);
extern void dmam_release_declared_memory(struct device *dev);
# 878 "../include/linux/dma-mapping.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_alloc_wc(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t gfp)
{
 return dma_alloc_attrs(dev, size, dma_addr, gfp,
          (1UL << 2));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_free_wc(struct device *dev, size_t size,
          void *cpu_addr, dma_addr_t dma_addr)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_addr,
         (1UL << 2));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_mmap_wc(struct device *dev,
         struct vm_area_struct *vma,
         void *cpu_addr, dma_addr_t dma_addr,
         size_t size)
{
 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size,
         (1UL << 2));
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *dma_alloc_nonconsistent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t flag)
{
 unsigned long attrs = (1UL << 3);

 return dma_alloc_attrs(dev, size, dma_handle, flag, attrs);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dma_free_nonconsistent(struct device *dev, size_t size,
     void *cpu_addr, dma_addr_t dma_handle)
{
 unsigned long attrs = (1UL << 3);

 return dma_free_attrs(dev, size, cpu_addr, dma_handle, attrs);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dma_mmap_nonconsistent(struct device *dev,
  struct vm_area_struct *vma, void *cpu_addr,
  dma_addr_t dma_addr, size_t size)
{
 unsigned long attrs = (1UL << 3);

 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size, attrs);
}
# 35 "../include/linux/skbuff.h" 2
# 1 "../include/linux/netdev_features.h" 1
# 17 "../include/linux/netdev_features.h"
typedef u64 netdev_features_t;

enum {
 NETIF_F_SG_BIT,
 NETIF_F_IP_CSUM_BIT,
 __UNUSED_NETIF_F_1,
 NETIF_F_HW_CSUM_BIT,
 NETIF_F_IPV6_CSUM_BIT,
 NETIF_F_HIGHDMA_BIT,
 NETIF_F_FRAGLIST_BIT,
 NETIF_F_HW_VLAN_CTAG_TX_BIT,
 NETIF_F_HW_VLAN_CTAG_RX_BIT,
 NETIF_F_HW_VLAN_CTAG_FILTER_BIT,
 NETIF_F_VLAN_CHALLENGED_BIT,
 NETIF_F_GSO_BIT,
 NETIF_F_LLTX_BIT,

 NETIF_F_NETNS_LOCAL_BIT,
 NETIF_F_GRO_BIT,
 NETIF_F_LRO_BIT,

     NETIF_F_GSO_SHIFT,
 NETIF_F_TSO_BIT
  = NETIF_F_GSO_SHIFT,
 NETIF_F_GSO_ROBUST_BIT,
 NETIF_F_TSO_ECN_BIT,
 NETIF_F_TSO_MANGLEID_BIT,
 NETIF_F_TSO6_BIT,
 NETIF_F_FSO_BIT,
 NETIF_F_GSO_GRE_BIT,
 NETIF_F_GSO_GRE_CSUM_BIT,
 NETIF_F_GSO_IPXIP4_BIT,
 NETIF_F_GSO_IPXIP6_BIT,
 NETIF_F_GSO_UDP_TUNNEL_BIT,
 NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT,
 NETIF_F_GSO_PARTIAL_BIT,



 NETIF_F_GSO_TUNNEL_REMCSUM_BIT,
 NETIF_F_GSO_SCTP_BIT,
 NETIF_F_GSO_ESP_BIT,
 NETIF_F_GSO_UDP_BIT,
 NETIF_F_GSO_UDP_L4_BIT,
     NETIF_F_GSO_LAST =
  NETIF_F_GSO_UDP_L4_BIT,

 NETIF_F_FCOE_CRC_BIT,
 NETIF_F_SCTP_CRC_BIT,
 NETIF_F_FCOE_MTU_BIT,
 NETIF_F_NTUPLE_BIT,
 NETIF_F_RXHASH_BIT,
 NETIF_F_RXCSUM_BIT,
 NETIF_F_NOCACHE_COPY_BIT,
 NETIF_F_LOOPBACK_BIT,
 NETIF_F_RXFCS_BIT,
 NETIF_F_RXALL_BIT,
 NETIF_F_HW_VLAN_STAG_TX_BIT,
 NETIF_F_HW_VLAN_STAG_RX_BIT,
 NETIF_F_HW_VLAN_STAG_FILTER_BIT,
 NETIF_F_HW_L2FW_DOFFLOAD_BIT,

 NETIF_F_HW_TC_BIT,
 NETIF_F_HW_ESP_BIT,
 NETIF_F_HW_ESP_TX_CSUM_BIT,
 NETIF_F_RX_UDP_TUNNEL_PORT_BIT,
 NETIF_F_HW_MACSEC_BIT,

 NETIF_F_GRO_HW_BIT,
# 94 "../include/linux/netdev_features.h"
     NETDEV_FEATURE_COUNT
};
# 157 "../include/linux/netdev_features.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int find_next_netdev_feature(u64 feature, unsigned long start)
{



 feature &= ~0ULL >> (-start & ((sizeof(feature) * 8) - 1));

 return fls64(feature) - 1;
}
# 36 "../include/linux/skbuff.h" 2

# 1 "../include/linux/sched/clock.h" 1
# 15 "../include/linux/sched/clock.h"
extern unsigned long long __attribute__((no_instrument_function)) sched_clock(void);




extern u64 running_clock(void);
extern u64 sched_clock_cpu(int cpu);


extern void sched_clock_init(void);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sched_clock_tick(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void clear_sched_clock_stable(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sched_clock_idle_sleep_event(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sched_clock_idle_wakeup_event(void)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 cpu_clock(int cpu)
{
 return sched_clock();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 local_clock(void)
{
 return sched_clock();
}
# 94 "../include/linux/sched/clock.h"
extern void enable_sched_clock_irqtime(void);
extern void disable_sched_clock_irqtime(void);
# 38 "../include/linux/skbuff.h" 2
# 1 "../include/net/flow_dissector.h" 1





# 1 "../include/linux/in6.h" 1
# 23 "../include/linux/in6.h"
# 1 "../include/uapi/linux/in6.h" 1
# 26 "../include/uapi/linux/in6.h"
# 1 "../include/uapi/linux/libc-compat.h" 1
# 27 "../include/uapi/linux/in6.h" 2






struct in6_addr {
 union {
  __u8 u6_addr8[16];

  __be16 u6_addr16[8];
  __be32 u6_addr32[4];

 } in6_u;





};



struct sockaddr_in6 {
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;
};



struct ipv6_mreq {

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;
};




struct in6_flowlabel_req {
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;

};
# 24 "../include/linux/in6.h" 2





extern const struct in6_addr in6addr_any;

extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_linklocal_allnodes;


extern const struct in6_addr in6addr_linklocal_allrouters;


extern const struct in6_addr in6addr_interfacelocal_allnodes;


extern const struct in6_addr in6addr_interfacelocal_allrouters;


extern const struct in6_addr in6addr_sitelocal_allrouters;
# 7 "../include/net/flow_dissector.h" 2
# 1 "../include/linux/siphash.h" 1
# 20 "../include/linux/siphash.h"
typedef struct {
 u64 key[2];
} siphash_key_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool siphash_key_is_zero(const siphash_key_t *key)
{
 return !(key->key[0] | key->key[1]);
}

u64 __siphash_aligned(const void *data, size_t len, const siphash_key_t *key);




u64 siphash_1u64(const u64 a, const siphash_key_t *key);
u64 siphash_2u64(const u64 a, const u64 b, const siphash_key_t *key);
u64 siphash_3u64(const u64 a, const u64 b, const u64 c,
   const siphash_key_t *key);
u64 siphash_4u64(const u64 a, const u64 b, const u64 c, const u64 d,
   const siphash_key_t *key);
u64 siphash_1u32(const u32 a, const siphash_key_t *key);
u64 siphash_3u32(const u32 a, const u32 b, const u32 c,
   const siphash_key_t *key);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 siphash_2u32(const u32 a, const u32 b,
          const siphash_key_t *key)
{
 return siphash_1u64((u64)b << 32 | a, key);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 siphash_4u32(const u32 a, const u32 b, const u32 c,
          const u32 d, const siphash_key_t *key)
{
 return siphash_2u64((u64)b << 32 | a, (u64)d << 32 | c, key);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ___siphash_aligned(const __le64 *data, size_t len,
         const siphash_key_t *key)
{
 if (__builtin_constant_p(len) && len == 4)
  return siphash_1u32(__le32_to_cpup((const __le32 *)data), key);
 if (__builtin_constant_p(len) && len == 8)
  return siphash_1u64((( __u64)(__le64)(data[0])), key);
 if (__builtin_constant_p(len) && len == 16)
  return siphash_2u64((( __u64)(__le64)(data[0])), (( __u64)(__le64)(data[1])),
        key);
 if (__builtin_constant_p(len) && len == 24)
  return siphash_3u64((( __u64)(__le64)(data[0])), (( __u64)(__le64)(data[1])),
        (( __u64)(__le64)(data[2])), key);
 if (__builtin_constant_p(len) && len == 32)
  return siphash_4u64((( __u64)(__le64)(data[0])), (( __u64)(__le64)(data[1])),
        (( __u64)(__le64)(data[2])), (( __u64)(__le64)(data[3])),
        key);
 return __siphash_aligned(data, len, key);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 siphash(const void *data, size_t len,
     const siphash_key_t *key)
{




 return ___siphash_aligned(data, len, key);
}


typedef struct {
 unsigned long key[2];
} hsiphash_key_t;

u32 __hsiphash_aligned(const void *data, size_t len,
         const hsiphash_key_t *key);





u32 hsiphash_1u32(const u32 a, const hsiphash_key_t *key);
u32 hsiphash_2u32(const u32 a, const u32 b, const hsiphash_key_t *key);
u32 hsiphash_3u32(const u32 a, const u32 b, const u32 c,
    const hsiphash_key_t *key);
u32 hsiphash_4u32(const u32 a, const u32 b, const u32 c, const u32 d,
    const hsiphash_key_t *key);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ___hsiphash_aligned(const __le32 *data, size_t len,
          const hsiphash_key_t *key)
{
 if (__builtin_constant_p(len) && len == 4)
  return hsiphash_1u32((( __u32)(__le32)(data[0])), key);
 if (__builtin_constant_p(len) && len == 8)
  return hsiphash_2u32((( __u32)(__le32)(data[0])), (( __u32)(__le32)(data[1])),
         key);
 if (__builtin_constant_p(len) && len == 12)
  return hsiphash_3u32((( __u32)(__le32)(data[0])), (( __u32)(__le32)(data[1])),
         (( __u32)(__le32)(data[2])), key);
 if (__builtin_constant_p(len) && len == 16)
  return hsiphash_4u32((( __u32)(__le32)(data[0])), (( __u32)(__le32)(data[1])),
         (( __u32)(__le32)(data[2])), (( __u32)(__le32)(data[3])),
         key);
 return __hsiphash_aligned(data, len, key);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 hsiphash(const void *data, size_t len,
      const hsiphash_key_t *key)
{




 return ___hsiphash_aligned(data, len, key);
}
# 8 "../include/net/flow_dissector.h" 2

# 1 "../include/uapi/linux/if_ether.h" 1
# 159 "../include/uapi/linux/if_ether.h"
struct ethhdr {
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;
} __attribute__((packed));
# 10 "../include/net/flow_dissector.h" 2





struct flow_dissector_key_control {
 u16 thoff;
 u16 addr_type;
 u32 flags;
};





enum flow_dissect_ret {
 FLOW_DISSECT_RET_OUT_GOOD,
 FLOW_DISSECT_RET_OUT_BAD,
 FLOW_DISSECT_RET_PROTO_AGAIN,
 FLOW_DISSECT_RET_IPPROTO_AGAIN,
 FLOW_DISSECT_RET_CONTINUE,
};







struct flow_dissector_key_basic {
 __be16 n_proto;
 u8 ip_proto;
 u8 padding;
};

struct flow_dissector_key_tags {
 u32 flow_label;
};

struct flow_dissector_key_vlan {
 u16 vlan_id:12,
  vlan_priority:3;
 u16 padding;
};

struct flow_dissector_key_mpls {
 u32 mpls_ttl:8,
  mpls_bos:1,
  mpls_tc:3,
  mpls_label:20;
};

struct flow_dissector_key_keyid {
 __be32 keyid;
};






struct flow_dissector_key_ipv4_addrs {

 __be32 src;
 __be32 dst;
};






struct flow_dissector_key_ipv6_addrs {

 struct in6_addr src;
 struct in6_addr dst;
};





struct flow_dissector_key_tipc_addrs {
 __be32 srcnode;
};






struct flow_dissector_key_addrs {
 union {
  struct flow_dissector_key_ipv4_addrs v4addrs;
  struct flow_dissector_key_ipv6_addrs v6addrs;
  struct flow_dissector_key_tipc_addrs tipcaddrs;
 };
};
# 119 "../include/net/flow_dissector.h"
struct flow_dissector_key_arp {
 __u32 sip;
 __u32 tip;
 __u8 op;
 unsigned char sha[6];
 unsigned char tha[6];
};







struct flow_dissector_key_ports {
 union {
  __be32 ports;
  struct {
   __be16 src;
   __be16 dst;
  };
 };
};
# 150 "../include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
 union {
  __be16 icmp;
  struct {
   u8 type;
   u8 code;
  };
 };
};






struct flow_dissector_key_eth_addrs {

 unsigned char dst[6];
 unsigned char src[6];
};





struct flow_dissector_key_tcp {
 __be16 flags;
};






struct flow_dissector_key_ip {
 __u8 tos;
 __u8 ttl;
};

enum flow_dissector_key_id {
 FLOW_DISSECTOR_KEY_CONTROL,
 FLOW_DISSECTOR_KEY_BASIC,
 FLOW_DISSECTOR_KEY_IPV4_ADDRS,
 FLOW_DISSECTOR_KEY_IPV6_ADDRS,
 FLOW_DISSECTOR_KEY_PORTS,
 FLOW_DISSECTOR_KEY_ICMP,
 FLOW_DISSECTOR_KEY_ETH_ADDRS,
 FLOW_DISSECTOR_KEY_TIPC_ADDRS,
 FLOW_DISSECTOR_KEY_ARP,
 FLOW_DISSECTOR_KEY_VLAN,
 FLOW_DISSECTOR_KEY_FLOW_LABEL,
 FLOW_DISSECTOR_KEY_GRE_KEYID,
 FLOW_DISSECTOR_KEY_MPLS_ENTROPY,
 FLOW_DISSECTOR_KEY_ENC_KEYID,
 FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS,
 FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS,
 FLOW_DISSECTOR_KEY_ENC_CONTROL,
 FLOW_DISSECTOR_KEY_ENC_PORTS,
 FLOW_DISSECTOR_KEY_MPLS,
 FLOW_DISSECTOR_KEY_TCP,
 FLOW_DISSECTOR_KEY_IP,

 FLOW_DISSECTOR_KEY_MAX,
};






struct flow_dissector_key {
 enum flow_dissector_key_id key_id;
 size_t offset;

};

struct flow_dissector {
 unsigned int used_keys;
 unsigned short int offset[FLOW_DISSECTOR_KEY_MAX];
};

struct flow_keys {
 struct flow_dissector_key_control control;

 struct flow_dissector_key_basic basic __attribute__((aligned(__alignof__(u64))));
 struct flow_dissector_key_tags tags;
 struct flow_dissector_key_vlan vlan;
 struct flow_dissector_key_keyid keyid;
 struct flow_dissector_key_ports ports;
 struct flow_dissector_key_addrs addrs;
};




__be32 flow_get_u32_src(const struct flow_keys *flow);
__be32 flow_get_u32_dst(const struct flow_keys *flow);

extern struct flow_dissector flow_keys_dissector;
extern struct flow_dissector flow_keys_buf_dissector;
# 259 "../include/net/flow_dissector.h"
struct flow_keys_digest {
 u8 data[16];
};

void make_flow_keys_digest(struct flow_keys_digest *digest,
      const struct flow_keys *flow);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool flow_keys_have_l4(const struct flow_keys *keys)
{
 return (keys->ports.ports || keys->tags.flow_label);
}

u32 flow_hash_from_keys(struct flow_keys *keys);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dissector_uses_key(const struct flow_dissector *flow_dissector,
          enum flow_dissector_key_id key_id)
{
 return flow_dissector->used_keys & (1 << key_id);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_flow_dissector_target(struct flow_dissector *flow_dissector,
           enum flow_dissector_key_id key_id,
           void *target_container)
{
 return ((char *)target_container) + flow_dissector->offset[key_id];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
flow_dissector_init_keys(struct flow_dissector_key_control *key_control,
    struct flow_dissector_key_basic *key_basic)
{
 memset(key_control, 0, sizeof(*key_control));
 memset(key_basic, 0, sizeof(*key_basic));
}
# 39 "../include/linux/skbuff.h" 2
# 1 "../include/linux/splice.h" 1
# 12 "../include/linux/splice.h"
# 1 "../include/linux/pipe_fs_i.h" 1
# 21 "../include/linux/pipe_fs_i.h"
struct pipe_buffer {
 struct page *page;
 unsigned int offset, len;
 const struct pipe_buf_operations *ops;
 unsigned int flags;
 unsigned long private;
};
# 48 "../include/linux/pipe_fs_i.h"
struct pipe_inode_info {
 struct mutex mutex;
 wait_queue_head_t wait;
 unsigned int nrbufs, curbuf, buffers;
 unsigned int readers;
 unsigned int writers;
 unsigned int files;
 unsigned int waiting_writers;
 unsigned int r_counter;
 unsigned int w_counter;
 struct page *tmp_page;
 struct fasync_struct *fasync_readers;
 struct fasync_struct *fasync_writers;
 struct pipe_buffer *bufs;
 struct user_struct *user;
};
# 75 "../include/linux/pipe_fs_i.h"
struct pipe_buf_operations {





 int can_merge;
# 90 "../include/linux/pipe_fs_i.h"
 int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *);





 void (*release)(struct pipe_inode_info *, struct pipe_buffer *);
# 106 "../include/linux/pipe_fs_i.h"
 int (*steal)(struct pipe_inode_info *, struct pipe_buffer *);




 bool (*get)(struct pipe_inode_info *, struct pipe_buffer *);
};
# 121 "../include/linux/pipe_fs_i.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((warn_unused_result)) bool pipe_buf_get(struct pipe_inode_info *pipe,
    struct pipe_buffer *buf)
{
 return buf->ops->get(pipe, buf);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pipe_buf_release(struct pipe_inode_info *pipe,
        struct pipe_buffer *buf)
{
 const struct pipe_buf_operations *ops = buf->ops;

 buf->ops = ((void *)0);
 ops->release(pipe, buf);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pipe_buf_confirm(struct pipe_inode_info *pipe,
       struct pipe_buffer *buf)
{
 return buf->ops->confirm(pipe, buf);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pipe_buf_steal(struct pipe_inode_info *pipe,
     struct pipe_buffer *buf)
{
 return buf->ops->steal(pipe, buf);
}






void pipe_lock(struct pipe_inode_info *);
void pipe_unlock(struct pipe_inode_info *);
void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);

extern unsigned int pipe_max_size, pipe_min_size;
extern unsigned long pipe_user_pages_hard;
extern unsigned long pipe_user_pages_soft;
int pipe_proc_fn(struct ctl_table *, int, void *, size_t *, loff_t *);


void pipe_wait(struct pipe_inode_info *pipe);

struct pipe_inode_info *alloc_pipe_info(void);
void free_pipe_info(struct pipe_inode_info *);


bool generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
int generic_pipe_buf_confirm(struct pipe_inode_info *, struct pipe_buffer *);
int generic_pipe_buf_steal(struct pipe_inode_info *, struct pipe_buffer *);
int generic_pipe_buf_nosteal(struct pipe_inode_info *, struct pipe_buffer *);
void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
void pipe_buf_mark_unmergeable(struct pipe_buffer *buf);

extern const struct pipe_buf_operations nosteal_pipe_buf_ops;


long pipe_fcntl(struct file *, unsigned int, unsigned long arg);
struct pipe_inode_info *get_pipe_info(struct file *file);

int create_pipe_files(struct file **, int);
# 13 "../include/linux/splice.h" 2
# 29 "../include/linux/splice.h"
struct splice_desc {
 size_t total_len;
 unsigned int len;
 unsigned int flags;



 union {
  void *userptr;
  struct file *file;
  void *data;
 } u;
 loff_t pos;
 loff_t *opos;
 size_t num_spliced;
 bool need_wakeup;
};

struct partial_page {
 unsigned int offset;
 unsigned int len;
 unsigned long private;
};




struct splice_pipe_desc {
 struct page **pages;
 struct partial_page *partial;
 int nr_pages;
 unsigned int nr_pages_max;
 const struct pipe_buf_operations *ops;
 void (*spd_release)(struct splice_pipe_desc *, unsigned int);
};

typedef int (splice_actor)(struct pipe_inode_info *, struct pipe_buffer *,
      struct splice_desc *);
typedef int (splice_direct_actor)(struct pipe_inode_info *,
      struct splice_desc *);

extern ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *,
    loff_t *, size_t, unsigned int,
    splice_actor *);
extern ssize_t __splice_from_pipe(struct pipe_inode_info *,
      struct splice_desc *, splice_actor *);
extern ssize_t splice_to_pipe(struct pipe_inode_info *,
         struct splice_pipe_desc *);
extern ssize_t add_to_pipe(struct pipe_inode_info *,
         struct pipe_buffer *);
extern ssize_t splice_direct_to_actor(struct file *, struct splice_desc *,
          splice_direct_actor *);




extern int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
extern void splice_shrink_spd(struct splice_pipe_desc *);

extern const struct pipe_buf_operations page_cache_pipe_buf_ops;
extern const struct pipe_buf_operations default_pipe_buf_ops;
# 40 "../include/linux/skbuff.h" 2

# 1 "../include/uapi/linux/if_packet.h" 1






struct sockaddr_pkt {
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;
};

struct sockaddr_ll {
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];
};
# 73 "../include/uapi/linux/if_packet.h"
struct tpacket_stats {
 unsigned int tp_packets;
 unsigned int tp_drops;
};

struct tpacket_stats_v3 {
 unsigned int tp_packets;
 unsigned int tp_drops;
 unsigned int tp_freeze_q_cnt;
};

struct tpacket_rollover_stats {
 __u64 __attribute__((aligned(8))) tp_all;
 __u64 __attribute__((aligned(8))) tp_huge;
 __u64 __attribute__((aligned(8))) tp_failed;
};

union tpacket_stats_u {
 struct tpacket_stats stats1;
 struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
};
# 130 "../include/uapi/linux/if_packet.h"
struct tpacket_hdr {
 unsigned long tp_status;
 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;
};





struct tpacket2_hdr {
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u8 tp_padding[4];
};

struct tpacket_hdr_variant1 {
 __u32 tp_rxhash;
 __u32 tp_vlan_tci;
 __u16 tp_vlan_tpid;
 __u16 tp_padding;
};

struct tpacket3_hdr {
 __u32 tp_next_offset;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u32 tp_snaplen;
 __u32 tp_len;
 __u32 tp_status;
 __u16 tp_mac;
 __u16 tp_net;

 union {
  struct tpacket_hdr_variant1 hv1;
 };
 __u8 tp_padding[8];
};

struct tpacket_bd_ts {
 unsigned int ts_sec;
 union {
  unsigned int ts_usec;
  unsigned int ts_nsec;
 };
};

struct tpacket_hdr_v1 {
 __u32 block_status;
 __u32 num_pkts;
 __u32 offset_to_first_pkt;




 __u32 blk_len;
# 207 "../include/uapi/linux/if_packet.h"
 __u64 __attribute__((aligned(8))) seq_num;
# 234 "../include/uapi/linux/if_packet.h"
 struct tpacket_bd_ts ts_first_pkt, ts_last_pkt;
};

union tpacket_bd_header_u {
 struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
 __u32 version;
 __u32 offset_to_priv;
 union tpacket_bd_header_u hdr;
};




enum tpacket_versions {
 TPACKET_V1,
 TPACKET_V2,
 TPACKET_V3
};
# 269 "../include/uapi/linux/if_packet.h"
struct tpacket_req {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
};

struct tpacket_req3 {
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
 unsigned int tp_retire_blk_tov;
 unsigned int tp_sizeof_priv;
 unsigned int tp_feature_req_word;
};

union tpacket_req_u {
 struct tpacket_req req;
 struct tpacket_req3 req3;
};

struct packet_mreq {
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];
};
# 42 "../include/linux/skbuff.h" 2
# 1 "../include/net/flow.h" 1
# 25 "../include/net/flow.h"
struct flowi_tunnel {
 __be64 tun_id;
};

struct flowi_common {
 int flowic_oif;
 int flowic_iif;
 __u32 flowic_mark;
 __u8 flowic_tos;
 __u8 flowic_scope;
 __u8 flowic_proto;
 __u8 flowic_flags;



 __u32 flowic_secid;
 struct flowi_tunnel flowic_tun_key;
 kuid_t flowic_uid;
};

union flowi_uli {
 struct {
  __be16 dport;
  __be16 sport;
 } ports;

 struct {
  __u8 type;
  __u8 code;
 } icmpt;

 struct {
  __le16 dport;
  __le16 sport;
 } dnports;

 __be32 spi;
 __be32 gre_key;

 struct {
  __u8 type;
 } mht;
};

struct flowi4 {
 struct flowi_common __fl_common;
# 83 "../include/net/flow.h"
 __be32 saddr;
 __be32 daddr;

 union flowi_uli uli;







} __attribute__((__aligned__(64/8)));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void flowi4_init_output(struct flowi4 *fl4, int oif,
          __u32 mark, __u8 tos, __u8 scope,
          __u8 proto, __u8 flags,
          __be32 daddr, __be32 saddr,
          __be16 dport, __be16 sport,
          kuid_t uid)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_iif = 1;
 fl4->__fl_common.flowic_mark = mark;
 fl4->__fl_common.flowic_tos = tos;
 fl4->__fl_common.flowic_scope = scope;
 fl4->__fl_common.flowic_proto = proto;
 fl4->__fl_common.flowic_flags = flags;
 fl4->__fl_common.flowic_secid = 0;
 fl4->__fl_common.flowic_tun_key.tun_id = 0;
 fl4->__fl_common.flowic_uid = uid;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
 fl4->uli.ports.dport = dport;
 fl4->uli.ports.sport = sport;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void flowi4_update_output(struct flowi4 *fl4, int oif, __u8 tos,
     __be32 daddr, __be32 saddr)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_tos = tos;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
}


struct flowi6 {
 struct flowi_common __fl_common;
# 141 "../include/net/flow.h"
 struct in6_addr daddr;
 struct in6_addr saddr;

 __be32 flowlabel;
 union flowi_uli uli;







 __u32 mp_hash;
} __attribute__((__aligned__(64/8)));

struct flowidn {
 struct flowi_common __fl_common;






 __le16 daddr;
 __le16 saddr;
 union flowi_uli uli;


} __attribute__((__aligned__(64/8)));

struct flowi {
 union {
  struct flowi_common __fl_common;
  struct flowi4 ip4;
  struct flowi6 ip6;
  struct flowidn dn;
 } u;
# 188 "../include/net/flow.h"
} __attribute__((__aligned__(64/8)));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct flowi *flowi4_to_flowi(struct flowi4 *fl4)
{
 return ({ void *__mptr = (void *)(fl4); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(fl4)), typeof(((struct flowi *)0)->u.ip4)) && !__builtin_types_compatible_p(typeof(*(fl4)), typeof(void)))); extern void __compiletime_assert_77(void) ; if (__cond) __compiletime_assert_77(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.ip4))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct flowi *flowi6_to_flowi(struct flowi6 *fl6)
{
 return ({ void *__mptr = (void *)(fl6); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(fl6)), typeof(((struct flowi *)0)->u.ip6)) && !__builtin_types_compatible_p(typeof(*(fl6)), typeof(void)))); extern void __compiletime_assert_78(void) ; if (__cond) __compiletime_assert_78(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.ip6))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct flowi *flowidn_to_flowi(struct flowidn *fldn)
{
 return ({ void *__mptr = (void *)(fldn); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(fldn)), typeof(((struct flowi *)0)->u.dn)) && !__builtin_types_compatible_p(typeof(*(fldn)), typeof(void)))); extern void __compiletime_assert_79(void) ; if (__cond) __compiletime_assert_79(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct flowi *)(__mptr - __builtin_offsetof(struct flowi, u.dn))); });
}

typedef unsigned long flow_compare_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int flow_key_size(u16 family)
{
 switch (family) {
 case 2:
  do { bool __cond = !(!(sizeof(struct flowi4) % sizeof(flow_compare_t))); extern void __compiletime_assert_80(void) ; if (__cond) __compiletime_assert_80(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
  return sizeof(struct flowi4) / sizeof(flow_compare_t);
 case 10:
  do { bool __cond = !(!(sizeof(struct flowi6) % sizeof(flow_compare_t))); extern void __compiletime_assert_81(void) ; if (__cond) __compiletime_assert_81(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
  return sizeof(struct flowi6) / sizeof(flow_compare_t);
 case 12:
  do { bool __cond = !(!(sizeof(struct flowidn) % sizeof(flow_compare_t))); extern void __compiletime_assert_82(void) ; if (__cond) __compiletime_assert_82(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
  return sizeof(struct flowidn) / sizeof(flow_compare_t);
 }
 return 0;
}

__u32 __get_hash_from_flowi6(const struct flowi6 *fl6, struct flow_keys *keys);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 get_hash_from_flowi6(const struct flowi6 *fl6)
{
 struct flow_keys keys;

 return __get_hash_from_flowi6(fl6, &keys);
}

__u32 __get_hash_from_flowi4(const struct flowi4 *fl4, struct flow_keys *keys);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 get_hash_from_flowi4(const struct flowi4 *fl4)
{
 struct flow_keys keys;

 return __get_hash_from_flowi4(fl4, &keys);
}
# 43 "../include/linux/skbuff.h" 2
# 242 "../include/linux/skbuff.h"
struct net_device;
struct scatterlist;
struct pipe_inode_info;
struct iov_iter;
struct napi_struct;


struct nf_conntrack {
 atomic_t use;
};



struct nf_bridge_info {
 refcount_t use;
 enum {
  BRNF_PROTO_UNCHANGED,
  BRNF_PROTO_8021Q,
  BRNF_PROTO_PPPOE
 } orig_proto:8;
 u8 pkt_otherhost:1;
 u8 in_prerouting:1;
 u8 bridged_dnat:1;
 __u16 frag_max_size;
 struct net_device *physindev;


 struct net_device *physoutdev;
 union {

  __be32 ipv4_daddr;
  struct in6_addr ipv6_daddr;





  char neigh_header[8];
 };
};


struct sk_buff_head {

 struct sk_buff *next;
 struct sk_buff *prev;

 __u32 qlen;
 spinlock_t lock;
};

struct sk_buff;
# 307 "../include/linux/skbuff.h"
extern int sysctl_max_skb_frags;






typedef struct skb_frag_struct skb_frag_t;

struct skb_frag_struct {
 struct {
  struct page *p;
 } page;

 __u32 page_offset;
 __u32 size;




};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_frag_size(const skb_frag_t *frag)
{
 return frag->size;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
 frag->size = size;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_size_add(skb_frag_t *frag, int delta)
{
 frag->size += delta;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
 frag->size -= delta;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_frag_must_loop(struct page *p)
{




 return false;
}
# 401 "../include/linux/skbuff.h"
struct skb_shared_hwtstamps {
 ktime_t hwtstamp;
};


enum {

 SKBTX_HW_TSTAMP = 1 << 0,


 SKBTX_SW_TSTAMP = 1 << 1,


 SKBTX_IN_PROGRESS = 1 << 2,


 SKBTX_DEV_ZEROCOPY = 1 << 3,


 SKBTX_WIFI_STATUS = 1 << 4,






 SKBTX_SHARED_FRAG = 1 << 5,


 SKBTX_SCHED_TSTAMP = 1 << 6,
};
# 446 "../include/linux/skbuff.h"
struct ubuf_info {
 void (*callback)(struct ubuf_info *, bool zerocopy_success);
 union {
  struct {
   unsigned long desc;
   void *ctx;
  };
  struct {
   u32 id;
   u16 len;
   u16 zerocopy:1;
   u32 bytelen;
  };
 };
 refcount_t refcnt;

 struct mmpin {
  struct user_struct *user;
  unsigned int num_pg;
 } mmp;
};



struct ubuf_info *sock_zerocopy_alloc(struct sock *sk, size_t size);
struct ubuf_info *sock_zerocopy_realloc(struct sock *sk, size_t size,
     struct ubuf_info *uarg);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sock_zerocopy_get(struct ubuf_info *uarg)
{
 refcount_inc(&uarg->refcnt);
}

void sock_zerocopy_put(struct ubuf_info *uarg);
void sock_zerocopy_put_abort(struct ubuf_info *uarg);

void sock_zerocopy_callback(struct ubuf_info *uarg, bool success);

int skb_zerocopy_iter_stream(struct sock *sk, struct sk_buff *skb,
        struct msghdr *msg, int len,
        struct ubuf_info *uarg);




struct skb_shared_info {
 unsigned short _unused;
 unsigned char nr_frags;
 __u8 tx_flags;
 unsigned short gso_size;

 unsigned short gso_segs;
 struct sk_buff *frag_list;
 struct skb_shared_hwtstamps hwtstamps;
 unsigned int gso_type;
 u32 tskey;
 __be32 ip6_frag_id;




 atomic_t dataref;



 void * destructor_arg;


 skb_frag_t frags[(65536/((1UL) << 12) + 1)];
};
# 532 "../include/linux/skbuff.h"
enum {
 SKB_FCLONE_UNAVAILABLE,
 SKB_FCLONE_ORIG,
 SKB_FCLONE_CLONE,
};

enum {
 SKB_GSO_TCPV4 = 1 << 0,


 SKB_GSO_DODGY = 1 << 1,


 SKB_GSO_TCP_ECN = 1 << 2,

 SKB_GSO_TCP_FIXEDID = 1 << 3,

 SKB_GSO_TCPV6 = 1 << 4,

 SKB_GSO_FCOE = 1 << 5,

 SKB_GSO_GRE = 1 << 6,

 SKB_GSO_GRE_CSUM = 1 << 7,

 SKB_GSO_IPXIP4 = 1 << 8,

 SKB_GSO_IPXIP6 = 1 << 9,

 SKB_GSO_UDP_TUNNEL = 1 << 10,

 SKB_GSO_UDP_TUNNEL_CSUM = 1 << 11,

 SKB_GSO_PARTIAL = 1 << 12,

 SKB_GSO_TUNNEL_REMCSUM = 1 << 13,

 SKB_GSO_SCTP = 1 << 14,

 SKB_GSO_ESP = 1 << 15,

 SKB_GSO_UDP = 1 << 16,

 SKB_GSO_UDP_L4 = 1 << 17,
};






typedef unsigned int sk_buff_data_t;
# 661 "../include/linux/skbuff.h"
struct sk_buff {
 union {
  struct {

   struct sk_buff *next;
   struct sk_buff *prev;

   union {
    struct net_device *dev;




    unsigned long dev_scratch;
   };
  };
  struct rb_node rbnode;
  struct list_head list;
 };

 union {
  struct sock *sk;
  int ip_defrag_offset;
 };

 union {
  ktime_t tstamp;
  u64 skb_mstamp;
 };






 char cb[48] __attribute__((aligned(8)));

 unsigned long _skb_refdst;
 void (*destructor)(struct sk_buff *skb);

 struct sec_path *sp;


 unsigned long _nfct;



 struct nf_bridge_info *nf_bridge;

 unsigned int len,
    data_len;
 __u16 mac_len,
    hdr_len;




 __u16 queue_mapping;
# 728 "../include/linux/skbuff.h"
 __u8 __cloned_offset[0];
 __u8 cloned:1,
    nohdr:1,
    fclone:2,
    peeked:1,
    head_frag:1,
    xmit_more:1,
    pfmemalloc:1;





 __u32 headers_start[0];
# 752 "../include/linux/skbuff.h"
 __u8 __pkt_type_offset[0];
 __u8 pkt_type:3;
 __u8 ignore_df:1;
 __u8 nf_trace:1;
 __u8 ip_summed:2;
 __u8 ooo_okay:1;

 __u8 l4_hash:1;
 __u8 sw_hash:1;
 __u8 wifi_acked_valid:1;
 __u8 wifi_acked:1;
 __u8 no_fcs:1;

 __u8 encapsulation:1;
 __u8 encap_hdr_csum:1;
 __u8 csum_valid:1;

 __u8 csum_complete_sw:1;
 __u8 csum_level:2;
 __u8 csum_not_inet:1;
 __u8 dst_pending_confirm:1;

 __u8 ndisc_nodetype:2;

 __u8 ipvs_property:1;

 __u8 inner_protocol_type:1;
 __u8 fast_forwarded:1;
 __u8 remcsum_offload:1;




 __u8 offload_fwd_mark:1;




 __u8 tc_skip_classify:1;
 __u8 tc_at_ingress:1;
 __u8 tc_redirected:1;
 __u8 tc_from_ingress:1;



 __u16 tc_index;


 union {
  __wsum csum;
  struct {
   __u16 csum_start;
   __u16 csum_offset;
  };
 };
 __u32 priority;
 int skb_iif;
 __u32 hash;
 __be16 vlan_proto;
 __u16 vlan_tci;

 union {
  unsigned int napi_id;
  unsigned int sender_cpu;
 };


 __u32 secmark;


 union {
  __u32 mark;
  __u32 reserved_tailroom;
 };

 union {
  __be16 inner_protocol;
  __u8 inner_ipproto;
 };

 __u16 inner_transport_header;
 __u16 inner_network_header;
 __u16 inner_mac_header;

 __be16 protocol;
 __u16 transport_header;
 __u16 network_header;
 __u16 mac_header;


 __u32 headers_end[0];



 sk_buff_data_t tail;
 sk_buff_data_t end;
 unsigned char *head,
    *data;
 unsigned int truesize;
 refcount_t users;
};
# 866 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_pfmemalloc(const struct sk_buff *skb)
{
 return __builtin_expect(!!(skb->pfmemalloc), 0);
}
# 885 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dst_entry *skb_dst(const struct sk_buff *skb)
{



 ({ int __ret_warn_on = !!((skb->_skb_refdst & 1UL) && !rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 892; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });


 return (struct dst_entry *)(skb->_skb_refdst & ~(1UL));
}
# 904 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst)
{
 skb->_skb_refdst = (unsigned long)dst;
}
# 919 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held() && !rcu_read_lock_bh_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 921; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 skb->_skb_refdst = (unsigned long)dst | 1UL;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_dst_is_noref(const struct sk_buff *skb)
{
 return (skb->_skb_refdst & 1UL) && skb_dst(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct rtable *skb_rtable(const struct sk_buff *skb)
{
 return (struct rtable *)skb_dst(skb);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_pkt_type_ok(u32 ptype)
{
 return ptype <= 3;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_napi_id(const struct sk_buff *skb)
{

 return skb->napi_id;



}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_unref(struct sk_buff *skb)
{
 if (__builtin_expect(!!(!skb), 0))
  return false;
 if (__builtin_expect(!!(refcount_read(&skb->users) == 1), 1))
  asm volatile("dmb " "ishld" : : : "memory");
 else if (__builtin_expect(!!(!refcount_dec_and_test(&skb->users)), 1))
  return false;

 return true;
}

void skb_release_head_state(struct sk_buff *skb);
void kfree_skb(struct sk_buff *skb);
void kfree_skb_list(struct sk_buff *segs);
void skb_tx_error(struct sk_buff *skb);
void consume_skb(struct sk_buff *skb);
void __consume_stateless_skb(struct sk_buff *skb);
void __kfree_skb(struct sk_buff *skb);


extern struct kmem_cache *skbuff_head_cache;

void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);
bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
        bool *fragstolen, int *delta_truesize);

struct sk_buff *__alloc_skb(unsigned int size, gfp_t priority, int flags,
       int node);
struct sk_buff *__build_skb(void *data, unsigned int frag_size);
struct sk_buff *build_skb(void *data, unsigned int frag_size);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *alloc_skb(unsigned int size,
     gfp_t priority)
{
 return __alloc_skb(size, priority, 0, (-1));
}

struct sk_buff *alloc_skb_with_frags(unsigned long header_len,
         unsigned long data_len,
         int max_page_order,
         int *errcode,
         gfp_t gfp_mask);


struct sk_buff_fclones {
 struct sk_buff skb1;

 struct sk_buff skb2;

 refcount_t fclone_ref;
};
# 1019 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_fclone_busy(const struct sock *sk,
       const struct sk_buff *skb)
{
 const struct sk_buff_fclones *fclones;

 fclones = ({ void *__mptr = (void *)(skb); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(skb)), typeof(((struct sk_buff_fclones *)0)->skb1)) && !__builtin_types_compatible_p(typeof(*(skb)), typeof(void)))); extern void __compiletime_assert_83(void) ; if (__cond) __compiletime_assert_83(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct sk_buff_fclones *)(__mptr - __builtin_offsetof(struct sk_buff_fclones, skb1))); });

 return skb->fclone == SKB_FCLONE_ORIG &&
        refcount_read(&fclones->fclone_ref) > 1 &&
        fclones->skb2.sk == sk;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *alloc_skb_fclone(unsigned int size,
            gfp_t priority)
{
 return __alloc_skb(size, priority, 0x01, (-1));
}

struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);
struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t priority);
struct sk_buff *skb_copy(const struct sk_buff *skb, gfp_t priority);
struct sk_buff *__pskb_copy_fclone(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask, bool fclone);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom,
       gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, headroom, gfp_mask, false);
}

int pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask);
struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
         unsigned int headroom);
struct sk_buff *skb_copy_expand(const struct sk_buff *skb, int newheadroom,
    int newtailroom, gfp_t priority);
int __attribute__((warn_unused_result)) skb_to_sgvec_nomark(struct sk_buff *skb, struct scatterlist *sg,
         int offset, int len);
int __attribute__((warn_unused_result)) skb_to_sgvec(struct sk_buff *skb, struct scatterlist *sg,
         int offset, int len);
int skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer);
int __skb_pad(struct sk_buff *skb, int pad, bool free_on_error);
# 1072 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_pad(struct sk_buff *skb, int pad)
{
 return __skb_pad(skb, pad, true);
}


int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,
       int getfrag(void *from, char *to, int offset,
     int len, int odd, struct sk_buff *skb),
       void *from, int length);

int skb_append_pagefrags(struct sk_buff *skb, struct page *page,
    int offset, size_t size);

struct skb_seq_state {
 __u32 lower_offset;
 __u32 upper_offset;
 __u32 frag_idx;
 __u32 stepped_offset;
 struct sk_buff *root_skb;
 struct sk_buff *cur_skb;
 __u8 *frag_data;
};

void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
     unsigned int to, struct skb_seq_state *st);
unsigned int skb_seq_read(unsigned int consumed, const u8 **data,
     struct skb_seq_state *st);
void skb_abort_seq_read(struct skb_seq_state *st);

unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
      unsigned int to, struct ts_config *config);
# 1131 "../include/linux/skbuff.h"
enum pkt_hash_types {
 PKT_HASH_TYPE_NONE,
 PKT_HASH_TYPE_L2,
 PKT_HASH_TYPE_L3,
 PKT_HASH_TYPE_L4,
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_clear_hash(struct sk_buff *skb)
{
 skb->hash = 0;
 skb->sw_hash = 0;
 skb->l4_hash = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_clear_hash_if_not_l4(struct sk_buff *skb)
{
 if (!skb->l4_hash)
  skb_clear_hash(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
 skb->l4_hash = is_l4;
 skb->sw_hash = is_sw;
 skb->hash = hash;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{

 __skb_set_hash(skb, hash, false, type == PKT_HASH_TYPE_L4);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
__skb_set_sw_hash(struct sk_buff *skb, __u32 hash, bool is_l4)
{
 __skb_set_hash(skb, hash, true, is_l4);
}

void __skb_get_hash(struct sk_buff *skb);
u32 __skb_get_hash_symmetric(const struct sk_buff *skb);
u32 skb_get_poff(const struct sk_buff *skb);
u32 __skb_get_poff(const struct sk_buff *skb, void *data,
     const struct flow_keys *keys, int hlen);
__be32 __skb_flow_get_ports(const struct sk_buff *skb, int thoff, u8 ip_proto,
       void *data, int hlen_proto);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __be32 skb_flow_get_ports(const struct sk_buff *skb,
     int thoff, u8 ip_proto)
{
 return __skb_flow_get_ports(skb, thoff, ip_proto, ((void *)0), 0);
}

void skb_flow_dissector_init(struct flow_dissector *flow_dissector,
        const struct flow_dissector_key *key,
        unsigned int key_count);

bool __skb_flow_dissect(const struct sk_buff *skb,
   struct flow_dissector *flow_dissector,
   void *target_container,
   void *data, __be16 proto, int nhoff, int hlen,
   unsigned int flags);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_flow_dissect(const struct sk_buff *skb,
        struct flow_dissector *flow_dissector,
        void *target_container, unsigned int flags)
{
 return __skb_flow_dissect(skb, flow_dissector, target_container,
      ((void *)0), 0, 0, 0, flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_flow_dissect_flow_keys(const struct sk_buff *skb,
           struct flow_keys *flow,
           unsigned int flags)
{
 memset(flow, 0, sizeof(*flow));
 return __skb_flow_dissect(skb, &flow_keys_dissector, flow,
      ((void *)0), 0, 0, 0, flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_flow_dissect_flow_keys_buf(struct flow_keys *flow,
        void *data, __be16 proto,
        int nhoff, int hlen,
        unsigned int flags)
{
 memset(flow, 0, sizeof(*flow));
 return __skb_flow_dissect(((void *)0), &flow_keys_buf_dissector, flow,
      data, proto, nhoff, hlen, flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 skb_get_hash(struct sk_buff *skb)
{
 if (!skb->l4_hash && !skb->sw_hash)
  __skb_get_hash(skb);

 return skb->hash;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 skb_get_hash_flowi6(struct sk_buff *skb, const struct flowi6 *fl6)
{
 if (!skb->l4_hash && !skb->sw_hash) {
  struct flow_keys keys;
  __u32 hash = __get_hash_from_flowi6(fl6, &keys);

  __skb_set_sw_hash(skb, hash, flow_keys_have_l4(&keys));
 }

 return skb->hash;
}

__u32 skb_get_hash_perturb(const struct sk_buff *skb,
      const siphash_key_t *perturb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 skb_get_hash_raw(const struct sk_buff *skb)
{
 return skb->hash;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_hash(struct sk_buff *to, const struct sk_buff *from)
{
 to->hash = from->hash;
 to->sw_hash = from->sw_hash;
 to->l4_hash = from->l4_hash;
};


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_end_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->end;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_end_offset(const struct sk_buff *skb)
{
 return skb->end;
}
# 1283 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
 return &((struct skb_shared_info *)(skb_end_pointer(skb)))->hwtstamps;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ubuf_info *skb_zcopy(struct sk_buff *skb)
{
 bool is_zcopy = skb && ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_DEV_ZEROCOPY;

 return is_zcopy ? ((struct ubuf_info *)(((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg)) : ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_zcopy_set(struct sk_buff *skb, struct ubuf_info *uarg)
{
 if (skb && uarg && !skb_zcopy(skb)) {
  sock_zerocopy_get(uarg);
  ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg = uarg;
  ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags |= (SKBTX_DEV_ZEROCOPY | SKBTX_SHARED_FRAG);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_zcopy_set_nouarg(struct sk_buff *skb, void *val)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg = (void *)((uintptr_t) val | 0x1UL);
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags |= (SKBTX_DEV_ZEROCOPY | SKBTX_SHARED_FRAG);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_zcopy_is_nouarg(struct sk_buff *skb)
{
 return (uintptr_t) ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg & 0x1UL;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_zcopy_get_nouarg(struct sk_buff *skb)
{
 return (void *)((uintptr_t) ((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg & ~0x1UL);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_zcopy_clear(struct sk_buff *skb, bool zerocopy)
{
 struct ubuf_info *uarg = skb_zcopy(skb);

 if (uarg) {
  if (skb_zcopy_is_nouarg(skb)) {

  } else if (uarg->callback == sock_zerocopy_callback) {
   uarg->zerocopy = uarg->zerocopy && zerocopy;
   sock_zerocopy_put(uarg);
  } else {
   uarg->callback(uarg, zerocopy);
  }

  ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags &= ~(SKBTX_DEV_ZEROCOPY | SKBTX_SHARED_FRAG);
 }
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_zcopy_abort(struct sk_buff *skb)
{
 struct ubuf_info *uarg = skb_zcopy(skb);

 if (uarg) {
  sock_zerocopy_put_abort(uarg);
  ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags &= ~(SKBTX_DEV_ZEROCOPY | SKBTX_SHARED_FRAG);
 }
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_queue_empty(const struct sk_buff_head *list)
{
 return list->next == (const struct sk_buff *) list;
}
# 1368 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_queue_empty_lockless(const struct sk_buff_head *list)
{
 return ({ union { typeof(list->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(list->next), __u.__c, sizeof(list->next)); else __read_once_size_nocheck(&(list->next), __u.__c, sizeof(list->next)); do { } while (0); __u.__val; }) == (const struct sk_buff *) list;
}
# 1381 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_queue_is_last(const struct sk_buff_head *list,
         const struct sk_buff *skb)
{
 return skb->next == (const struct sk_buff *) list;
}
# 1394 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_queue_is_first(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{
 return skb->prev == (const struct sk_buff *) list;
}
# 1408 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_queue_next(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_last(list, skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 1414; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 return skb->next;
}
# 1426 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_queue_prev(const struct sk_buff_head *list,
          const struct sk_buff *skb)
{



 do { if (__builtin_expect(!!(skb_queue_is_first(list, skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 1432; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 return skb->prev;
}
# 1443 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_get(struct sk_buff *skb)
{
 refcount_inc(&skb->users);
 return skb;
}
# 1462 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_cloned(const struct sk_buff *skb)
{
 return skb->cloned &&
        (({ union { typeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter), __u.__c, sizeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)); else __read_once_size_nocheck(&((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter), __u.__c, sizeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)); do { } while (0); __u.__val; }) & ((1 << 16) - 1)) != 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);

 if (skb_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}
# 1485 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_header_cloned(const struct sk_buff *skb)
{
 int dataref;

 if (!skb->cloned)
  return 0;

 dataref = ({ union { typeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter), __u.__c, sizeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)); else __read_once_size_nocheck(&((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter), __u.__c, sizeof((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)); do { } while (0); __u.__val; });
 dataref = (dataref & ((1 << 16) - 1)) - (dataref >> 16);
 return dataref != 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_header_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);

 if (skb_header_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}
# 1516 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_header_release(struct sk_buff *skb)
{
 do { if (__builtin_expect(!!(skb->nohdr), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 1518; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 skb->nohdr = 1;
 atomic_add(1 << 16, &((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref);
}
# 1530 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_header_release(struct sk_buff *skb)
{
 skb->nohdr = 1;
 ({ union { typeof(((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter))) ((1 + (1 << 16))) }; __write_once_size(&(((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)), __u.__c, sizeof(((&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter))); __u.__val; });
}
# 1544 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_shared(const struct sk_buff *skb)
{
 return refcount_read(&skb->users) != 1;
}
# 1562 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);
 if (skb_shared(skb)) {
  struct sk_buff *nskb = skb_clone(skb, pri);

  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 1597 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_unshare(struct sk_buff *skb,
       gfp_t pri)
{
 do { if (gfpflags_allow_blocking(pri)) do { do { } while (0); } while (0); } while (0);
 if (skb_cloned(skb)) {
  struct sk_buff *nskb = skb_copy(skb, pri);


  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
# 1627 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_peek(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->next;

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;
}
# 1645 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_peek_next(struct sk_buff *skb,
  const struct sk_buff_head *list_)
{
 struct sk_buff *next = skb->next;

 if (next == (struct sk_buff *)list_)
  next = ((void *)0);
 return next;
}
# 1668 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *skb_peek_tail(const struct sk_buff_head *list_)
{
 struct sk_buff *skb = ({ union { typeof(list_->prev) __val; char __c[1]; } __u; if (1) __read_once_size(&(list_->prev), __u.__c, sizeof(list_->prev)); else __read_once_size_nocheck(&(list_->prev), __u.__c, sizeof(list_->prev)); do { } while (0); __u.__val; });

 if (skb == (struct sk_buff *)list_)
  skb = ((void *)0);
 return skb;

}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 skb_queue_len(const struct sk_buff_head *list_)
{
 return list_->qlen;
}
# 1699 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_head_init(struct sk_buff_head *list)
{
 list->prev = list->next = (struct sk_buff *)list;
 list->qlen = 0;
}
# 1713 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_head_init(struct sk_buff_head *list)
{
 do { spinlock_check(&list->lock); do { *(&(&list->lock)->rlock) = (raw_spinlock_t) { .raw_lock = { 0 , 0 }, }; } while (0); } while (0);
 __skb_queue_head_init(list);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_head_init_class(struct sk_buff_head *list,
  struct lock_class_key *class)
{
 skb_queue_head_init(list);
 do { (void)(class); } while (0);
}







void skb_insert(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_insert(struct sk_buff *newsk,
    struct sk_buff *prev, struct sk_buff *next,
    struct sk_buff_head *list)
{



 ({ union { typeof(newsk->next) __val; char __c[1]; } __u = { .__val = ( typeof(newsk->next)) (next) }; __write_once_size(&(newsk->next), __u.__c, sizeof(newsk->next)); __u.__val; });
 ({ union { typeof(newsk->prev) __val; char __c[1]; } __u = { .__val = ( typeof(newsk->prev)) (prev) }; __write_once_size(&(newsk->prev), __u.__c, sizeof(newsk->prev)); __u.__val; });
 ({ union { typeof(next->prev) __val; char __c[1]; } __u = { .__val = ( typeof(next->prev)) (newsk) }; __write_once_size(&(next->prev), __u.__c, sizeof(next->prev)); __u.__val; });
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (newsk) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
 list->qlen++;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_splice(const struct sk_buff_head *list,
          struct sk_buff *prev,
          struct sk_buff *next)
{
 struct sk_buff *first = list->next;
 struct sk_buff *last = list->prev;

 ({ union { typeof(first->prev) __val; char __c[1]; } __u = { .__val = ( typeof(first->prev)) (prev) }; __write_once_size(&(first->prev), __u.__c, sizeof(first->prev)); __u.__val; });
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (first) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });

 ({ union { typeof(last->next) __val; char __c[1]; } __u = { .__val = ( typeof(last->next)) (next) }; __write_once_size(&(last->next), __u.__c, sizeof(last->next)); __u.__val; });
 ({ union { typeof(next->prev) __val; char __c[1]; } __u = { .__val = ( typeof(next->prev)) (last) }; __write_once_size(&(next->prev), __u.__c, sizeof(next->prev)); __u.__val; });
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_splice(const struct sk_buff_head *list,
        struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
 }
}
# 1783 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_splice_init(struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_splice_tail(const struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
 }
}
# 1815 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_queue_splice_tail_init(struct sk_buff_head *list,
           struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}
# 1836 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_after(struct sk_buff_head *list,
         struct sk_buff *prev,
         struct sk_buff *newsk)
{
 __skb_insert(newsk, prev, prev->next, list);
}

void skb_append(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_before(struct sk_buff_head *list,
          struct sk_buff *next,
          struct sk_buff *newsk)
{
 __skb_insert(newsk, next->prev, next, list);
}
# 1863 "../include/linux/skbuff.h"
void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_head(struct sk_buff_head *list,
        struct sk_buff *newsk)
{
 __skb_queue_after(list, (struct sk_buff *)list, newsk);
}
# 1880 "../include/linux/skbuff.h"
void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_tail(struct sk_buff_head *list,
       struct sk_buff *newsk)
{
 __skb_queue_before(list, (struct sk_buff *)list, newsk);
}





void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
 struct sk_buff *next, *prev;

 list->qlen--;
 next = skb->next;
 prev = skb->prev;
 skb->next = skb->prev = ((void *)0);
 ({ union { typeof(next->prev) __val; char __c[1]; } __u = { .__val = ( typeof(next->prev)) (prev) }; __write_once_size(&(next->prev), __u.__c, sizeof(next->prev)); __u.__val; });
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 1912 "../include/linux/skbuff.h"
struct sk_buff *skb_dequeue(struct sk_buff_head *list);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
# 1929 "../include/linux/skbuff.h"
struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek_tail(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_is_nonlinear(const struct sk_buff *skb)
{
 return skb->data_len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_headlen(const struct sk_buff *skb)
{
 return skb->len - skb->data_len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __skb_pagelen(const struct sk_buff *skb)
{
 unsigned int i, len = 0;

 for (i = ((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags - 1; (int)i >= 0; i--)
  len += skb_frag_size(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i]);
 return len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_pagelen(const struct sk_buff *skb)
{
 return skb_headlen(skb) + __skb_pagelen(skb);
}
# 1976 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_fill_page_desc(struct sk_buff *skb, int i,
     struct page *page, int off, int size)
{
 skb_frag_t *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i];






 frag->page.p = page;
 frag->page_offset = off;
 skb_frag_size_set(frag, size);

 page = compound_head(page);
 if (page_is_pfmemalloc(page))
  skb->pfmemalloc = true;
}
# 2009 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_fill_page_desc(struct sk_buff *skb, int i,
          struct page *page, int off, int size)
{
 __skb_fill_page_desc(skb, i, page, off, size);
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags = i + 1;
}

void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,
       int size, unsigned int truesize);

void skb_coalesce_rx_frag(struct sk_buff *skb, int i, int size,
     unsigned int truesize);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_tail_pointer(const struct sk_buff *skb)
{
 return skb->head + skb->tail;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_tail_pointer(struct sk_buff *skb)
{
 skb->tail = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_tail_pointer(struct sk_buff *skb, const int offset)
{
 skb_reset_tail_pointer(skb);
 skb->tail += offset;
}
# 2064 "../include/linux/skbuff.h"
void *pskb_put(struct sk_buff *skb, struct sk_buff *tail, int len);
void *skb_put(struct sk_buff *skb, unsigned int len);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__skb_put(struct sk_buff *skb, unsigned int len)
{
 void *tmp = skb_tail_pointer(skb);
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2069; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 skb->tail += len;
 skb->len += len;
 return tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__skb_put_zero(struct sk_buff *skb, unsigned int len)
{
 void *tmp = __skb_put(skb, len);

 memset(tmp, 0, len);
 return tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__skb_put_data(struct sk_buff *skb, const void *data,
       unsigned int len)
{
 void *tmp = __skb_put(skb, len);

 memcpy(tmp, data, len);
 return tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_put_u8(struct sk_buff *skb, u8 val)
{
 *(u8 *)__skb_put(skb, 1) = val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_put_zero(struct sk_buff *skb, unsigned int len)
{
 void *tmp = skb_put(skb, len);

 memset(tmp, 0, len);

 return tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_put_data(struct sk_buff *skb, const void *data,
     unsigned int len)
{
 void *tmp = skb_put(skb, len);

 memcpy(tmp, data, len);

 return tmp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_put_u8(struct sk_buff *skb, u8 val)
{
 *(u8 *)skb_put(skb, 1) = val;
}

void *skb_push(struct sk_buff *skb, unsigned int len);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__skb_push(struct sk_buff *skb, unsigned int len)
{
 skb->data -= len;
 skb->len += len;
 return skb->data;
}

void *skb_pull(struct sk_buff *skb, unsigned int len);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
 skb->len -= len;
 do { if (__builtin_expect(!!(skb->len < skb->data_len), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2133; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 return skb->data += len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_pull_inline(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __skb_pull(skb, len);
}

void *__pskb_pull_tail(struct sk_buff *skb, int delta);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *__pskb_pull(struct sk_buff *skb, unsigned int len)
{
 if (len > skb_headlen(skb) &&
     !__pskb_pull_tail(skb, len - skb_headlen(skb)))
  return ((void *)0);
 skb->len -= len;
 return skb->data += len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *pskb_pull(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? ((void *)0) : __pskb_pull(skb, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len <= skb_headlen(skb)), 1))
  return 1;
 if (__builtin_expect(!!(len > skb->len), 0))
  return 0;
 return __pskb_pull_tail(skb, len - skb_headlen(skb)) != ((void *)0);
}

void skb_condense(struct sk_buff *skb);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_headroom(const struct sk_buff *skb)
{
 return skb->data - skb->head;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_tailroom(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
}
# 2198 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_availroom(const struct sk_buff *skb)
{
 if (skb_is_nonlinear(skb))
  return 0;

 return skb->end - skb->tail - skb->reserved_tailroom;
}
# 2214 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reserve(struct sk_buff *skb, int len)
{
 skb->data += len;
 skb->tail += len;
}
# 2232 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_tailroom_reserve(struct sk_buff *skb, unsigned int mtu,
     unsigned int needed_tailroom)
{
 do { if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2235; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 if (mtu < skb_tailroom(skb) - needed_tailroom)

  skb->reserved_tailroom = skb_tailroom(skb) - mtu;
 else

  skb->reserved_tailroom = needed_tailroom;
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_inner_protocol(struct sk_buff *skb,
       __be16 protocol)
{
 skb->inner_protocol = protocol;
 skb->inner_protocol_type = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_inner_ipproto(struct sk_buff *skb,
      __u8 ipproto)
{
 skb->inner_ipproto = ipproto;
 skb->inner_protocol_type = 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_inner_headers(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->mac_header;
 skb->inner_network_header = skb->network_header;
 skb->inner_transport_header = skb->transport_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_mac_len(struct sk_buff *skb)
{
 skb->mac_len = skb->network_header - skb->mac_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_inner_transport_header(const struct sk_buff
       *skb)
{
 return skb->head + skb->inner_transport_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_inner_transport_offset(const struct sk_buff *skb)
{
 return skb_inner_transport_header(skb) - skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_inner_transport_header(struct sk_buff *skb)
{
 skb->inner_transport_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_inner_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_transport_header(skb);
 skb->inner_transport_header += offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_inner_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_network_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_inner_network_header(struct sk_buff *skb)
{
 skb->inner_network_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_inner_network_header(struct sk_buff *skb,
      const int offset)
{
 skb_reset_inner_network_header(skb);
 skb->inner_network_header += offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_inner_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->inner_mac_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_inner_mac_header(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_inner_mac_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_inner_mac_header(skb);
 skb->inner_mac_header += offset;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_transport_header_was_set(const struct sk_buff *skb)
{
 return skb->transport_header != (typeof(skb->transport_header))~0U;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_transport_header(const struct sk_buff *skb)
{
 return skb->head + skb->transport_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_transport_header(struct sk_buff *skb)
{
 skb->transport_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_transport_header(struct sk_buff *skb,
         const int offset)
{
 skb_reset_transport_header(skb);
 skb->transport_header += offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_network_header(const struct sk_buff *skb)
{
 return skb->head + skb->network_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_network_header(struct sk_buff *skb)
{
 skb->network_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_network_header(struct sk_buff *skb, const int offset)
{
 skb_reset_network_header(skb);
 skb->network_header += offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_mac_header(const struct sk_buff *skb)
{
 return skb->head + skb->mac_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_mac_offset(const struct sk_buff *skb)
{
 return skb_mac_header(skb) - skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 skb_mac_header_len(const struct sk_buff *skb)
{
 return skb->network_header - skb->mac_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_mac_header_was_set(const struct sk_buff *skb)
{
 return skb->mac_header != (typeof(skb->mac_header))~0U;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_reset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->data - skb->head;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_mac_header(struct sk_buff *skb, const int offset)
{
 skb_reset_mac_header(skb);
 skb->mac_header += offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_pop_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->network_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_probe_transport_header(struct sk_buff *skb,
           const int offset_hint)
{
 struct flow_keys keys;

 if (skb_transport_header_was_set(skb))
  return;
 else if (skb_flow_dissect_flow_keys(skb, &keys, 0))
  skb_set_transport_header(skb, keys.control.thoff);
 else if (offset_hint >= 0)
  skb_set_transport_header(skb, offset_hint);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_mac_header_rebuild(struct sk_buff *skb)
{
 if (skb_mac_header_was_set(skb)) {
  const unsigned char *old_mac = skb_mac_header(skb);

  skb_set_mac_header(skb, -skb->mac_len);
  memmove(skb_mac_header(skb), old_mac, skb->mac_len);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_checksum_start_offset(const struct sk_buff *skb)
{
 return skb->csum_start - skb_headroom(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned char *skb_checksum_start(const struct sk_buff *skb)
{
 return skb->head + skb->csum_start;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_transport_offset(const struct sk_buff *skb)
{
 return skb_transport_header(skb) - skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 skb_network_header_len(const struct sk_buff *skb)
{
 return skb->transport_header - skb->network_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 skb_inner_network_header_len(const struct sk_buff *skb)
{
 return skb->inner_transport_header - skb->inner_network_header;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_network_offset(const struct sk_buff *skb)
{
 return skb_network_header(skb) - skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_inner_network_offset(const struct sk_buff *skb)
{
 return skb_inner_network_header(skb) - skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pskb_network_may_pull(struct sk_buff *skb, unsigned int len)
{
 return pskb_may_pull(skb, skb_network_offset(skb) + len);
}
# 2514 "../include/linux/skbuff.h"
int ___pskb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_set_length(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) {
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2519; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
  return;
 }
 skb->len = len;
 skb_set_tail_pointer(skb, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_trim(struct sk_buff *skb, unsigned int len)
{
 __skb_set_length(skb, len);
}

void skb_trim(struct sk_buff *skb, unsigned int len);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
 if (skb->data_len)
  return ___pskb_trim(skb, len);
 __skb_trim(skb, len);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pskb_trim(struct sk_buff *skb, unsigned int len)
{
 return (len < skb->len) ? __pskb_trim(skb, len) : 0;
}
# 2555 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pskb_trim_unique(struct sk_buff *skb, unsigned int len)
{
 int err = pskb_trim(skb, len);
 do { if (__builtin_expect(!!(err), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2558; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_grow(struct sk_buff *skb, unsigned int len)
{
 unsigned int diff = len - skb->len;

 if (skb_tailroom(skb) < diff) {
  int ret = pskb_expand_head(skb, 0, diff - skb_tailroom(skb),
        ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
  if (ret)
   return ret;
 }
 __skb_set_length(skb, len);
 return 0;
}
# 2583 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_orphan(struct sk_buff *skb)
{
 if (skb->destructor) {
  skb->destructor(skb);
  skb->destructor = ((void *)0);
  skb->sk = ((void *)0);
 } else {
  do { if (__builtin_expect(!!(skb->sk), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/skbuff.h\"; .popsection; .long 2b - 0b; .short 2590; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 }
}
# 2603 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!skb_zcopy(skb)), 1))
  return 0;
 if (!skb_zcopy_is_nouarg(skb) &&
     ((struct ubuf_info *)(((struct skb_shared_info *)(skb_end_pointer(skb)))->destructor_arg))->callback == sock_zerocopy_callback)
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_orphan_frags_rx(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!skb_zcopy(skb)), 1))
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}
# 2629 "../include/linux/skbuff.h"
void skb_queue_purge(struct sk_buff_head *list);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;
 while ((skb = __skb_dequeue(list)) != ((void *)0))
  kfree_skb(skb);
}

unsigned int skb_rbtree_purge(struct rb_root *root);

void *netdev_alloc_frag(unsigned int fragsz);

struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
       gfp_t gfp_mask);
# 2657 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *netdev_alloc_skb(struct net_device *dev,
            unsigned int length)
{
 return __netdev_alloc_skb(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *__dev_alloc_skb(unsigned int length,
           gfp_t gfp_mask)
{
 return __netdev_alloc_skb(((void *)0), length, gfp_mask);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *dev_alloc_skb(unsigned int length)
{
 return netdev_alloc_skb(((void *)0), length);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length, gfp_t gfp)
{
 struct sk_buff *skb = __netdev_alloc_skb(dev, length + 2, gfp);

 if (2 && skb)
  skb_reserve(skb, 2);
 return skb;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length)
{
 return __netdev_alloc_skb_ip_align(dev, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_free_frag(void *addr)
{
 page_frag_free(addr);
}

void *napi_alloc_frag(unsigned int fragsz);
struct sk_buff *__napi_alloc_skb(struct napi_struct *napi,
     unsigned int length, gfp_t gfp_mask);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *napi_alloc_skb(struct napi_struct *napi,
          unsigned int length)
{
 return __napi_alloc_skb(napi, length, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
}
void napi_consume_skb(struct sk_buff *skb, int budget);

void __kfree_skb_flush(void);
void __kfree_skb_defer(struct sk_buff *skb);
# 2720 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *__dev_alloc_pages(gfp_t gfp_mask,
          unsigned int order)
{
# 2731 "../include/linux/skbuff.h"
 gfp_mask |= (( gfp_t)0x100u) | (( gfp_t)0x4000u) | (( gfp_t)0x2000u);

 return alloc_pages_node((-1), gfp_mask, order);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *dev_alloc_pages(unsigned int order)
{
 return __dev_alloc_pages(((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)) | (( gfp_t)0x200u), order);
}
# 2749 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *__dev_alloc_page(gfp_t gfp_mask)
{
 return __dev_alloc_pages(gfp_mask, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *dev_alloc_page(void)
{
 return dev_alloc_pages(0);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_propagate_pfmemalloc(struct page *page,
          struct sk_buff *skb)
{
 if (page_is_pfmemalloc(page))
  skb->pfmemalloc = true;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct page *skb_frag_page(const skb_frag_t *frag)
{
 return frag->page.p;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_frag_ref(skb_frag_t *frag)
{
 get_page(skb_frag_page(frag));
}
# 2800 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_ref(struct sk_buff *skb, int f)
{
 __skb_frag_ref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_frag_unref(skb_frag_t *frag)
{
 put_page(skb_frag_page(frag));
}
# 2823 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_unref(struct sk_buff *skb, int f)
{
 __skb_frag_unref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}
# 2835 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_frag_address(const skb_frag_t *frag)
{
 return lowmem_page_address(skb_frag_page(frag)) + frag->page_offset;
}
# 2847 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_frag_address_safe(const skb_frag_t *frag)
{
 void *ptr = lowmem_page_address(skb_frag_page(frag));
 if (__builtin_expect(!!(!ptr), 0))
  return ((void *)0);

 return ptr + frag->page_offset;
}
# 2863 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
 frag->page.p = page;
}
# 2876 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_set_page(struct sk_buff *skb, int f,
         struct page *page)
{
 __skb_frag_set_page(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f], page);
}

bool skb_page_frag_refill(unsigned int sz, struct page_frag *pfrag, gfp_t prio);
# 2895 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) dma_addr_t skb_frag_dma_map(struct device *dev,
       const skb_frag_t *frag,
       size_t offset, size_t size,
       enum dma_data_direction dir)
{
 return dma_map_page_attrs(dev, skb_frag_page(frag), frag->page_offset + offset, size, dir, 0);

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *pskb_copy(struct sk_buff *skb,
     gfp_t gfp_mask)
{
 return __pskb_copy(skb, skb_headroom(skb), gfp_mask);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *pskb_copy_for_clone(struct sk_buff *skb,
        gfp_t gfp_mask)
{
 return __pskb_copy_fclone(skb, skb_headroom(skb), gfp_mask, true);
}
# 2926 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_clone_writable(const struct sk_buff *skb, unsigned int len)
{
 return !skb_header_cloned(skb) &&
        skb_headroom(skb) + len <= skb->hdr_len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_try_make_writable(struct sk_buff *skb,
     unsigned int write_len)
{
 return skb_cloned(skb) && !skb_clone_writable(skb, write_len) &&
        pskb_expand_head(skb, 0, 0, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_cow(struct sk_buff *skb, unsigned int headroom,
       int cloned)
{
 int delta = 0;

 if (headroom > skb_headroom(skb))
  delta = headroom - skb_headroom(skb);

 if (delta || cloned)
  return pskb_expand_head(skb, ((((delta)) + ((typeof((delta)))((({ typeof(32) __UNIQUE_ID_max1_84 = (32); typeof((1 << 7)) __UNIQUE_ID_max2_85 = ((1 << 7)); (void) (&__UNIQUE_ID_max1_84 == &__UNIQUE_ID_max2_85); __UNIQUE_ID_max1_84 > __UNIQUE_ID_max2_85 ? __UNIQUE_ID_max1_84 : __UNIQUE_ID_max2_85; }))) - 1)) & ~((typeof((delta)))((({ typeof(32) __UNIQUE_ID_max1_84 = (32); typeof((1 << 7)) __UNIQUE_ID_max2_85 = ((1 << 7)); (void) (&__UNIQUE_ID_max1_84 == &__UNIQUE_ID_max2_85); __UNIQUE_ID_max1_84 > __UNIQUE_ID_max2_85 ? __UNIQUE_ID_max1_84 : __UNIQUE_ID_max2_85; }))) - 1)), 0,
     ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
 return 0;
}
# 2965 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_cloned(skb));
}
# 2980 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_header_cloned(skb));
}
# 2995 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;
 if (__builtin_expect(!!(size >= len), 1))
  return 0;
 return skb_pad(skb, len - size);
}
# 3014 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_put_padto(struct sk_buff *skb, unsigned int len,
      bool free_on_error)
{
 unsigned int size = skb->len;

 if (__builtin_expect(!!(size < len), 0)) {
  len -= size;
  if (__skb_pad(skb, len, free_on_error))
   return -12;
  __skb_put(skb, len);
 }
 return 0;
}
# 3038 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
 return __skb_put_padto(skb, len, true);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_add_data(struct sk_buff *skb,
          struct iov_iter *from, int copy)
{
 const int off = skb->len;

 if (skb->ip_summed == 0) {
  __wsum csum = 0;
  if (csum_and_copy_from_iter_full(skb_put(skb, copy), copy,
              &csum, from)) {
   skb->csum = csum_block_add(skb->csum, csum, off);
   return 0;
  }
 } else if (copy_from_iter_full(skb_put(skb, copy), copy, from))
  return 0;

 __skb_trim(skb, off);
 return -14;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_can_coalesce(struct sk_buff *skb, int i,
        const struct page *page, int off)
{
 if (skb_zcopy(skb))
  return false;
 if (i) {
  const struct skb_frag_struct *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i - 1];

  return page == skb_frag_page(frag) &&
         off == frag->page_offset + skb_frag_size(frag);
 }
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_linearize(struct sk_buff *skb)
{
 return __pskb_pull_tail(skb, skb->data_len) ? 0 : -12;
}
# 3088 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_linearize(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? __skb_linearize(skb) : 0;
}
# 3100 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_has_shared_frag(const struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) &&
        ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SHARED_FRAG;
}
# 3113 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_linearize_cow(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) || skb_cloned(skb) ?
        __skb_linearize(skb) : 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__skb_postpull_rcsum(struct sk_buff *skb, const void *start, unsigned int len,
       unsigned int off)
{
 if (skb->ip_summed == 2)
  skb->csum = csum_block_sub(skb->csum,
        csum_partial(start, len, 0), off);
 else if (skb->ip_summed == 3 &&
   skb_checksum_start_offset(skb) < 0)
  skb->ip_summed = 0;
}
# 3141 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_postpull_rcsum(struct sk_buff *skb,
          const void *start, unsigned int len)
{
 __skb_postpull_rcsum(skb, start, len, 0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__skb_postpush_rcsum(struct sk_buff *skb, const void *start, unsigned int len,
       unsigned int off)
{
 if (skb->ip_summed == 2)
  skb->csum = csum_block_add(skb->csum,
        csum_partial(start, len, 0), off);
}
# 3165 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_postpush_rcsum(struct sk_buff *skb,
          const void *start, unsigned int len)
{
 __skb_postpush_rcsum(skb, start, len, 0);
}

void *skb_pull_rcsum(struct sk_buff *skb, unsigned int len);
# 3184 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_push_rcsum(struct sk_buff *skb, unsigned int len)
{
 skb_push(skb, len);
 skb_postpush_rcsum(skb, skb->data, len);
 return skb->data;
}

int pskb_trim_rcsum_slow(struct sk_buff *skb, unsigned int len);
# 3202 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len >= skb->len), 1))
  return 0;
 return pskb_trim_rcsum_slow(skb, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 __skb_trim(skb, len);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __skb_grow_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 return __skb_grow(skb, len);
}
# 3278 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_has_frag_list(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list != ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_frag_list_init(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list = ((void *)0);
}





int __skb_wait_for_more_packets(struct sock *sk, int *err, long *timeo_p,
    const struct sk_buff *skb);
struct sk_buff *__skb_try_recv_from_queue(struct sock *sk,
       struct sk_buff_head *queue,
       unsigned int flags,
       void (*destructor)(struct sock *sk,
          struct sk_buff *skb),
       int *peeked, int *off, int *err,
       struct sk_buff **last);
struct sk_buff *__skb_try_recv_datagram(struct sock *sk, unsigned flags,
     void (*destructor)(struct sock *sk,
          struct sk_buff *skb),
     int *peeked, int *off, int *err,
     struct sk_buff **last);
struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,
        void (*destructor)(struct sock *sk,
             struct sk_buff *skb),
        int *peeked, int *off, int *err);
struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags, int noblock,
      int *err);
unsigned int datagram_poll(struct file *file, struct socket *sock,
      struct poll_table_struct *wait);
int skb_copy_datagram_iter(const struct sk_buff *from, int offset,
      struct iov_iter *to, int size);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_copy_datagram_msg(const struct sk_buff *from, int offset,
     struct msghdr *msg, int size)
{
 return skb_copy_datagram_iter(from, offset, &msg->msg_iter, size);
}
int skb_copy_and_csum_datagram_msg(struct sk_buff *skb, int hlen,
       struct msghdr *msg);
int skb_copy_datagram_from_iter(struct sk_buff *skb, int offset,
     struct iov_iter *from, int len);
int zerocopy_sg_from_iter(struct sk_buff *skb, struct iov_iter *frm);
void skb_free_datagram(struct sock *sk, struct sk_buff *skb);
void __skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb, int len);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_free_datagram_locked(struct sock *sk,
         struct sk_buff *skb)
{
 __skb_free_datagram_locked(sk, skb, 0);
}
int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);
int skb_copy_bits(const struct sk_buff *skb, int offset, void *to, int len);
int skb_store_bits(struct sk_buff *skb, int offset, const void *from, int len);
__wsum skb_copy_and_csum_bits(const struct sk_buff *skb, int offset, u8 *to,
         int len, __wsum csum);
int skb_splice_bits(struct sk_buff *skb, struct sock *sk, unsigned int offset,
      struct pipe_inode_info *pipe, unsigned int len,
      unsigned int flags);
int skb_send_sock_locked(struct sock *sk, struct sk_buff *skb, int offset,
    int len);
int skb_send_sock(struct sock *sk, struct sk_buff *skb, int offset, int len);
void skb_copy_and_csum_dev(const struct sk_buff *skb, u8 *to);
unsigned int skb_zerocopy_headlen(const struct sk_buff *from);
int skb_zerocopy(struct sk_buff *to, struct sk_buff *from,
   int len, int hlen);
void skb_split(struct sk_buff *skb, struct sk_buff *skb1, const u32 len);
int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen);
void skb_scrub_packet(struct sk_buff *skb, bool xnet);
unsigned int skb_gso_transport_seglen(const struct sk_buff *skb);
bool skb_gso_validate_mtu(const struct sk_buff *skb, unsigned int mtu);
bool skb_gso_validate_mac_len(const struct sk_buff *skb, unsigned int len);
struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features);
struct sk_buff *skb_vlan_untag(struct sk_buff *skb);
int skb_ensure_writable(struct sk_buff *skb, int write_len);
int __skb_vlan_pop(struct sk_buff *skb, u16 *vlan_tci);
int skb_vlan_pop(struct sk_buff *skb);
int skb_vlan_push(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci);
struct sk_buff *pskb_extract(struct sk_buff *skb, int off, int to_copy,
        gfp_t gfp);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int memcpy_from_msg(void *data, struct msghdr *msg, int len)
{
 return copy_from_iter_full(data, len, &msg->msg_iter) ? 0 : -14;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int memcpy_to_msg(struct msghdr *msg, void *data, int len)
{
 return copy_to_iter(data, len, &msg->msg_iter) == len ? 0 : -14;
}

struct skb_checksum_ops {
 __wsum (*update)(const void *mem, int len, __wsum wsum);
 __wsum (*combine)(__wsum csum, __wsum csum2, int offset, int len);
};

extern const struct skb_checksum_ops *crc32c_csum_stub __attribute__((__section__(".data..read_mostly")));

__wsum __skb_checksum(const struct sk_buff *skb, int offset, int len,
        __wsum csum, const struct skb_checksum_ops *ops);
__wsum skb_checksum(const struct sk_buff *skb, int offset, int len,
      __wsum csum);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result))
__skb_header_pointer(const struct sk_buff *skb, int offset,
       int len, void *data, int hlen, void *buffer)
{
 if (hlen - offset >= len)
  return data + offset;

 if (!skb ||
     skb_copy_bits(skb, offset, buffer, len) < 0)
  return ((void *)0);

 return buffer;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void * __attribute__((warn_unused_result))
skb_header_pointer(const struct sk_buff *skb, int offset, int len, void *buffer)
{
 return __skb_header_pointer(skb, offset, len, skb->data,
        skb_headlen(skb), buffer);
}
# 3416 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_needs_linearize(struct sk_buff *skb,
           netdev_features_t features)
{
 return skb_is_nonlinear(skb) &&
        ((skb_has_frag_list(skb) && !(features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT)))) ||
  (((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags && !(features & ((netdev_features_t)1 << (NETIF_F_SG_BIT)))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_from_linear_data(const struct sk_buff *skb,
          void *to,
          const unsigned int len)
{
 memcpy(to, skb->data, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_from_linear_data_offset(const struct sk_buff *skb,
          const int offset, void *to,
          const unsigned int len)
{
 memcpy(to, skb->data + offset, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_to_linear_data(struct sk_buff *skb,
        const void *from,
        const unsigned int len)
{
 memcpy(skb->data, from, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_to_linear_data_offset(struct sk_buff *skb,
        const int offset,
        const void *from,
        const unsigned int len)
{
 memcpy(skb->data + offset, from, len);
}

void skb_init(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t skb_get_ktime(const struct sk_buff *skb)
{
 return skb->tstamp;
}
# 3469 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_get_timestamp(const struct sk_buff *skb,
         struct timeval *stamp)
{
 *stamp = ns_to_timeval((skb->tstamp));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_get_timestampns(const struct sk_buff *skb,
           struct timespec *stamp)
{
 *stamp = ns_to_timespec((skb->tstamp));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __net_timestamp(struct sk_buff *skb)
{
 skb->tstamp = ktime_get_real();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t net_timedelta(ktime_t t)
{
 return ((ktime_get_real()) - (t));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ktime_t net_invalid_timestamp(void)
{
 return 0;
}

struct sk_buff *skb_clone_sk(struct sk_buff *skb);
# 3505 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_clone_tx_timestamp(struct sk_buff *skb)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_defer_rx_timestamp(struct sk_buff *skb)
{
 return false;
}
# 3528 "../include/linux/skbuff.h"
void skb_complete_tx_timestamp(struct sk_buff *skb,
          struct skb_shared_hwtstamps *hwtstamps);

void __skb_tstamp_tx(struct sk_buff *orig_skb,
       struct skb_shared_hwtstamps *hwtstamps,
       struct sock *sk, int tstype);
# 3546 "../include/linux/skbuff.h"
void skb_tstamp_tx(struct sk_buff *orig_skb,
     struct skb_shared_hwtstamps *hwtstamps);
# 3561 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_tx_timestamp(struct sk_buff *skb)
{
 skb_clone_tx_timestamp(skb);
 if (((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SW_TSTAMP)
  skb_tstamp_tx(skb, ((void *)0));
}
# 3575 "../include/linux/skbuff.h"
void skb_complete_wifi_ack(struct sk_buff *skb, bool acked);

__sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);
__sum16 __skb_checksum_complete(struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_csum_unnecessary(const struct sk_buff *skb)
{
 return ((skb->ip_summed == 1) ||
  skb->csum_valid ||
  (skb->ip_summed == 3 &&
   skb_checksum_start_offset(skb) >= 0));
}
# 3604 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 skb_checksum_complete(struct sk_buff *skb)
{
 return skb_csum_unnecessary(skb) ?
        0 : __skb_checksum_complete(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_decr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level == 0)
   skb->ip_summed = 0;
  else
   skb->csum_level--;
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_incr_checksum_unnecessary(struct sk_buff *skb)
{
 if (skb->ip_summed == 1) {
  if (skb->csum_level < 3)
   skb->csum_level++;
 } else if (skb->ip_summed == 0) {
  skb->ip_summed = 1;
  skb->csum_level = 0;
 }
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __skb_checksum_validate_needed(struct sk_buff *skb,
        bool zero_okay,
        __sum16 check)
{
 if (skb_csum_unnecessary(skb) || (zero_okay && !check)) {
  skb->csum_valid = 1;
  __skb_decr_checksum_unnecessary(skb);
  return false;
 }

 return true;
}
# 3660 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_checksum_complete_unset(struct sk_buff *skb)
{
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
# 3675 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 __skb_checksum_validate_complete(struct sk_buff *skb,
             bool complete,
             __wsum psum)
{
 if (skb->ip_summed == 2) {
  if (!csum_fold(csum_add(psum, skb->csum))) {
   skb->csum_valid = 1;
   return 0;
  }
 }

 skb->csum = psum;

 if (complete || skb->len <= 76) {
  __sum16 csum;

  csum = __skb_checksum_complete(skb);
  skb->csum_valid = !csum;
  return csum;
 }

 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum null_compute_pseudo(struct sk_buff *skb, int proto)
{
 return 0;
}
# 3741 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __skb_checksum_convert_check(struct sk_buff *skb)
{
 return (skb->ip_summed == 0 && skb->csum_valid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_checksum_convert(struct sk_buff *skb,
       __sum16 check, __wsum pseudo)
{
 skb->csum = ~pseudo;
 skb->ip_summed = 2;
}
# 3760 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_remcsum_adjust_partial(struct sk_buff *skb, void *ptr,
           u16 start, u16 offset)
{
 skb->ip_summed = 3;
 skb->csum_start = ((unsigned char *)ptr + start) - skb->head;
 skb->csum_offset = offset - start;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_remcsum_process(struct sk_buff *skb, void *ptr,
           int start, int offset, bool nopartial)
{
 __wsum delta;

 if (!nopartial) {
  skb_remcsum_adjust_partial(skb, ptr, start, offset);
  return;
 }

  if (__builtin_expect(!!(skb->ip_summed != 2), 0)) {
  __skb_checksum_complete(skb);
  skb_postpull_rcsum(skb, skb->data, ptr - (void *)skb->data);
 }

 delta = remcsum_adjust(ptr, skb->csum, start, offset);


 skb->csum = csum_add(skb->csum, delta);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct nf_conntrack *skb_nfct(const struct sk_buff *skb)
{

 return (void *)(skb->_nfct & ~(7UL));



}


void nf_conntrack_destroy(struct nf_conntrack *nfct);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_conntrack_put(struct nf_conntrack *nfct)
{
 if (nfct && (atomic_sub_return(1, (&nfct->use)) == 0))
  nf_conntrack_destroy(nfct);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_conntrack_get(struct nf_conntrack *nfct)
{
 if (nfct)
  atomic_add(1, (&nfct->use));
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_bridge_put(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge && refcount_dec_and_test(&nf_bridge->use))
  kfree(nf_bridge);
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_bridge_get(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge)
  refcount_inc(&nf_bridge->use);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_reset(struct sk_buff *skb)
{

 nf_conntrack_put(skb_nfct(skb));
 skb->_nfct = 0;


 nf_bridge_put(skb->nf_bridge);
 skb->nf_bridge = ((void *)0);

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_reset_trace(struct sk_buff *skb)
{

 skb->nf_trace = 0;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ipvs_reset(struct sk_buff *skb)
{



}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __nf_copy(struct sk_buff *dst, const struct sk_buff *src,
        bool copy)
{

 dst->_nfct = src->_nfct;
 nf_conntrack_get(skb_nfct(src));




 dst->nf_bridge = src->nf_bridge;
 nf_bridge_get(src->nf_bridge);


 if (copy)
  dst->nf_trace = src->nf_trace;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void nf_copy(struct sk_buff *dst, const struct sk_buff *src)
{

 nf_conntrack_put(skb_nfct(dst));


 nf_bridge_put(dst->nf_bridge);

 __nf_copy(dst, src, true);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_secmark(struct sk_buff *to, const struct sk_buff *from)
{
 to->secmark = from->secmark;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_init_secmark(struct sk_buff *skb)
{
 skb->secmark = 0;
}
# 3903 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_irq_freeable(const struct sk_buff *skb)
{
 return !skb->destructor &&

  !skb->sp &&

  !skb_nfct(skb) &&
  !skb->_skb_refdst &&
  !skb_has_frag_list(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
 skb->queue_mapping = queue_mapping;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 skb_get_queue_mapping(const struct sk_buff *skb)
{
 return skb->queue_mapping;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_copy_queue_mapping(struct sk_buff *to, const struct sk_buff *from)
{
 to->queue_mapping = from->queue_mapping;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
 skb->queue_mapping = rx_queue + 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 skb_get_rx_queue(const struct sk_buff *skb)
{
 return skb->queue_mapping - 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_rx_queue_recorded(const struct sk_buff *skb)
{
 return skb->queue_mapping != 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_set_dst_pending_confirm(struct sk_buff *skb, u32 val)
{
 skb->dst_pending_confirm = val;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_get_dst_pending_confirm(const struct sk_buff *skb)
{
 return skb->dst_pending_confirm != 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sec_path *skb_sec_path(struct sk_buff *skb)
{

 return skb->sp;



}







struct skb_gso_cb {
 union {
  int mac_offset;
  int data_offset;
 };
 int encap_level;
 __wsum csum;
 __u16 csum_start;
};



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_tnl_header_len(const struct sk_buff *inner_skb)
{
 return (skb_mac_header(inner_skb) - inner_skb->head) -
  ((struct skb_gso_cb *)((inner_skb)->cb + 32))->mac_offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int gso_pskb_expand_head(struct sk_buff *skb, int extra)
{
 int new_headroom, headroom;
 int ret;

 headroom = skb_headroom(skb);
 ret = pskb_expand_head(skb, extra, 0, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u)));
 if (ret)
  return ret;

 new_headroom = skb_headroom(skb);
 ((struct skb_gso_cb *)((skb)->cb + 32))->mac_offset += (new_headroom - headroom);
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void gso_reset_checksum(struct sk_buff *skb, __wsum res)
{

 if (skb->remcsum_offload)
  return;

 ((struct skb_gso_cb *)((skb)->cb + 32))->csum = res;
 ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start = skb_checksum_start(skb) - skb->head;
}
# 4020 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 gso_make_checksum(struct sk_buff *skb, __wsum res)
{
 unsigned char *csum_start = skb_transport_header(skb);
 int plen = (skb->head + ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start) - csum_start;
 __wsum partial = ((struct skb_gso_cb *)((skb)->cb + 32))->csum;

 ((struct skb_gso_cb *)((skb)->cb + 32))->csum = res;
 ((struct skb_gso_cb *)((skb)->cb + 32))->csum_start = csum_start - skb->head;

 return csum_fold(csum_partial(csum_start, plen, partial));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_is_gso(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_is_gso_v6(const struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_TCPV6;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gso_reset(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size = 0;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_segs = 0;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type = 0;
}

void __skb_warn_lro_forwarding(const struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_warn_if_lro(const struct sk_buff *skb)
{


 const struct skb_shared_info *shinfo = ((struct skb_shared_info *)(skb_end_pointer(skb)));

 if (skb_is_nonlinear(skb) && shinfo->gso_size != 0 &&
     __builtin_expect(!!(shinfo->gso_type == 0), 0)) {
  __skb_warn_lro_forwarding(skb);
  return true;
 }
 return false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_forward_csum(struct sk_buff *skb)
{

 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
# 4081 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_checksum_none_assert(const struct sk_buff *skb)
{



}

bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);

int skb_checksum_setup(struct sk_buff *skb, bool recalculate);
struct sk_buff *skb_checksum_trimmed(struct sk_buff *skb,
         unsigned int transport_len,
         __sum16(*skb_chkf)(struct sk_buff *skb));
# 4104 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_head_is_locked(const struct sk_buff *skb)
{
 return !skb->head_frag || skb_cloned(skb);
}
# 4119 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_gso_network_seglen(const struct sk_buff *skb)
{
 unsigned int hdr_len = skb_transport_header(skb) -
          skb_network_header(skb);
 return hdr_len + skb_gso_transport_seglen(skb);
}
# 4135 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_gso_mac_seglen(const struct sk_buff *skb)
{
 unsigned int hdr_len = skb_transport_header(skb) - skb_mac_header(skb);
 return hdr_len + skb_gso_transport_seglen(skb);
}
# 4150 "../include/linux/skbuff.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __wsum lco_csum(struct sk_buff *skb)
{
 unsigned char *csum_start = skb_checksum_start(skb);
 unsigned char *l4_hdr = skb_transport_header(skb);
 __wsum partial;


 partial = ~csum_unfold(*( __sum16 *)(csum_start +
          skb->csum_offset));




 return csum_partial(l4_hdr, csum_start - l4_hdr, partial);
}
# 24 "../include/linux/if_ether.h" 2


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ethhdr *eth_hdr(const struct sk_buff *skb)
{
 return (struct ethhdr *)skb_mac_header(skb);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ethhdr *skb_eth_hdr(const struct sk_buff *skb)
{
 return (struct ethhdr *)skb->data;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ethhdr *inner_eth_hdr(const struct sk_buff *skb)
{
 return (struct ethhdr *)skb_inner_mac_header(skb);
}

int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr);

extern ssize_t sysfs_format_mac(char *buf, const unsigned char *addr, int len);
# 26 "../include/linux/etherdevice.h" 2
# 1 "../include/linux/netdevice.h" 1
# 30 "../include/linux/netdevice.h"
# 1 "../include/linux/delay.h" 1
# 24 "../include/linux/delay.h"
extern unsigned long loops_per_jiffy;

# 1 "./arch/arm64/include/generated/asm/delay.h" 1
# 1 "../include/asm-generic/delay.h" 1





extern void __bad_udelay(void);
extern void __bad_ndelay(void);

extern void __udelay(unsigned long usecs);
extern void __ndelay(unsigned long nsecs);
extern void __const_udelay(unsigned long xloops);
extern void __delay(unsigned long loops);
# 2 "./arch/arm64/include/generated/asm/delay.h" 2
# 27 "../include/linux/delay.h" 2
# 56 "../include/linux/delay.h"
extern unsigned long lpj_fine;
void calibrate_delay(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}
# 31 "../include/linux/netdevice.h" 2

# 1 "../include/linux/prefetch.h" 1
# 54 "../include/linux/prefetch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void prefetch_range(void *addr, size_t len)
{

 char *cp;
 char *end = addr + len;

 for (cp = addr; cp < end; cp += (4*(1 << 7)))
  prefetch(cp);

}
# 33 "../include/linux/netdevice.h" 2






# 1 "../include/linux/dynamic_queue_limits.h" 1
# 41 "../include/linux/dynamic_queue_limits.h"
struct dql {

 unsigned int num_queued;
 unsigned int adj_limit;
 unsigned int last_obj_cnt;



 unsigned int limit __attribute__((__aligned__((1 << 7))));
 unsigned int num_completed;

 unsigned int prev_ovlimit;
 unsigned int prev_num_queued;
 unsigned int prev_last_obj_cnt;

 unsigned int lowest_slack;
 unsigned long slack_start_time;


 unsigned int max_limit;
 unsigned int min_limit;
 unsigned int slack_hold_time;
};
# 73 "../include/linux/dynamic_queue_limits.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dql_queued(struct dql *dql, unsigned int count)
{
 do { if (__builtin_expect(!!(count > ((~0U) / 16)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/dynamic_queue_limits.h\"; .popsection; .long 2b - 0b; .short 75; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 dql->last_obj_cnt = count;






 __asm__ __volatile__("": : :"memory");

 dql->num_queued += count;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dql_avail(const struct dql *dql)
{
 return (*({ __attribute__((unused)) typeof(dql->adj_limit) __var = ( typeof(dql->adj_limit)) 0; (volatile typeof(dql->adj_limit) *)&(dql->adj_limit); })) - (*({ __attribute__((unused)) typeof(dql->num_queued) __var = ( typeof(dql->num_queued)) 0; (volatile typeof(dql->num_queued) *)&(dql->num_queued); }));
}


void dql_completed(struct dql *dql, unsigned int count);


void dql_reset(struct dql *dql);


int dql_init(struct dql *dql, unsigned hold_time);
# 40 "../include/linux/netdevice.h" 2

# 1 "../include/linux/ethtool.h" 1
# 17 "../include/linux/ethtool.h"
# 1 "../include/linux/compat.h" 1
# 17 "../include/linux/compat.h"
# 1 "../include/uapi/linux/if.h" 1
# 36 "../include/uapi/linux/if.h"
# 1 "../include/uapi/linux/hdlc/ioctl.h" 1
# 40 "../include/uapi/linux/hdlc/ioctl.h"
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;
} fr_proto;

typedef struct {
 unsigned int dlci;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;
# 37 "../include/uapi/linux/if.h" 2
# 81 "../include/uapi/linux/if.h"
enum net_device_flags {


 IFF_UP = 1<<0,
 IFF_BROADCAST = 1<<1,
 IFF_DEBUG = 1<<2,
 IFF_LOOPBACK = 1<<3,
 IFF_POINTOPOINT = 1<<4,
 IFF_NOTRAILERS = 1<<5,
 IFF_RUNNING = 1<<6,
 IFF_NOARP = 1<<7,
 IFF_PROMISC = 1<<8,
 IFF_ALLMULTI = 1<<9,
 IFF_MASTER = 1<<10,
 IFF_SLAVE = 1<<11,
 IFF_MULTICAST = 1<<12,
 IFF_PORTSEL = 1<<13,
 IFF_AUTOMEDIA = 1<<14,
 IFF_DYNAMIC = 1<<15,


 IFF_LOWER_UP = 1<<16,
 IFF_DORMANT = 1<<17,
 IFF_ECHO = 1<<18,

};
# 166 "../include/uapi/linux/if.h"
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
};
# 194 "../include/uapi/linux/if.h"
struct ifmap {
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

};


struct if_settings {
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;
};
# 231 "../include/uapi/linux/if.h"
struct ifreq {

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;
};
# 283 "../include/uapi/linux/if.h"
struct ifconf {
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;
};
# 18 "../include/linux/compat.h" 2

# 1 "../include/uapi/linux/aio_abi.h" 1
# 34 "../include/uapi/linux/aio_abi.h"
typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,




 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
# 59 "../include/uapi/linux/aio_abi.h"
struct io_event {
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;
};







struct iocb {

 __u64 aio_data;


 __u32 aio_key;
 __kernel_rwf_t aio_rw_flags;
# 87 "../include/uapi/linux/aio_abi.h"
 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;
};
# 20 "../include/linux/compat.h" 2
# 65 "../include/linux/compat.h"
typedef struct compat_sigaltstack {
 compat_uptr_t ss_sp;
 int ss_flags;
 compat_size_t ss_size;
} compat_stack_t;
# 78 "../include/linux/compat.h"
typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

typedef compat_ulong_t compat_aio_context_t;

struct compat_sel_arg_struct;
struct rusage;

struct compat_itimerspec {
 struct compat_timespec it_interval;
 struct compat_timespec it_value;
};

struct compat_utimbuf {
 compat_time_t actime;
 compat_time_t modtime;
};

struct compat_itimerval {
 struct compat_timeval it_interval;
 struct compat_timeval it_value;
};

struct itimerval;
int get_compat_itimerval(struct itimerval *, const struct compat_itimerval *);
int put_compat_itimerval(struct compat_itimerval *, const struct itimerval *);

struct compat_tms {
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;
};

struct compat_timex {
 compat_uint_t modes;
 compat_long_t offset;
 compat_long_t freq;
 compat_long_t maxerror;
 compat_long_t esterror;
 compat_int_t status;
 compat_long_t constant;
 compat_long_t precision;
 compat_long_t tolerance;
 struct compat_timeval time;
 compat_long_t tick;
 compat_long_t ppsfreq;
 compat_long_t jitter;
 compat_int_t shift;
 compat_long_t stabil;
 compat_long_t jitcnt;
 compat_long_t calcnt;
 compat_long_t errcnt;
 compat_long_t stbcnt;
 compat_int_t tai;

 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32;
};

struct timex;
int compat_get_timex(struct timex *, const struct compat_timex *);
int compat_put_timex(struct compat_timex *, const struct timex *);



typedef struct {
 compat_sigset_word sig[(64 / 32)];
} compat_sigset_t;

struct compat_sigaction {

 compat_uptr_t sa_handler;
 compat_ulong_t sa_flags;





 compat_uptr_t sa_restorer;

 compat_sigset_t sa_mask __attribute__((packed));
};





extern int compat_get_timespec(struct timespec *, const void *);
extern int compat_put_timespec(const struct timespec *, void *);
extern int compat_get_timeval(struct timeval *, const void *);
extern int compat_put_timeval(const struct timeval *, void *);
extern int compat_get_timespec64(struct timespec *, const void *);
extern int compat_put_timespec64(const struct timespec *, void *);
extern int get_compat_itimerspec64(struct itimerspec *its,
   const struct compat_itimerspec *uits);
extern int put_compat_itimerspec64(const struct itimerspec *its,
   struct compat_itimerspec *uits);

struct compat_iovec {
 compat_uptr_t iov_base;
 compat_size_t iov_len;
};

struct compat_rlimit {
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;
};

struct compat_rusage {
 struct compat_timeval ru_utime;
 struct compat_timeval ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;
};

extern int put_compat_rusage(const struct rusage *,
        struct compat_rusage *);

struct compat_siginfo;

extern long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);

struct compat_dirent {
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];
};

struct compat_ustat {
 compat_daddr_t f_tfree;
 compat_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};



typedef struct compat_sigevent {
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  } _sigev_thread;
 } _sigev_un;
} compat_sigevent_t;

struct compat_ifmap {
 compat_ulong_t mem_start;
 compat_ulong_t mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;
};

struct compat_if_settings {
 unsigned int type;
 unsigned int size;
 compat_uptr_t ifs_ifsu;
};

struct compat_ifreq {
 union {
  char ifrn_name[16];
 } ifr_ifrn;
 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  compat_int_t ifru_ivalue;
  compat_int_t ifru_mtu;
  struct compat_ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  compat_caddr_t ifru_data;
  struct compat_if_settings ifru_settings;
 } ifr_ifru;
};

struct compat_ifconf {
 compat_int_t ifc_len;
 compat_caddr_t ifcbuf;
};

struct compat_robust_list {
 compat_uptr_t next;
};

struct compat_robust_list_head {
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;
};


struct compat_old_sigaction {
 compat_uptr_t sa_handler;
 compat_old_sigset_t sa_mask;
 compat_ulong_t sa_flags;
 compat_uptr_t sa_restorer;
};


struct compat_keyctl_kdf_params {
 compat_uptr_t hashname;
 compat_uptr_t otherinfo;
 __u32 otherinfolen;
 __u32 __spare[8];
};

struct compat_statfs;
struct compat_statfs64;
struct compat_old_linux_dirent;
struct compat_linux_dirent;
struct linux_dirent64;
struct compat_msghdr;
struct compat_mmsghdr;
struct compat_sysinfo;
struct compat_sysctl_args;
struct compat_kexec_segment;
struct compat_mq_attr;
struct compat_msgbuf;

           long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
           long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);

           long compat_sys_ipc(u32, int, int, u32, compat_uptr_t, u32);
           long compat_sys_shmat(int shmid, compat_uptr_t shmaddr, int shmflg);
           long compat_sys_semctl(int semid, int semnum, int cmd, int arg);
           long compat_sys_msgsnd(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, int msgflg);
           long compat_sys_msgrcv(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, compat_long_t msgtyp, int msgflg);
long compat_sys_msgctl(int first, int second, void *uptr);
long compat_sys_shmctl(int first, int second, void *uptr);
long compat_sys_semtimedop(int semid, struct sembuf *tsems,
  unsigned nsems, const struct compat_timespec *timeout);
           long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);
           long compat_sys_ustat(unsigned dev, struct compat_ustat *u32);

           ssize_t compat_sys_readv(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
           ssize_t compat_sys_writev(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
           ssize_t compat_sys_preadv(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
           ssize_t compat_sys_pwritev(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
           ssize_t compat_sys_preadv2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);
           ssize_t compat_sys_pwritev2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);
# 390 "../include/linux/compat.h"
           long compat_sys_lseek(unsigned int, compat_off_t, unsigned int);

           long compat_sys_execve(const char *filename, const compat_uptr_t *argv,
       const compat_uptr_t *envp);
           long compat_sys_execveat(int dfd, const char *filename,
       const compat_uptr_t *argv,
       const compat_uptr_t *envp, int flags);

           long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct compat_timeval *tvp);

           long compat_sys_old_select(struct compat_sel_arg_struct *arg);

           long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);





long compat_get_bitmap(unsigned long *mask, const compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
int copy_siginfo_from_user32(siginfo_t *to, struct compat_siginfo *from);
int copy_siginfo_to_user32(struct compat_siginfo *to, const siginfo_t *from);
int get_compat_sigevent(struct sigevent *event,
  const struct compat_sigevent *u_event);
long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid, compat_pid_t pid, int sig,
      struct compat_siginfo *uinfo);

           long compat_sys_sigaction(int sig,
                                   const struct compat_old_sigaction *act,
                                   struct compat_old_sigaction *oact);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int compat_timeval_compare(struct compat_timeval *lhs,
     struct compat_timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int compat_timespec_compare(struct compat_timespec *lhs,
     struct compat_timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern int get_compat_itimerspec(struct itimerspec *dst,
     const struct compat_itimerspec *src);
extern int put_compat_itimerspec(struct compat_itimerspec *dst,
     const struct itimerspec *src);

           long compat_sys_gettimeofday(struct compat_timeval *tv,
  struct timezone *tz);
           long compat_sys_settimeofday(struct compat_timeval *tv,
  struct timezone *tz);

           long compat_sys_adjtimex(struct compat_timex *utp);

extern void sigset_from_compat(sigset_t *set, const compat_sigset_t *compat);
extern void sigset_to_compat(compat_sigset_t *compat, const sigset_t *set);

           long compat_sys_migrate_pages(compat_pid_t pid,
  compat_ulong_t maxnode, const compat_ulong_t *old_nodes,
  const compat_ulong_t *new_nodes);

extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);

extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);
           long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);

           long compat_sys_lookup_dcookie(u32, u32, char *, compat_size_t);



struct epoll_event;
           long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   const compat_sigset_t *sigmask,
   compat_size_t sigsetsize);

           long compat_sys_utime(const char *filename,
     struct compat_utimbuf *t);
           long compat_sys_utimensat(unsigned int dfd,
         const char *filename,
         struct compat_timespec *t,
         int flags);

           long compat_sys_time(compat_time_t *tloc);
           long compat_sys_stime(compat_time_t *tptr);
           long compat_sys_signalfd(int ufd,
        const compat_sigset_t *sigmask,
        compat_size_t sigsetsize);
           long compat_sys_timerfd_settime(int ufd, int flags,
       const struct compat_itimerspec *utmr,
       struct compat_itimerspec *otmr);
           long compat_sys_timerfd_gettime(int ufd,
       struct compat_itimerspec *otmr);

           long compat_sys_move_pages(pid_t pid, compat_ulong_t nr_pages,
          __u32 *pages,
          const int *nodes,
          int *status,
          int flags);
           long compat_sys_futimesat(unsigned int dfd,
         const char *filename,
         struct compat_timeval *t);
           long compat_sys_utimes(const char *filename,
      struct compat_timeval *t);
           long compat_sys_newstat(const char *filename,
       struct compat_stat *statbuf);
           long compat_sys_newlstat(const char *filename,
        struct compat_stat *statbuf);
           long compat_sys_newfstatat(unsigned int dfd,
          const char *filename,
          struct compat_stat *statbuf,
          int flag);
           long compat_sys_newfstat(unsigned int fd,
        struct compat_stat *statbuf);
           long compat_sys_statfs(const char *pathname,
      struct compat_statfs *buf);
           long compat_sys_fstatfs(unsigned int fd,
       struct compat_statfs *buf);
           long compat_sys_statfs64(const char *pathname,
        compat_size_t sz,
        struct compat_statfs64 *buf);
           long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
         struct compat_statfs64 *buf);
           long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
       compat_ulong_t arg);
           long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
           long compat_sys_io_setup(unsigned nr_reqs, u32 *ctx32p);
           long compat_sys_io_getevents(compat_aio_context_t ctx_id,
     compat_long_t min_nr,
     compat_long_t nr,
     struct io_event *events,
     struct compat_timespec *timeout);
           long compat_sys_io_submit(compat_aio_context_t ctx_id, int nr,
         u32 *iocb);
           long compat_sys_mount(const char *dev_name,
     const char *dir_name,
     const char *type, compat_ulong_t flags,
     const void *data);
           long compat_sys_old_readdir(unsigned int fd,
           struct compat_old_linux_dirent *,
           unsigned int count);
           long compat_sys_getdents(unsigned int fd,
        struct compat_linux_dirent *dirent,
        unsigned int count);
           long compat_sys_vmsplice(int fd, const struct compat_iovec *,
        unsigned int nr_segs, unsigned int flags);
           long compat_sys_open(const char *filename, int flags,
    umode_t mode);
           long compat_sys_openat(int dfd, const char *filename,
      int flags, umode_t mode);
           long compat_sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
           long compat_sys_truncate(const char *, compat_off_t);
           long compat_sys_ftruncate(unsigned int, compat_ulong_t);
           long compat_sys_pselect6(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct compat_timespec *tsp,
        void *sig);
           long compat_sys_ppoll(struct pollfd *ufds,
     unsigned int nfds,
     struct compat_timespec *tsp,
     const compat_sigset_t *sigmask,
     compat_size_t sigsetsize);
           long compat_sys_signalfd4(int ufd,
         const compat_sigset_t *sigmask,
         compat_size_t sigsetsize, int flags);
           long compat_sys_get_mempolicy(int *policy,
      compat_ulong_t *nmask,
      compat_ulong_t maxnode,
      compat_ulong_t addr,
      compat_ulong_t flags);
           long compat_sys_set_mempolicy(int mode, compat_ulong_t *nmask,
      compat_ulong_t maxnode);
           long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,
     compat_ulong_t mode,
     compat_ulong_t *nmask,
     compat_ulong_t maxnode, compat_ulong_t flags);

           long compat_sys_setsockopt(int fd, int level, int optname,
          char *optval, unsigned int optlen);
           long compat_sys_sendmsg(int fd, struct compat_msghdr *msg,
       unsigned flags);
           long compat_sys_sendmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags);
           long compat_sys_recvmsg(int fd, struct compat_msghdr *msg,
       unsigned int flags);
           long compat_sys_recv(int fd, void *buf, compat_size_t len,
    unsigned flags);
           long compat_sys_recvfrom(int fd, void *buf, compat_size_t len,
       unsigned flags, struct sockaddr *addr,
       int *addrlen);
           long compat_sys_recvmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct compat_timespec *timeout);
           long compat_sys_nanosleep(struct compat_timespec *rqtp,
         struct compat_timespec *rmtp);
           long compat_sys_getitimer(int which,
         struct compat_itimerval *it);
           long compat_sys_setitimer(int which,
         struct compat_itimerval *in,
         struct compat_itimerval *out);
           long compat_sys_times(struct compat_tms *tbuf);
           long compat_sys_setrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_getrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_getrusage(int who, struct compat_rusage *ru);
           long compat_sys_sched_setaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
           long compat_sys_sched_getaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
           long compat_sys_timer_create(clockid_t which_clock,
   struct compat_sigevent *timer_event_spec,
   timer_t *created_timer_id);
           long compat_sys_timer_settime(timer_t timer_id, int flags,
      struct compat_itimerspec *new,
      struct compat_itimerspec *old);
           long compat_sys_timer_gettime(timer_t timer_id,
     struct compat_itimerspec *setting);
           long compat_sys_clock_settime(clockid_t which_clock,
      struct compat_timespec *tp);
           long compat_sys_clock_gettime(clockid_t which_clock,
      struct compat_timespec *tp);
           long compat_sys_clock_adjtime(clockid_t which_clock,
      struct compat_timex *tp);
           long compat_sys_clock_getres(clockid_t which_clock,
     struct compat_timespec *tp);
           long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,
        struct compat_timespec *rqtp,
        struct compat_timespec *rmtp);
           long compat_sys_rt_sigtimedwait(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct compat_timespec *uts, compat_size_t sigsetsize);
           long compat_sys_rt_sigsuspend(compat_sigset_t *unewset,
      compat_size_t sigsetsize);
           long compat_sys_rt_sigprocmask(int how, compat_sigset_t *set,
       compat_sigset_t *oset,
       compat_size_t sigsetsize);
           long compat_sys_rt_sigpending(compat_sigset_t *uset,
      compat_size_t sigsetsize);

           long compat_sys_rt_sigaction(int,
     const struct compat_sigaction *,
     struct compat_sigaction *,
     compat_size_t);

           long compat_sys_rt_sigqueueinfo(compat_pid_t pid, int sig,
    struct compat_siginfo *uinfo);
           long compat_sys_sysinfo(struct compat_sysinfo *info);
           long compat_sys_ioctl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
           long compat_sys_futex(u32 *uaddr, int op, u32 val,
  struct compat_timespec *utime, u32 *uaddr2,
  u32 val3);
           long compat_sys_getsockopt(int fd, int level, int optname,
          char *optval, int *optlen);
           long compat_sys_kexec_load(compat_ulong_t entry,
          compat_ulong_t nr_segments,
          struct compat_kexec_segment *,
          compat_ulong_t flags);
           long compat_sys_mq_getsetattr(mqd_t mqdes,
   const struct compat_mq_attr *u_mqstat,
   struct compat_mq_attr *u_omqstat);
           long compat_sys_mq_notify(mqd_t mqdes,
   const struct compat_sigevent *u_notification);
           long compat_sys_mq_open(const char *u_name,
   int oflag, compat_mode_t mode,
   struct compat_mq_attr *u_attr);
           long compat_sys_mq_timedsend(mqd_t mqdes,
   const char *u_msg_ptr,
   compat_size_t msg_len, unsigned int msg_prio,
   const struct compat_timespec *u_abs_timeout);
           ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,
   char *u_msg_ptr,
   compat_size_t msg_len, unsigned int *u_msg_prio,
   const struct compat_timespec *u_abs_timeout);
           long compat_sys_socketcall(int call, u32 *args);
           long compat_sys_sysctl(struct compat_sysctl_args *args);

extern ssize_t compat_rw_copy_check_uvector(int type,
  const struct compat_iovec *uvector,
  unsigned long nr_segs,
  unsigned long fast_segs, struct iovec *fast_pointer,
  struct iovec **ret_pointer);

extern void *compat_alloc_user_space(unsigned long len);

           ssize_t compat_sys_process_vm_readv(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);
           ssize_t compat_sys_process_vm_writev(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);

           long compat_sys_sendfile(int out_fd, int in_fd,
        compat_off_t *offset, compat_size_t count);
           long compat_sys_sendfile64(int out_fd, int in_fd,
        compat_loff_t *offset, compat_size_t count);
           long compat_sys_sigaltstack(const compat_stack_t *uss_ptr,
           compat_stack_t *uoss_ptr);


           long compat_sys_sigpending(compat_old_sigset_t *set);



           long compat_sys_sigprocmask(int how, compat_old_sigset_t *nset,
           compat_old_sigset_t *oset);


int compat_restore_altstack(const compat_stack_t *uss);
int __compat_save_altstack(compat_stack_t *, unsigned long);
# 740 "../include/linux/compat.h"
           long compat_sys_sched_rr_get_interval(compat_pid_t pid,
       struct compat_timespec *interval);

           long compat_sys_fanotify_mark(int, unsigned int, __u32, __u32,
         int, const char *);

           long compat_sys_arch_prctl(int option, unsigned long arg2);
# 755 "../include/linux/compat.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool in_compat_syscall(void) { return is_compat_task(); }
# 764 "../include/linux/compat.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct compat_timeval ns_to_compat_timeval(s64 nsec)
{
 struct timeval tv;
 struct compat_timeval ctv;

 tv = ns_to_timeval(nsec);
 ctv.tv_sec = tv.tv_sec;
 ctv.tv_usec = tv.tv_usec;

 return ctv;
}
# 18 "../include/linux/ethtool.h" 2
# 1 "../include/uapi/linux/ethtool.h" 1
# 100 "../include/uapi/linux/ethtool.h"
struct ethtool_cmd {
 __u32 cmd;
 __u32 supported;
 __u32 advertising;
 __u16 speed;
 __u8 duplex;
 __u8 port;
 __u8 phy_address;
 __u8 transceiver;
 __u8 autoneg;
 __u8 mdio_support;
 __u32 maxtxpkt;
 __u32 maxrxpkt;
 __u16 speed_hi;
 __u8 eth_tp_mdix;
 __u8 eth_tp_mdix_ctrl;
 __u32 lp_advertising;
 __u32 reserved[2];
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ethtool_cmd_speed_set(struct ethtool_cmd *ep,
      __u32 speed)
{
 ep->speed = (__u16)(speed & 0xFFFF);
 ep->speed_hi = (__u16)(speed >> 16);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u32 ethtool_cmd_speed(const struct ethtool_cmd *ep)
{
 return (ep->speed_hi << 16) | ep->speed;
}
# 181 "../include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
 __u32 cmd;
 char driver[32];
 char version[32];
 char fw_version[32];
 char bus_info[32];
 char erom_version[32];
 char reserved2[12];
 __u32 n_priv_flags;
 __u32 n_stats;
 __u32 testinfo_len;
 __u32 eedump_len;
 __u32 regdump_len;
};
# 207 "../include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
 __u32 cmd;
 __u32 supported;
 __u32 wolopts;
 __u8 sopass[6];
};


struct ethtool_value {
 __u32 cmd;
 __u32 data;
};

enum tunable_id {
 ETHTOOL_ID_UNSPEC,
 ETHTOOL_RX_COPYBREAK,
 ETHTOOL_TX_COPYBREAK,




 __ETHTOOL_TUNABLE_COUNT,
};

enum tunable_type_id {
 ETHTOOL_TUNABLE_UNSPEC,
 ETHTOOL_TUNABLE_U8,
 ETHTOOL_TUNABLE_U16,
 ETHTOOL_TUNABLE_U32,
 ETHTOOL_TUNABLE_U64,
 ETHTOOL_TUNABLE_STRING,
 ETHTOOL_TUNABLE_S8,
 ETHTOOL_TUNABLE_S16,
 ETHTOOL_TUNABLE_S32,
 ETHTOOL_TUNABLE_S64,
};

struct ethtool_tunable {
 __u32 cmd;
 __u32 id;
 __u32 type_id;
 __u32 len;
 void *data[0];
};




enum phy_tunable_id {
 ETHTOOL_PHY_ID_UNSPEC,
 ETHTOOL_PHY_DOWNSHIFT,




 __ETHTOOL_PHY_TUNABLE_COUNT,
};
# 280 "../include/uapi/linux/ethtool.h"
struct ethtool_regs {
 __u32 cmd;
 __u32 version;
 __u32 len;
 __u8 data[0];
};
# 305 "../include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
 __u32 cmd;
 __u32 magic;
 __u32 offset;
 __u32 len;
 __u8 data[0];
};
# 330 "../include/uapi/linux/ethtool.h"
struct ethtool_eee {
 __u32 cmd;
 __u32 supported;
 __u32 advertised;
 __u32 lp_advertised;
 __u32 eee_active;
 __u32 eee_enabled;
 __u32 tx_lpi_enabled;
 __u32 tx_lpi_timer;
 __u32 reserved[2];
};
# 352 "../include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
 __u32 cmd;
 __u32 type;
 __u32 eeprom_len;
 __u32 reserved[8];
};
# 432 "../include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
 __u32 cmd;
 __u32 rx_coalesce_usecs;
 __u32 rx_max_coalesced_frames;
 __u32 rx_coalesce_usecs_irq;
 __u32 rx_max_coalesced_frames_irq;
 __u32 tx_coalesce_usecs;
 __u32 tx_max_coalesced_frames;
 __u32 tx_coalesce_usecs_irq;
 __u32 tx_max_coalesced_frames_irq;
 __u32 stats_block_coalesce_usecs;
 __u32 use_adaptive_rx_coalesce;
 __u32 use_adaptive_tx_coalesce;
 __u32 pkt_rate_low;
 __u32 rx_coalesce_usecs_low;
 __u32 rx_max_coalesced_frames_low;
 __u32 tx_coalesce_usecs_low;
 __u32 tx_max_coalesced_frames_low;
 __u32 pkt_rate_high;
 __u32 rx_coalesce_usecs_high;
 __u32 rx_max_coalesced_frames_high;
 __u32 tx_coalesce_usecs_high;
 __u32 tx_max_coalesced_frames_high;
 __u32 rate_sample_interval;
};
# 483 "../include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
 __u32 cmd;
 __u32 rx_max_pending;
 __u32 rx_mini_max_pending;
 __u32 rx_jumbo_max_pending;
 __u32 tx_max_pending;
 __u32 rx_pending;
 __u32 rx_mini_pending;
 __u32 rx_jumbo_pending;
 __u32 tx_pending;
};
# 511 "../include/uapi/linux/ethtool.h"
struct ethtool_channels {
 __u32 cmd;
 __u32 max_rx;
 __u32 max_tx;
 __u32 max_other;
 __u32 max_combined;
 __u32 rx_count;
 __u32 tx_count;
 __u32 other_count;
 __u32 combined_count;
};
# 545 "../include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
 __u32 cmd;
 __u32 autoneg;
 __u32 rx_pause;
 __u32 tx_pause;
};
# 567 "../include/uapi/linux/ethtool.h"
enum ethtool_stringset {
 ETH_SS_TEST = 0,
 ETH_SS_STATS,
 ETH_SS_PRIV_FLAGS,
 ETH_SS_NTUPLE_FILTERS,
 ETH_SS_FEATURES,
 ETH_SS_RSS_HASH_FUNCS,
 ETH_SS_TUNABLES,
 ETH_SS_PHY_STATS,
 ETH_SS_PHY_TUNABLES,
};
# 591 "../include/uapi/linux/ethtool.h"
struct ethtool_gstrings {
 __u32 cmd;
 __u32 string_set;
 __u32 len;
 __u8 data[0];
};
# 615 "../include/uapi/linux/ethtool.h"
struct ethtool_sset_info {
 __u32 cmd;
 __u32 reserved;
 __u64 sset_mask;
 __u32 data[0];
};
# 632 "../include/uapi/linux/ethtool.h"
enum ethtool_test_flags {
 ETH_TEST_FL_OFFLINE = (1 << 0),
 ETH_TEST_FL_FAILED = (1 << 1),
 ETH_TEST_FL_EXTERNAL_LB = (1 << 2),
 ETH_TEST_FL_EXTERNAL_LB_DONE = (1 << 3),
};
# 653 "../include/uapi/linux/ethtool.h"
struct ethtool_test {
 __u32 cmd;
 __u32 flags;
 __u32 reserved;
 __u32 len;
 __u64 data[0];
};
# 672 "../include/uapi/linux/ethtool.h"
struct ethtool_stats {
 __u32 cmd;
 __u32 n_stats;
 __u64 data[0];
};
# 689 "../include/uapi/linux/ethtool.h"
struct ethtool_perm_addr {
 __u32 cmd;
 __u32 size;
 __u8 data[0];
};
# 704 "../include/uapi/linux/ethtool.h"
enum ethtool_flags {
 ETH_FLAG_TXVLAN = (1 << 7),
 ETH_FLAG_RXVLAN = (1 << 8),
 ETH_FLAG_LRO = (1 << 15),
 ETH_FLAG_NTUPLE = (1 << 27),
 ETH_FLAG_RXHASH = (1 << 28),
};
# 728 "../include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be16 psrc;
 __be16 pdst;
 __u8 tos;
};
# 745 "../include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be32 spi;
 __u8 tos;
};
# 763 "../include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
 __be32 ip4src;
 __be32 ip4dst;
 __be32 l4_4_bytes;
 __u8 tos;
 __u8 ip_ver;
 __u8 proto;
};
# 782 "../include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be16 psrc;
 __be16 pdst;
 __u8 tclass;
};
# 799 "../include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be32 spi;
 __u8 tclass;
};
# 814 "../include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
 __be32 ip6src[4];
 __be32 ip6dst[4];
 __be32 l4_4_bytes;
 __u8 tclass;
 __u8 l4_proto;
};

union ethtool_flow_union {
 struct ethtool_tcpip4_spec tcp_ip4_spec;
 struct ethtool_tcpip4_spec udp_ip4_spec;
 struct ethtool_tcpip4_spec sctp_ip4_spec;
 struct ethtool_ah_espip4_spec ah_ip4_spec;
 struct ethtool_ah_espip4_spec esp_ip4_spec;
 struct ethtool_usrip4_spec usr_ip4_spec;
 struct ethtool_tcpip6_spec tcp_ip6_spec;
 struct ethtool_tcpip6_spec udp_ip6_spec;
 struct ethtool_tcpip6_spec sctp_ip6_spec;
 struct ethtool_ah_espip6_spec ah_ip6_spec;
 struct ethtool_ah_espip6_spec esp_ip6_spec;
 struct ethtool_usrip6_spec usr_ip6_spec;
 struct ethhdr ether_spec;
 __u8 hdata[52];
};
# 850 "../include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
 __u8 padding[2];
 unsigned char h_dest[6];
 __be16 vlan_etype;
 __be16 vlan_tci;
 __be32 data[2];
};
# 874 "../include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
 __u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 __u64 ring_cookie;
 __u32 location;
};
# 898 "../include/uapi/linux/ethtool.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u64 ethtool_get_flow_spec_ring(__u64 ring_cookie)
{
 return 0x00000000FFFFFFFFLL & ring_cookie;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u64 ethtool_get_flow_spec_ring_vf(__u64 ring_cookie)
{
 return (0x000000FF00000000LL & ring_cookie) >>
    32;
}
# 961 "../include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
 __u32 cmd;
 __u32 flow_type;
 __u64 data;
 struct ethtool_rx_flow_spec fs;
 __u32 rule_cnt;
 __u32 rule_locs[0];
};
# 984 "../include/uapi/linux/ethtool.h"
struct ethtool_rxfh_indir {
 __u32 cmd;
 __u32 size;
 __u32 ring_index[0];
};
# 1014 "../include/uapi/linux/ethtool.h"
struct ethtool_rxfh {
 __u32 cmd;
 __u32 rss_context;
 __u32 indir_size;
 __u32 key_size;
 __u8 hfunc;
 __u8 rsvd8[3];
 __u32 rsvd32;
 __u32 rss_config[0];
};
# 1042 "../include/uapi/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
 __u32 flow_type;
 union {
  struct ethtool_tcpip4_spec tcp_ip4_spec;
  struct ethtool_tcpip4_spec udp_ip4_spec;
  struct ethtool_tcpip4_spec sctp_ip4_spec;
  struct ethtool_ah_espip4_spec ah_ip4_spec;
  struct ethtool_ah_espip4_spec esp_ip4_spec;
  struct ethtool_usrip4_spec usr_ip4_spec;
  struct ethhdr ether_spec;
  __u8 hdata[72];
 } h_u, m_u;

 __u16 vlan_tag;
 __u16 vlan_tag_mask;
 __u64 data;
 __u64 data_mask;

 __s32 action;


};






struct ethtool_rx_ntuple {
 __u32 cmd;
 struct ethtool_rx_ntuple_flow_spec fs;
};


enum ethtool_flash_op_type {
 ETHTOOL_FLASH_ALL_REGIONS = 0,
};


struct ethtool_flash {
 __u32 cmd;
 __u32 region;
 char data[128];
};
# 1101 "../include/uapi/linux/ethtool.h"
struct ethtool_dump {
 __u32 cmd;
 __u32 version;
 __u32 flag;
 __u32 len;
 __u8 data[0];
};
# 1120 "../include/uapi/linux/ethtool.h"
struct ethtool_get_features_block {
 __u32 available;
 __u32 requested;
 __u32 active;
 __u32 never_changed;
};
# 1135 "../include/uapi/linux/ethtool.h"
struct ethtool_gfeatures {
 __u32 cmd;
 __u32 size;
 struct ethtool_get_features_block features[0];
};






struct ethtool_set_features_block {
 __u32 valid;
 __u32 requested;
};







struct ethtool_sfeatures {
 __u32 cmd;
 __u32 size;
 struct ethtool_set_features_block features[0];
};
# 1181 "../include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
 __u32 cmd;
 __u32 so_timestamping;
 __s32 phc_index;
 __u32 tx_types;
 __u32 tx_reserved[3];
 __u32 rx_filters;
 __u32 rx_reserved[3];
};
# 1216 "../include/uapi/linux/ethtool.h"
enum ethtool_sfeatures_retval_bits {
 ETHTOOL_F_UNSUPPORTED__BIT,
 ETHTOOL_F_WISH__BIT,
 ETHTOOL_F_COMPAT__BIT,
};
# 1235 "../include/uapi/linux/ethtool.h"
struct ethtool_per_queue_op {
 __u32 cmd;
 __u32 sub_command;
 __u32 queue_mask[(((4096) + (32) - 1) / (32))];
 char data[];
};
# 1253 "../include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
 __u32 cmd;

 __u32 active_fec;
 __u32 fec;
 __u32 reserved;
};
# 1269 "../include/uapi/linux/ethtool.h"
enum ethtool_fec_config_bits {
 ETHTOOL_FEC_NONE_BIT,
 ETHTOOL_FEC_AUTO_BIT,
 ETHTOOL_FEC_OFF_BIT,
 ETHTOOL_FEC_RS_BIT,
 ETHTOOL_FEC_BASER_BIT,
};
# 1383 "../include/uapi/linux/ethtool.h"
enum ethtool_link_mode_bit_indices {
 ETHTOOL_LINK_MODE_10baseT_Half_BIT = 0,
 ETHTOOL_LINK_MODE_10baseT_Full_BIT = 1,
 ETHTOOL_LINK_MODE_100baseT_Half_BIT = 2,
 ETHTOOL_LINK_MODE_100baseT_Full_BIT = 3,
 ETHTOOL_LINK_MODE_1000baseT_Half_BIT = 4,
 ETHTOOL_LINK_MODE_1000baseT_Full_BIT = 5,
 ETHTOOL_LINK_MODE_Autoneg_BIT = 6,
 ETHTOOL_LINK_MODE_TP_BIT = 7,
 ETHTOOL_LINK_MODE_AUI_BIT = 8,
 ETHTOOL_LINK_MODE_MII_BIT = 9,
 ETHTOOL_LINK_MODE_FIBRE_BIT = 10,
 ETHTOOL_LINK_MODE_BNC_BIT = 11,
 ETHTOOL_LINK_MODE_10000baseT_Full_BIT = 12,
 ETHTOOL_LINK_MODE_Pause_BIT = 13,
 ETHTOOL_LINK_MODE_Asym_Pause_BIT = 14,
 ETHTOOL_LINK_MODE_2500baseX_Full_BIT = 15,
 ETHTOOL_LINK_MODE_Backplane_BIT = 16,
 ETHTOOL_LINK_MODE_1000baseKX_Full_BIT = 17,
 ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT = 18,
 ETHTOOL_LINK_MODE_10000baseKR_Full_BIT = 19,
 ETHTOOL_LINK_MODE_10000baseR_FEC_BIT = 20,
 ETHTOOL_LINK_MODE_20000baseMLD2_Full_BIT = 21,
 ETHTOOL_LINK_MODE_20000baseKR2_Full_BIT = 22,
 ETHTOOL_LINK_MODE_40000baseKR4_Full_BIT = 23,
 ETHTOOL_LINK_MODE_40000baseCR4_Full_BIT = 24,
 ETHTOOL_LINK_MODE_40000baseSR4_Full_BIT = 25,
 ETHTOOL_LINK_MODE_40000baseLR4_Full_BIT = 26,
 ETHTOOL_LINK_MODE_56000baseKR4_Full_BIT = 27,
 ETHTOOL_LINK_MODE_56000baseCR4_Full_BIT = 28,
 ETHTOOL_LINK_MODE_56000baseSR4_Full_BIT = 29,
 ETHTOOL_LINK_MODE_56000baseLR4_Full_BIT = 30,
 ETHTOOL_LINK_MODE_25000baseCR_Full_BIT = 31,
 ETHTOOL_LINK_MODE_25000baseKR_Full_BIT = 32,
 ETHTOOL_LINK_MODE_25000baseSR_Full_BIT = 33,
 ETHTOOL_LINK_MODE_50000baseCR2_Full_BIT = 34,
 ETHTOOL_LINK_MODE_50000baseKR2_Full_BIT = 35,
 ETHTOOL_LINK_MODE_100000baseKR4_Full_BIT = 36,
 ETHTOOL_LINK_MODE_100000baseSR4_Full_BIT = 37,
 ETHTOOL_LINK_MODE_100000baseCR4_Full_BIT = 38,
 ETHTOOL_LINK_MODE_100000baseLR4_ER4_Full_BIT = 39,
 ETHTOOL_LINK_MODE_50000baseSR2_Full_BIT = 40,
 ETHTOOL_LINK_MODE_1000baseX_Full_BIT = 41,
 ETHTOOL_LINK_MODE_10000baseCR_Full_BIT = 42,
 ETHTOOL_LINK_MODE_10000baseSR_Full_BIT = 43,
 ETHTOOL_LINK_MODE_10000baseLR_Full_BIT = 44,
 ETHTOOL_LINK_MODE_10000baseLRM_Full_BIT = 45,
 ETHTOOL_LINK_MODE_10000baseER_Full_BIT = 46,
 ETHTOOL_LINK_MODE_2500baseT_Full_BIT = 47,
 ETHTOOL_LINK_MODE_5000baseT_Full_BIT = 48,

 ETHTOOL_LINK_MODE_FEC_NONE_BIT = 49,
 ETHTOOL_LINK_MODE_FEC_RS_BIT = 50,
 ETHTOOL_LINK_MODE_FEC_BASER_BIT = 51,







 __ETHTOOL_LINK_MODE_LAST
   = ETHTOOL_LINK_MODE_FEC_BASER_BIT,
};
# 1556 "../include/uapi/linux/ethtool.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ethtool_validate_speed(__u32 speed)
{
 return speed <= ((int)(~0U>>1)) || speed == -1;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int ethtool_validate_duplex(__u8 duplex)
{
 switch (duplex) {
 case 0x00:
 case 0x01:
 case 0xff:
  return 1;
 }

 return 0;
}
# 1674 "../include/uapi/linux/ethtool.h"
enum ethtool_reset_flags {





 ETH_RESET_MGMT = 1 << 0,
 ETH_RESET_IRQ = 1 << 1,
 ETH_RESET_DMA = 1 << 2,
 ETH_RESET_FILTER = 1 << 3,
 ETH_RESET_OFFLOAD = 1 << 4,
 ETH_RESET_MAC = 1 << 5,
 ETH_RESET_PHY = 1 << 6,
 ETH_RESET_RAM = 1 << 7,


 ETH_RESET_DEDICATED = 0x0000ffff,

 ETH_RESET_ALL = 0xffffffff,

};
# 1799 "../include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
 __u32 cmd;
 __u32 speed;
 __u8 duplex;
 __u8 port;
 __u8 phy_address;
 __u8 autoneg;
 __u8 mdio_support;
 __u8 eth_tp_mdix;
 __u8 eth_tp_mdix_ctrl;
 __s8 link_mode_masks_nwords;
 __u8 transceiver;
 __u8 reserved1[3];
 __u32 reserved[7];
 __u32 link_mode_masks[0];





};
# 19 "../include/linux/ethtool.h" 2



struct compat_ethtool_rx_flow_spec {
 u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 compat_u64 ring_cookie;
 u32 location;
};

struct compat_ethtool_rxnfc {
 u32 cmd;
 u32 flow_type;
 compat_u64 data;
 struct compat_ethtool_rx_flow_spec fs;
 u32 rule_cnt;
 u32 rule_locs[0];
};
# 54 "../include/linux/ethtool.h"
enum ethtool_phys_id_state {
 ETHTOOL_ID_INACTIVE,
 ETHTOOL_ID_ACTIVE,
 ETHTOOL_ID_ON,
 ETHTOOL_ID_OFF
};

enum {
 ETH_RSS_HASH_TOP_BIT,
 ETH_RSS_HASH_XOR_BIT,
 ETH_RSS_HASH_CRC32_BIT,





 ETH_RSS_HASH_FUNCS_COUNT
};
# 83 "../include/linux/ethtool.h"
struct net_device;


u32 ethtool_op_get_link(struct net_device *dev);
int ethtool_op_get_ts_info(struct net_device *dev, struct ethtool_ts_info *eti);
# 96 "../include/linux/ethtool.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
 return index % n_rx_rings;
}
# 112 "../include/linux/ethtool.h"
struct ethtool_link_ksettings {
 struct ethtool_link_settings base;
 struct {
  unsigned long supported[((((__ETHTOOL_LINK_MODE_LAST + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
  unsigned long advertising[((((__ETHTOOL_LINK_MODE_LAST + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
  unsigned long lp_advertising[((((__ETHTOOL_LINK_MODE_LAST + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 } link_modes;
};
# 163 "../include/linux/ethtool.h"
extern int
__ethtool_get_link_ksettings(struct net_device *dev,
        struct ethtool_link_ksettings *link_ksettings);

void ethtool_convert_legacy_u32_to_link_mode(unsigned long *dst,
          u32 legacy_u32);


bool ethtool_convert_link_mode_to_legacy_u32(u32 *legacy_u32,
         const unsigned long *src);
# 318 "../include/linux/ethtool.h"
struct ethtool_ops {
 int (*get_settings)(struct net_device *, struct ethtool_cmd *);
 int (*set_settings)(struct net_device *, struct ethtool_cmd *);
 void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *);
 int (*get_regs_len)(struct net_device *);
 void (*get_regs)(struct net_device *, struct ethtool_regs *, void *);
 void (*get_wol)(struct net_device *, struct ethtool_wolinfo *);
 int (*set_wol)(struct net_device *, struct ethtool_wolinfo *);
 u32 (*get_msglevel)(struct net_device *);
 void (*set_msglevel)(struct net_device *, u32);
 int (*nway_reset)(struct net_device *);
 u32 (*get_link)(struct net_device *);
 int (*get_eeprom_len)(struct net_device *);
 int (*get_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*set_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *);
 int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *);
 void (*get_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 int (*set_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 void (*get_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 int (*set_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 void (*self_test)(struct net_device *, struct ethtool_test *, u64 *);
 void (*get_strings)(struct net_device *, u32 stringset, u8 *);
 int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state);
 void (*get_ethtool_stats)(struct net_device *,
         struct ethtool_stats *, u64 *);
 int (*begin)(struct net_device *);
 void (*complete)(struct net_device *);
 u32 (*get_priv_flags)(struct net_device *);
 int (*set_priv_flags)(struct net_device *, u32);
 int (*get_sset_count)(struct net_device *, int);
 int (*get_rxnfc)(struct net_device *,
        struct ethtool_rxnfc *, u32 *rule_locs);
 int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *);
 int (*flash_device)(struct net_device *, struct ethtool_flash *);
 int (*reset)(struct net_device *, u32 *);
 u32 (*get_rxfh_key_size)(struct net_device *);
 u32 (*get_rxfh_indir_size)(struct net_device *);
 int (*get_rxfh)(struct net_device *, u32 *indir, u8 *key,
       u8 *hfunc);
 int (*set_rxfh)(struct net_device *, const u32 *indir,
       const u8 *key, const u8 hfunc);
 void (*get_channels)(struct net_device *, struct ethtool_channels *);
 int (*set_channels)(struct net_device *, struct ethtool_channels *);
 int (*get_dump_flag)(struct net_device *, struct ethtool_dump *);
 int (*get_dump_data)(struct net_device *,
     struct ethtool_dump *, void *);
 int (*set_dump)(struct net_device *, struct ethtool_dump *);
 int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *);
 int (*get_module_info)(struct net_device *,
       struct ethtool_modinfo *);
 int (*get_module_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_eee)(struct net_device *, struct ethtool_eee *);
 int (*set_eee)(struct net_device *, struct ethtool_eee *);
 int (*get_tunable)(struct net_device *,
          const struct ethtool_tunable *, void *);
 int (*set_tunable)(struct net_device *,
          const struct ethtool_tunable *, const void *);
 int (*get_per_queue_coalesce)(struct net_device *, u32,
       struct ethtool_coalesce *);
 int (*set_per_queue_coalesce)(struct net_device *, u32,
       struct ethtool_coalesce *);
 int (*get_link_ksettings)(struct net_device *,
          struct ethtool_link_ksettings *);
 int (*set_link_ksettings)(struct net_device *,
          const struct ethtool_link_ksettings *);
 int (*get_fecparam)(struct net_device *,
          struct ethtool_fecparam *);
 int (*set_fecparam)(struct net_device *,
          struct ethtool_fecparam *);
};
# 42 "../include/linux/netdevice.h" 2
# 1 "../include/net/net_namespace.h" 1
# 15 "../include/net/net_namespace.h"
# 1 "../include/net/netns/core.h" 1




struct ctl_table_header;
struct prot_inuse;

struct netns_core {

 struct ctl_table_header *sysctl_hdr;

 int sysctl_somaxconn;

 struct prot_inuse *inuse;
};
# 16 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/mib.h" 1




# 1 "../include/net/snmp.h" 1
# 23 "../include/net/snmp.h"
# 1 "../include/uapi/linux/snmp.h" 1
# 19 "../include/uapi/linux/snmp.h"
enum
{
 IPSTATS_MIB_NUM = 0,

 IPSTATS_MIB_INPKTS,
 IPSTATS_MIB_INOCTETS,
 IPSTATS_MIB_INDELIVERS,
 IPSTATS_MIB_OUTFORWDATAGRAMS,
 IPSTATS_MIB_OUTPKTS,
 IPSTATS_MIB_OUTOCTETS,

 IPSTATS_MIB_INHDRERRORS,
 IPSTATS_MIB_INTOOBIGERRORS,
 IPSTATS_MIB_INNOROUTES,
 IPSTATS_MIB_INADDRERRORS,
 IPSTATS_MIB_INUNKNOWNPROTOS,
 IPSTATS_MIB_INTRUNCATEDPKTS,
 IPSTATS_MIB_INDISCARDS,
 IPSTATS_MIB_OUTDISCARDS,
 IPSTATS_MIB_OUTNOROUTES,
 IPSTATS_MIB_REASMTIMEOUT,
 IPSTATS_MIB_REASMREQDS,
 IPSTATS_MIB_REASMOKS,
 IPSTATS_MIB_REASMFAILS,
 IPSTATS_MIB_FRAGOKS,
 IPSTATS_MIB_FRAGFAILS,
 IPSTATS_MIB_FRAGCREATES,
 IPSTATS_MIB_INMCASTPKTS,
 IPSTATS_MIB_OUTMCASTPKTS,
 IPSTATS_MIB_INBCASTPKTS,
 IPSTATS_MIB_OUTBCASTPKTS,
 IPSTATS_MIB_INMCASTOCTETS,
 IPSTATS_MIB_OUTMCASTOCTETS,
 IPSTATS_MIB_INBCASTOCTETS,
 IPSTATS_MIB_OUTBCASTOCTETS,
 IPSTATS_MIB_CSUMERRORS,
 IPSTATS_MIB_NOECTPKTS,
 IPSTATS_MIB_ECT1PKTS,
 IPSTATS_MIB_ECT0PKTS,
 IPSTATS_MIB_CEPKTS,
 IPSTATS_MIB_REASM_OVERLAPS,
 __IPSTATS_MIB_MAX
};






enum
{
 ICMP_MIB_NUM = 0,
 ICMP_MIB_INMSGS,
 ICMP_MIB_INERRORS,
 ICMP_MIB_INDESTUNREACHS,
 ICMP_MIB_INTIMEEXCDS,
 ICMP_MIB_INPARMPROBS,
 ICMP_MIB_INSRCQUENCHS,
 ICMP_MIB_INREDIRECTS,
 ICMP_MIB_INECHOS,
 ICMP_MIB_INECHOREPS,
 ICMP_MIB_INTIMESTAMPS,
 ICMP_MIB_INTIMESTAMPREPS,
 ICMP_MIB_INADDRMASKS,
 ICMP_MIB_INADDRMASKREPS,
 ICMP_MIB_OUTMSGS,
 ICMP_MIB_OUTERRORS,
 ICMP_MIB_OUTDESTUNREACHS,
 ICMP_MIB_OUTTIMEEXCDS,
 ICMP_MIB_OUTPARMPROBS,
 ICMP_MIB_OUTSRCQUENCHS,
 ICMP_MIB_OUTREDIRECTS,
 ICMP_MIB_OUTECHOS,
 ICMP_MIB_OUTECHOREPS,
 ICMP_MIB_OUTTIMESTAMPS,
 ICMP_MIB_OUTTIMESTAMPREPS,
 ICMP_MIB_OUTADDRMASKS,
 ICMP_MIB_OUTADDRMASKREPS,
 ICMP_MIB_CSUMERRORS,
 __ICMP_MIB_MAX
};







enum
{
 ICMP6_MIB_NUM = 0,
 ICMP6_MIB_INMSGS,
 ICMP6_MIB_INERRORS,
 ICMP6_MIB_OUTMSGS,
 ICMP6_MIB_OUTERRORS,
 ICMP6_MIB_CSUMERRORS,
 __ICMP6_MIB_MAX
};
# 125 "../include/uapi/linux/snmp.h"
enum
{
 TCP_MIB_NUM = 0,
 TCP_MIB_RTOALGORITHM,
 TCP_MIB_RTOMIN,
 TCP_MIB_RTOMAX,
 TCP_MIB_MAXCONN,
 TCP_MIB_ACTIVEOPENS,
 TCP_MIB_PASSIVEOPENS,
 TCP_MIB_ATTEMPTFAILS,
 TCP_MIB_ESTABRESETS,
 TCP_MIB_CURRESTAB,
 TCP_MIB_INSEGS,
 TCP_MIB_OUTSEGS,
 TCP_MIB_RETRANSSEGS,
 TCP_MIB_INERRS,
 TCP_MIB_OUTRSTS,
 TCP_MIB_CSUMERRORS,
 __TCP_MIB_MAX
};






enum
{
 UDP_MIB_NUM = 0,
 UDP_MIB_INDATAGRAMS,
 UDP_MIB_NOPORTS,
 UDP_MIB_INERRORS,
 UDP_MIB_OUTDATAGRAMS,
 UDP_MIB_RCVBUFERRORS,
 UDP_MIB_SNDBUFERRORS,
 UDP_MIB_CSUMERRORS,
 UDP_MIB_IGNOREDMULTI,
 __UDP_MIB_MAX
};


enum
{
 LINUX_MIB_NUM = 0,
 LINUX_MIB_SYNCOOKIESSENT,
 LINUX_MIB_SYNCOOKIESRECV,
 LINUX_MIB_SYNCOOKIESFAILED,
 LINUX_MIB_EMBRYONICRSTS,
 LINUX_MIB_PRUNECALLED,
 LINUX_MIB_RCVPRUNED,
 LINUX_MIB_OFOPRUNED,
 LINUX_MIB_OUTOFWINDOWICMPS,
 LINUX_MIB_LOCKDROPPEDICMPS,
 LINUX_MIB_ARPFILTER,
 LINUX_MIB_TIMEWAITED,
 LINUX_MIB_TIMEWAITRECYCLED,
 LINUX_MIB_TIMEWAITKILLED,
 LINUX_MIB_PAWSACTIVEREJECTED,
 LINUX_MIB_PAWSESTABREJECTED,
 LINUX_MIB_DELAYEDACKS,
 LINUX_MIB_DELAYEDACKLOCKED,
 LINUX_MIB_DELAYEDACKLOST,
 LINUX_MIB_LISTENOVERFLOWS,
 LINUX_MIB_LISTENDROPS,
 LINUX_MIB_TCPHPHITS,
 LINUX_MIB_TCPPUREACKS,
 LINUX_MIB_TCPHPACKS,
 LINUX_MIB_TCPRENORECOVERY,
 LINUX_MIB_TCPSACKRECOVERY,
 LINUX_MIB_TCPSACKRENEGING,
 LINUX_MIB_TCPFACKREORDER,
 LINUX_MIB_TCPSACKREORDER,
 LINUX_MIB_TCPRENOREORDER,
 LINUX_MIB_TCPTSREORDER,
 LINUX_MIB_TCPFULLUNDO,
 LINUX_MIB_TCPPARTIALUNDO,
 LINUX_MIB_TCPDSACKUNDO,
 LINUX_MIB_TCPLOSSUNDO,
 LINUX_MIB_TCPLOSTRETRANSMIT,
 LINUX_MIB_TCPRENOFAILURES,
 LINUX_MIB_TCPSACKFAILURES,
 LINUX_MIB_TCPLOSSFAILURES,
 LINUX_MIB_TCPFASTRETRANS,
 LINUX_MIB_TCPSLOWSTARTRETRANS,
 LINUX_MIB_TCPTIMEOUTS,
 LINUX_MIB_TCPLOSSPROBES,
 LINUX_MIB_TCPLOSSPROBERECOVERY,
 LINUX_MIB_TCPRENORECOVERYFAIL,
 LINUX_MIB_TCPSACKRECOVERYFAIL,
 LINUX_MIB_TCPRCVCOLLAPSED,
 LINUX_MIB_TCPDSACKOLDSENT,
 LINUX_MIB_TCPDSACKOFOSENT,
 LINUX_MIB_TCPDSACKRECV,
 LINUX_MIB_TCPDSACKOFORECV,
 LINUX_MIB_TCPABORTONDATA,
 LINUX_MIB_TCPABORTONCLOSE,
 LINUX_MIB_TCPABORTONMEMORY,
 LINUX_MIB_TCPABORTONTIMEOUT,
 LINUX_MIB_TCPABORTONLINGER,
 LINUX_MIB_TCPABORTFAILED,
 LINUX_MIB_TCPMEMORYPRESSURES,
 LINUX_MIB_TCPMEMORYPRESSURESCHRONO,
 LINUX_MIB_TCPSACKDISCARD,
 LINUX_MIB_TCPDSACKIGNOREDOLD,
 LINUX_MIB_TCPDSACKIGNOREDNOUNDO,
 LINUX_MIB_TCPSPURIOUSRTOS,
 LINUX_MIB_TCPMD5NOTFOUND,
 LINUX_MIB_TCPMD5UNEXPECTED,
 LINUX_MIB_TCPMD5FAILURE,
 LINUX_MIB_SACKSHIFTED,
 LINUX_MIB_SACKMERGED,
 LINUX_MIB_SACKSHIFTFALLBACK,
 LINUX_MIB_TCPBACKLOGDROP,
 LINUX_MIB_PFMEMALLOCDROP,
 LINUX_MIB_TCPMINTTLDROP,
 LINUX_MIB_TCPDEFERACCEPTDROP,
 LINUX_MIB_IPRPFILTER,
 LINUX_MIB_TCPTIMEWAITOVERFLOW,
 LINUX_MIB_TCPREQQFULLDOCOOKIES,
 LINUX_MIB_TCPREQQFULLDROP,
 LINUX_MIB_TCPRETRANSFAIL,
 LINUX_MIB_TCPRCVCOALESCE,
 LINUX_MIB_TCPOFOQUEUE,
 LINUX_MIB_TCPOFODROP,
 LINUX_MIB_TCPOFOMERGE,
 LINUX_MIB_TCPCHALLENGEACK,
 LINUX_MIB_TCPSYNCHALLENGE,
 LINUX_MIB_TCPFASTOPENACTIVE,
 LINUX_MIB_TCPFASTOPENACTIVEFAIL,
 LINUX_MIB_TCPFASTOPENPASSIVE,
 LINUX_MIB_TCPFASTOPENPASSIVEFAIL,
 LINUX_MIB_TCPFASTOPENLISTENOVERFLOW,
 LINUX_MIB_TCPFASTOPENCOOKIEREQD,
 LINUX_MIB_TCPFASTOPENBLACKHOLE,
 LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES,
 LINUX_MIB_BUSYPOLLRXPACKETS,
 LINUX_MIB_TCPAUTOCORKING,
 LINUX_MIB_TCPFROMZEROWINDOWADV,
 LINUX_MIB_TCPTOZEROWINDOWADV,
 LINUX_MIB_TCPWANTZEROWINDOWADV,
 LINUX_MIB_TCPSYNRETRANS,
 LINUX_MIB_TCPORIGDATASENT,
 LINUX_MIB_TCPHYSTARTTRAINDETECT,
 LINUX_MIB_TCPHYSTARTTRAINCWND,
 LINUX_MIB_TCPHYSTARTDELAYDETECT,
 LINUX_MIB_TCPHYSTARTDELAYCWND,
 LINUX_MIB_TCPACKSKIPPEDSYNRECV,
 LINUX_MIB_TCPACKSKIPPEDPAWS,
 LINUX_MIB_TCPACKSKIPPEDSEQ,
 LINUX_MIB_TCPACKSKIPPEDFINWAIT2,
 LINUX_MIB_TCPACKSKIPPEDTIMEWAIT,
 LINUX_MIB_TCPACKSKIPPEDCHALLENGE,
 LINUX_MIB_TCPWINPROBE,
 LINUX_MIB_TCPKEEPALIVE,
 LINUX_MIB_TCPMTUPFAIL,
 LINUX_MIB_TCPMTUPSUCCESS,
 LINUX_MIB_TCPWQUEUETOOBIG,
 __LINUX_MIB_MAX
};


enum
{
 LINUX_MIB_XFRMNUM = 0,
 LINUX_MIB_XFRMINERROR,
 LINUX_MIB_XFRMINBUFFERERROR,
 LINUX_MIB_XFRMINHDRERROR,
 LINUX_MIB_XFRMINNOSTATES,
 LINUX_MIB_XFRMINSTATEPROTOERROR,
 LINUX_MIB_XFRMINSTATEMODEERROR,
 LINUX_MIB_XFRMINSTATESEQERROR,
 LINUX_MIB_XFRMINSTATEEXPIRED,
 LINUX_MIB_XFRMINSTATEMISMATCH,
 LINUX_MIB_XFRMINSTATEINVALID,
 LINUX_MIB_XFRMINTMPLMISMATCH,
 LINUX_MIB_XFRMINNOPOLS,
 LINUX_MIB_XFRMINPOLBLOCK,
 LINUX_MIB_XFRMINPOLERROR,
 LINUX_MIB_XFRMOUTERROR,
 LINUX_MIB_XFRMOUTBUNDLEGENERROR,
 LINUX_MIB_XFRMOUTBUNDLECHECKERROR,
 LINUX_MIB_XFRMOUTNOSTATES,
 LINUX_MIB_XFRMOUTSTATEPROTOERROR,
 LINUX_MIB_XFRMOUTSTATEMODEERROR,
 LINUX_MIB_XFRMOUTSTATESEQERROR,
 LINUX_MIB_XFRMOUTSTATEEXPIRED,
 LINUX_MIB_XFRMOUTPOLBLOCK,
 LINUX_MIB_XFRMOUTPOLDEAD,
 LINUX_MIB_XFRMOUTPOLERROR,
 LINUX_MIB_XFRMFWDHDRERROR,
 LINUX_MIB_XFRMOUTSTATEINVALID,
 LINUX_MIB_XFRMACQUIREERROR,
 __LINUX_MIB_XFRMMAX
};
# 24 "../include/net/snmp.h" 2
# 34 "../include/net/snmp.h"
struct snmp_mib {
 const char *name;
 int entry;
};
# 52 "../include/net/snmp.h"
# 1 "../include/linux/u64_stats_sync.h" 1
# 65 "../include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_stats_init(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_stats_update_begin_raw(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_stats_update_end_raw(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 53 "../include/net/snmp.h" 2



struct ipstats_mib {

 u64 mibs[__IPSTATS_MIB_MAX];
 struct u64_stats_sync syncp;
};



struct icmp_mib {
 unsigned long mibs[__ICMP_MIB_MAX];
};


struct icmpmsg_mib {
 atomic_long_t mibs[512];
};




struct icmpv6_mib {
 unsigned long mibs[__ICMP6_MIB_MAX];
};

struct icmpv6_mib_device {
 atomic_long_t mibs[__ICMP6_MIB_MAX];
};



struct icmpv6msg_mib {
 atomic_long_t mibs[512];
};

struct icmpv6msg_mib_device {
 atomic_long_t mibs[512];
};




struct tcp_mib {
 unsigned long mibs[__TCP_MIB_MAX];
};



struct udp_mib {
 unsigned long mibs[__UDP_MIB_MAX];
};



struct linux_mib {
 unsigned long mibs[__LINUX_MIB_MAX];
};



struct linux_xfrm_mib {
 unsigned long mibs[__LINUX_MIB_XFRMMAX];
};
# 6 "../include/net/netns/mib.h" 2

struct netns_mib {
 __typeof__(struct tcp_mib) *tcp_statistics;
 __typeof__(struct ipstats_mib) *ip_statistics;
 __typeof__(struct linux_mib) *net_statistics;
 __typeof__(struct udp_mib) *udp_statistics;
 __typeof__(struct udp_mib) *udplite_statistics;
 __typeof__(struct icmp_mib) *icmp_statistics;
 __typeof__(struct icmpmsg_mib) *icmpmsg_statistics;


 struct proc_dir_entry *proc_net_devsnmp6;
 __typeof__(struct udp_mib) *udp_stats_in6;
 __typeof__(struct udp_mib) *udplite_stats_in6;
 __typeof__(struct ipstats_mib) *ipv6_statistics;
 __typeof__(struct icmpv6_mib) *icmpv6_statistics;
 __typeof__(struct icmpv6msg_mib) *icmpv6msg_statistics;


 __typeof__(struct linux_xfrm_mib) *xfrm_statistics;

};
# 17 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/unix.h" 1







struct ctl_table_header;
struct netns_unix {
 int sysctl_max_dgram_qlen;
 struct ctl_table_header *ctl;
};
# 18 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/packet.h" 1
# 11 "../include/net/netns/packet.h"
struct netns_packet {
 struct mutex sklist_lock;
 struct hlist_head sklist;
};
# 19 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/ipv4.h" 1
# 10 "../include/net/netns/ipv4.h"
# 1 "../include/net/inet_frag.h" 1






struct netns_frags {

 long high_thresh;
 long low_thresh;
 int timeout;
 int max_dist;
 struct inet_frags *f;

 struct rhashtable rhashtable __attribute__((__aligned__((1 << 7))));


 atomic_long_t mem __attribute__((__aligned__((1 << 7))));
};
# 28 "../include/net/inet_frag.h"
enum {
 INET_FRAG_FIRST_IN = (1UL << (0)),
 INET_FRAG_LAST_IN = (1UL << (1)),
 INET_FRAG_COMPLETE = (1UL << (2)),
};

struct frag_v4_compare_key {
 __be32 saddr;
 __be32 daddr;
 u32 user;
 u32 vif;
 __be16 id;
 u16 protocol;
};

struct frag_v6_compare_key {
 struct in6_addr saddr;
 struct in6_addr daddr;
 u32 user;
 __be32 id;
 u32 iif;
};
# 71 "../include/net/inet_frag.h"
struct inet_frag_queue {
 struct rhash_head node;
 union {
  struct frag_v4_compare_key v4;
  struct frag_v6_compare_key v6;
 } key;
 struct timer_list timer;
 spinlock_t lock;
 refcount_t refcnt;
 struct sk_buff *fragments;
 struct rb_root rb_fragments;
 struct sk_buff *fragments_tail;
 struct sk_buff *last_run_head;
 ktime_t stamp;
 int len;
 int meat;
 __u8 flags;
 u16 max_size;
 struct netns_frags *net;
 struct callback_head rcu;
};

struct inet_frags {
 unsigned int qsize;

 void (*constructor)(struct inet_frag_queue *q,
            const void *arg);
 void (*destructor)(struct inet_frag_queue *);
 void (*frag_expire)(struct timer_list *t);
 struct kmem_cache *frags_cachep;
 const char *frags_cache_name;
 struct rhashtable_params rhash_params;
};

int inet_frags_init(struct inet_frags *);
void inet_frags_fini(struct inet_frags *);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int inet_frags_init_net(struct netns_frags *nf)
{
 atomic_long_set(&nf->mem, 0);
 return rhashtable_init(&nf->rhashtable, &nf->f->rhash_params);
}
void inet_frags_exit_net(struct netns_frags *nf);

void inet_frag_kill(struct inet_frag_queue *q);
void inet_frag_destroy(struct inet_frag_queue *q);
struct inet_frag_queue *inet_frag_find(struct netns_frags *nf, void *key);


unsigned int inet_frag_rbtree_purge(struct rb_root *root);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void inet_frag_put(struct inet_frag_queue *q)
{
 if (refcount_dec_and_test(&q->refcnt))
  inet_frag_destroy(q);
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) long frag_mem_limit(const struct netns_frags *nf)
{
 return atomic_long_read(&nf->mem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sub_frag_mem_limit(struct netns_frags *nf, long val)
{
 atomic_long_sub(val, &nf->mem);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void add_frag_mem_limit(struct netns_frags *nf, long val)
{
 atomic_long_add(val, &nf->mem);
}
# 154 "../include/net/inet_frag.h"
extern const u8 ip_frag_ecn_table[16];





int inet_frag_queue_insert(struct inet_frag_queue *q, struct sk_buff *skb,
      int offset, int end);
void *inet_frag_reasm_prepare(struct inet_frag_queue *q, struct sk_buff *skb,
         struct sk_buff *parent);
void inet_frag_reasm_finish(struct inet_frag_queue *q, struct sk_buff *head,
       void *reasm_data);
struct sk_buff *inet_frag_pull_head(struct inet_frag_queue *q);
# 11 "../include/net/netns/ipv4.h" 2



struct tcpm_hash_bucket;
struct ctl_table_header;
struct ipv4_devconf;
struct fib_rules_ops;
struct hlist_head;
struct fib_table;
struct sock;
struct local_ports {
 seqlock_t lock;
 int range[2];
 bool warned;
};

struct ping_group_range {
 seqlock_t lock;
 kgid_t range[2];
};

struct inet_hashinfo;

struct inet_timewait_death_row {
 atomic_t tw_count;

 struct inet_hashinfo *hashinfo __attribute__((__aligned__((1 << 7))));
 int sysctl_max_tw_buckets;
};

struct netns_ipv4 {

 struct ctl_table_header *forw_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *ipv4_hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *xfrm4_hdr;

 struct ipv4_devconf *devconf_all;
 struct ipv4_devconf *devconf_dflt;

 struct fib_rules_ops *rules_ops;
 bool fib_has_custom_rules;
 struct fib_table *fib_main;
 struct fib_table *fib_default;




 struct hlist_head *fib_table_hash;
 bool fib_offload_disabled;
 struct sock *fibnl;

 struct sock * *icmp_sk;
 struct sock *mc_autojoin_sk;

 struct inet_peer_base *peers;
 struct sock * *tcp_sk;
 struct netns_frags frags;

 struct xt_table *iptable_filter;
 struct xt_table *iptable_mangle;
 struct xt_table *iptable_raw;
 struct xt_table *arptable_filter;

 struct xt_table *iptable_security;

 struct xt_table *nat_table;


 int sysctl_icmp_echo_ignore_all;
 int sysctl_icmp_echo_ignore_broadcasts;
 int sysctl_icmp_ignore_bogus_error_responses;
 int sysctl_icmp_ratelimit;
 int sysctl_icmp_ratemask;
 int sysctl_icmp_errors_use_inbound_ifaddr;

 struct local_ports ip_local_ports;

 int sysctl_tcp_ecn;
 int sysctl_tcp_ecn_fallback;

 int sysctl_ip_default_ttl;
 int sysctl_ip_no_pmtu_disc;
 int sysctl_ip_fwd_use_pmtu;
 int sysctl_ip_nonlocal_bind;

 int sysctl_ip_dynaddr;
 int sysctl_ip_early_demux;
 int sysctl_tcp_early_demux;
 int sysctl_udp_early_demux;

 int sysctl_fwmark_reflect;
 int sysctl_tcp_fwmark_accept;



 int sysctl_tcp_mtu_probing;
 int sysctl_tcp_base_mss;
 int sysctl_tcp_min_snd_mss;
 int sysctl_tcp_probe_threshold;
 u32 sysctl_tcp_probe_interval;

 int sysctl_tcp_keepalive_time;
 int sysctl_tcp_keepalive_probes;
 int sysctl_tcp_keepalive_intvl;

 int sysctl_tcp_syn_retries;
 int sysctl_tcp_synack_retries;
 int sysctl_tcp_syncookies;
 int sysctl_tcp_reordering;
 int sysctl_tcp_retries1;
 int sysctl_tcp_retries2;
 int sysctl_tcp_orphan_retries;
 int sysctl_tcp_fin_timeout;
 unsigned int sysctl_tcp_notsent_lowat;
 int sysctl_tcp_tw_reuse;
 int sysctl_tcp_sack;
 int sysctl_tcp_window_scaling;
 int sysctl_tcp_timestamps;
 struct inet_timewait_death_row tcp_death_row;
 int sysctl_max_syn_backlog;


 int sysctl_tcp_random_timestamp;






 int sysctl_igmp_max_memberships;
 int sysctl_igmp_max_msf;
 int sysctl_igmp_llm_reports;
 int sysctl_igmp_qrv;

 struct ping_group_range ping_group_range;

 atomic_t dev_addr_genid;


 unsigned long *sysctl_local_reserved_ports;
 int sysctl_ip_prot_sock;
# 169 "../include/net/netns/ipv4.h"
 struct fib_notifier_ops *notifier_ops;
 unsigned int fib_seq;

 atomic_t rt_genid;
 siphash_key_t ip_id_key;
};
# 20 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/ipv6.h" 1
# 10 "../include/net/netns/ipv6.h"
# 1 "../include/net/dst_ops.h" 1







struct dst_entry;
struct kmem_cachep;
struct net_device;
struct sk_buff;
struct sock;
struct net;

struct dst_ops {
 unsigned short family;
 unsigned int gc_thresh;

 int (*gc)(struct dst_ops *ops);
 struct dst_entry * (*check)(struct dst_entry *, __u32 cookie);
 unsigned int (*default_advmss)(const struct dst_entry *);
 unsigned int (*mtu)(const struct dst_entry *);
 u32 * (*cow_metrics)(struct dst_entry *, unsigned long);
 void (*destroy)(struct dst_entry *);
 void (*ifdown)(struct dst_entry *,
       struct net_device *dev, int how);
 struct dst_entry * (*negative_advice)(struct dst_entry *);
 void (*link_failure)(struct sk_buff *);
 void (*update_pmtu)(struct dst_entry *dst, struct sock *sk,
            struct sk_buff *skb, u32 mtu,
            bool confirm_neigh);
 void (*redirect)(struct dst_entry *dst, struct sock *sk,
         struct sk_buff *skb);
 int (*local_out)(struct net *net, struct sock *sk, struct sk_buff *skb);
 struct neighbour * (*neigh_lookup)(const struct dst_entry *dst,
      struct sk_buff *skb,
      const void *daddr);
 void (*confirm_neigh)(const struct dst_entry *dst,
       const void *daddr);

 struct kmem_cache *kmem_cachep;

 struct percpu_counter pcpuc_entries __attribute__((__aligned__((1 << 7))));
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dst_entries_get_fast(struct dst_ops *dst)
{
 return percpu_counter_read_positive(&dst->pcpuc_entries);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dst_entries_get_slow(struct dst_ops *dst)
{
 return percpu_counter_sum_positive(&dst->pcpuc_entries);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dst_entries_add(struct dst_ops *dst, int val)
{
 percpu_counter_add(&dst->pcpuc_entries, val);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dst_entries_init(struct dst_ops *dst)
{
 return ({ static struct lock_class_key __key; __percpu_counter_init(&dst->pcpuc_entries, 0, ((( gfp_t)(0x400000u|0x1000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), &__key); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dst_entries_destroy(struct dst_ops *dst)
{
 percpu_counter_destroy(&dst->pcpuc_entries);
}
# 11 "../include/net/netns/ipv6.h" 2

struct ctl_table_header;

struct netns_sysctl_ipv6 {

 struct ctl_table_header *hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *icmp_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *xfrm6_hdr;

 int bindv6only;
 int flush_delay;
 int ip6_rt_max_size;
 int ip6_rt_gc_min_interval;
 int ip6_rt_gc_timeout;
 int ip6_rt_gc_interval;
 int ip6_rt_gc_elasticity;
 int ip6_rt_mtu_expires;
 int ip6_rt_min_advmss;
 int flowlabel_consistency;
 int auto_flowlabels;
 int icmpv6_time;
 int anycast_src_echo_reply;
 int ip_nonlocal_bind;
 int fwmark_reflect;
 int idgen_retries;
 int idgen_delay;
 int flowlabel_state_ranges;
 int flowlabel_reflect;
};

struct netns_ipv6 {
 struct netns_sysctl_ipv6 sysctl;
 struct ipv6_devconf *devconf_all;
 struct ipv6_devconf *devconf_dflt;
 struct inet_peer_base *peers;
 struct netns_frags frags;

 struct xt_table *ip6table_filter;
 struct xt_table *ip6table_mangle;
 struct xt_table *ip6table_raw;

 struct xt_table *ip6table_security;

 struct xt_table *ip6table_nat;

 struct rt6_info *ip6_null_entry;
 struct rt6_statistics *rt6_stats;
 struct timer_list ip6_fib_timer;
 struct hlist_head *fib_table_hash;
 struct fib6_table *fib6_main_tbl;
 struct list_head fib6_walkers;
 struct dst_ops ip6_dst_ops;
 rwlock_t fib6_walker_lock;
 spinlock_t fib6_gc_lock;
 unsigned int ip6_rt_gc_expire;
 unsigned long ip6_rt_last_gc;

 bool fib6_has_custom_rules;
 struct rt6_info *ip6_prohibit_entry;
 struct rt6_info *ip6_blk_hole_entry;
 struct fib6_table *fib6_local_tbl;
 struct fib_rules_ops *fib6_rules_ops;

 struct sock **icmp_sk;
 struct sock *ndisc_sk;
 struct sock *tcp_sk;
 struct sock *igmp_sk;
 struct sock *mc_autojoin_sk;
# 89 "../include/net/netns/ipv6.h"
 atomic_t dev_addr_genid;
 atomic_t fib6_sernum;
 struct seg6_pernet_data *seg6_data;
 struct fib_notifier_ops *notifier_ops;
};


struct netns_nf_frag {
 struct netns_frags frags;
};
# 21 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/ieee802154_6lowpan.h" 1
# 11 "../include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {

 struct ctl_table_header *frags_hdr;

};

struct netns_ieee802154_lowpan {
 struct netns_sysctl_lowpan sysctl;
 struct netns_frags frags;
};
# 22 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/sctp.h" 1




struct sock;
struct proc_dir_entry;
struct sctp_mib;
struct ctl_table_header;

struct netns_sctp {
 __typeof__(struct sctp_mib) *sctp_statistics;


 struct proc_dir_entry *proc_net_sctp;


 struct ctl_table_header *sysctl_header;





 struct sock *ctl_sock;







 struct list_head local_addr_list;
 struct list_head addr_waitq;
 struct timer_list addr_wq_timer;
 struct list_head auto_asconf_splist;

 spinlock_t addr_wq_lock;


 spinlock_t local_addr_lock;
# 51 "../include/net/netns/sctp.h"
 unsigned int rto_initial;
 unsigned int rto_min;
 unsigned int rto_max;




 int rto_alpha;
 int rto_beta;


 int max_burst;


 int cookie_preserve_enable;


 char *sctp_hmac_alg;


 unsigned int valid_cookie_life;


 unsigned int sack_timeout;


 unsigned int hb_interval;





 int max_retrans_association;
 int max_retrans_path;
 int max_retrans_init;




 int pf_retrans;






 int pf_enable;






 int sndbuf_policy;






 int rcvbuf_policy;

 int default_auto_asconf;


 int addip_enable;
 int addip_noauth;


 int prsctp_enable;


 int reconf_enable;


 int auth_enable;
# 135 "../include/net/netns/sctp.h"
 int scope_policy;




 int rwnd_upd_shift;


 unsigned long max_autoclose;
};
# 23 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/dccp.h" 1




struct sock;

struct netns_dccp {
 struct sock *v4_ctl_sk;
 struct sock *v6_ctl_sk;
};
# 24 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/netfilter.h" 1




# 1 "../include/linux/netfilter_defs.h" 1




# 1 "../include/uapi/linux/netfilter.h" 1






# 1 "../include/linux/in.h" 1
# 23 "../include/linux/in.h"
# 1 "../include/uapi/linux/in.h" 1
# 28 "../include/uapi/linux/in.h"
enum {
  IPPROTO_IP = 0,

  IPPROTO_ICMP = 1,

  IPPROTO_IGMP = 2,

  IPPROTO_IPIP = 4,

  IPPROTO_TCP = 6,

  IPPROTO_EGP = 8,

  IPPROTO_PUP = 12,

  IPPROTO_UDP = 17,

  IPPROTO_IDP = 22,

  IPPROTO_TP = 29,

  IPPROTO_DCCP = 33,

  IPPROTO_IPV6 = 41,

  IPPROTO_RSVP = 46,

  IPPROTO_GRE = 47,

  IPPROTO_ESP = 50,

  IPPROTO_AH = 51,

  IPPROTO_MTP = 92,

  IPPROTO_BEETPH = 94,

  IPPROTO_ENCAP = 98,

  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,

  IPPROTO_SCTP = 132,

  IPPROTO_UDPLITE = 136,

  IPPROTO_MPLS = 137,

  IPPROTO_RAW = 255,

  IPPROTO_MAX
};




struct in_addr {
 __be32 s_addr;
};
# 168 "../include/uapi/linux/in.h"
struct ip_mreq {
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;
};

struct ip_mreqn {
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;
};

struct ip_mreq_source {
 __be32 imr_multiaddr;
 __be32 imr_interface;
 __be32 imr_sourceaddr;
};

struct ip_msfilter {
 __be32 imsf_multiaddr;
 __be32 imsf_interface;
 __u32 imsf_fmode;
 __u32 imsf_numsrc;
 __be32 imsf_slist[1];
};





struct group_req {
 __u32 gr_interface;
 struct __kernel_sockaddr_storage gr_group;
};

struct group_source_req {
 __u32 gsr_interface;
 struct __kernel_sockaddr_storage gsr_group;
 struct __kernel_sockaddr_storage gsr_source;
};

struct group_filter {
 __u32 gf_interface;
 struct __kernel_sockaddr_storage gf_group;
 __u32 gf_fmode;
 __u32 gf_numsrc;
 struct __kernel_sockaddr_storage gf_slist[1];
};







struct in_pktinfo {
 int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;
};





struct sockaddr_in {
  __kernel_sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;


  unsigned char __pad[16 - sizeof(short int) -
   sizeof(unsigned short int) - sizeof(struct in_addr)];
};
# 24 "../include/linux/in.h" 2

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int proto_ports_offset(int proto)
{
 switch (proto) {
 case IPPROTO_TCP:
 case IPPROTO_UDP:
 case IPPROTO_DCCP:
 case IPPROTO_ESP:
 case IPPROTO_SCTP:
 case IPPROTO_UDPLITE:
  return 0;
 case IPPROTO_AH:
  return 4;
 default:
  return -22;
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_loopback(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x7f000000))) ? ((__u32)( (((__u32)((0x7f000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x7f000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x7f000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x7f000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x7f000000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xf0000000))) ? ((__u32)( (((__u32)((0xf0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xf0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xf0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xf0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xf0000000))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_local_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_lbcast(__be32 addr)
{

 return addr == (( __be32)(__builtin_constant_p((__u32)((((unsigned long int) 0xffffffff)))) ? ((__u32)( (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x000000ffUL) << 24) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0xff000000UL) >> 24))) : __fswab32((((unsigned long int) 0xffffffff)))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_zeronet(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x00000000))) ? ((__u32)( (((__u32)((0x00000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x00000000))));
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_private_10(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x0a000000))) ? ((__u32)( (((__u32)((0x0a000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0a000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0a000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0a000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0a000000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_private_172(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfff00000))) ? ((__u32)( (((__u32)((0xfff00000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfff00000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfff00000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfff00000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfff00000))))) == (( __be32)(__builtin_constant_p((__u32)((0xac100000))) ? ((__u32)( (((__u32)((0xac100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xac100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xac100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xac100000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xac100000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_private_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0a80000))) ? ((__u32)( (((__u32)((0xc0a80000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0a80000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0a80000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0a80000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0a80000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_linklocal_169(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xa9fe0000))) ? ((__u32)( (((__u32)((0xa9fe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xa9fe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xa9fe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xa9fe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xa9fe0000))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_anycast_6to4(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0586300))) ? ((__u32)( (((__u32)((0xc0586300)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0586300)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0586300)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0586300)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0586300))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_test_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0000200))) ? ((__u32)( (((__u32)((0xc0000200)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0000200)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0000200)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0000200)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0000200))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ipv4_is_test_198(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfffe0000))) ? ((__u32)( (((__u32)((0xfffe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfffe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfffe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfffe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfffe0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc6120000))) ? ((__u32)( (((__u32)((0xc6120000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc6120000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc6120000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc6120000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc6120000))));
}
# 8 "../include/uapi/linux/netfilter.h" 2
# 47 "../include/uapi/linux/netfilter.h"
enum nf_inet_hooks {
 NF_INET_PRE_ROUTING,
 NF_INET_LOCAL_IN,
 NF_INET_FORWARD,
 NF_INET_LOCAL_OUT,
 NF_INET_POST_ROUTING,
 NF_INET_NUMHOOKS
};

enum nf_dev_hooks {
 NF_NETDEV_INGRESS,
 NF_NETDEV_NUMHOOKS
};

enum {
 NFPROTO_UNSPEC = 0,
 NFPROTO_INET = 1,
 NFPROTO_IPV4 = 2,
 NFPROTO_ARP = 3,
 NFPROTO_NETDEV = 5,
 NFPROTO_BRIDGE = 7,
 NFPROTO_IPV6 = 10,
 NFPROTO_DECNET = 12,
 NFPROTO_NUMPROTO,
};

union nf_inet_addr {
 __u32 all[4];
 __be32 ip;
 __be32 ip6[4];
 struct in_addr in;
 struct in6_addr in6;
};
# 6 "../include/linux/netfilter_defs.h" 2
# 6 "../include/net/netns/netfilter.h" 2

struct proc_dir_entry;
struct nf_logger;
struct nf_queue_handler;

struct netns_nf {

 struct proc_dir_entry *proc_netfilter;

 const struct nf_queue_handler *queue_handler;
 const struct nf_logger *nf_loggers[NFPROTO_NUMPROTO];

 struct ctl_table_header *nf_log_dir_header;

 struct nf_hook_entries *hooks[NFPROTO_NUMPROTO][8];

 bool defrag_ipv4;


 bool defrag_ipv6;

};
# 25 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/x_tables.h" 1







struct ebt_table;

struct netns_xt {
 struct list_head tables[NFPROTO_NUMPROTO];
 bool notrack_deprecated_warning;
 bool clusterip_deprecated_warning;


 struct ebt_table *broute_table;
 struct ebt_table *frame_filter;
 struct ebt_table *frame_nat;

};
# 26 "../include/net/net_namespace.h" 2

# 1 "../include/net/netns/conntrack.h" 1








# 1 "../include/linux/netfilter/nf_conntrack_tcp.h" 1




# 1 "../include/uapi/linux/netfilter/nf_conntrack_tcp.h" 1








enum tcp_conntrack {
 TCP_CONNTRACK_NONE,
 TCP_CONNTRACK_SYN_SENT,
 TCP_CONNTRACK_SYN_RECV,
 TCP_CONNTRACK_ESTABLISHED,
 TCP_CONNTRACK_FIN_WAIT,
 TCP_CONNTRACK_CLOSE_WAIT,
 TCP_CONNTRACK_LAST_ACK,
 TCP_CONNTRACK_TIME_WAIT,
 TCP_CONNTRACK_CLOSE,
 TCP_CONNTRACK_LISTEN,

 TCP_CONNTRACK_MAX,
 TCP_CONNTRACK_IGNORE,
 TCP_CONNTRACK_RETRANS,
 TCP_CONNTRACK_UNACK,
 TCP_CONNTRACK_TIMEOUT_MAX
};
# 49 "../include/uapi/linux/netfilter/nf_conntrack_tcp.h"
struct nf_ct_tcp_flags {
 __u8 flags;
 __u8 mask;
};
# 6 "../include/linux/netfilter/nf_conntrack_tcp.h" 2


struct ip_ct_tcp_state {
 u_int32_t td_end;
 u_int32_t td_maxend;
 u_int32_t td_maxwin;
 u_int32_t td_maxack;
 u_int8_t td_scale;
 u_int8_t flags;
};

struct ip_ct_tcp {
 struct ip_ct_tcp_state seen[2];
 u_int8_t state;

 u_int8_t last_dir;
 u_int8_t retrans;
 u_int8_t last_index;
 u_int32_t last_seq;
 u_int32_t last_ack;
 u_int32_t last_end;
 u_int16_t last_win;

 u_int8_t last_wscale;
 u_int8_t last_flags;
};
# 10 "../include/net/netns/conntrack.h" 2

# 1 "../include/linux/netfilter/nf_conntrack_dccp.h" 1





enum ct_dccp_states {
 CT_DCCP_NONE,
 CT_DCCP_REQUEST,
 CT_DCCP_RESPOND,
 CT_DCCP_PARTOPEN,
 CT_DCCP_OPEN,
 CT_DCCP_CLOSEREQ,
 CT_DCCP_CLOSING,
 CT_DCCP_TIMEWAIT,
 CT_DCCP_IGNORE,
 CT_DCCP_INVALID,
 __CT_DCCP_MAX
};


enum ct_dccp_roles {
 CT_DCCP_ROLE_CLIENT,
 CT_DCCP_ROLE_SERVER,
 __CT_DCCP_ROLE_MAX
};



# 1 "../include/uapi/linux/netfilter/nf_conntrack_tuple_common.h" 1








# 1 "../include/linux/netfilter/nf_conntrack_common.h" 1




# 1 "../include/uapi/linux/netfilter/nf_conntrack_common.h" 1






enum ip_conntrack_info {

 IP_CT_ESTABLISHED,



 IP_CT_RELATED,



 IP_CT_NEW,


 IP_CT_IS_REPLY,

 IP_CT_ESTABLISHED_REPLY = IP_CT_ESTABLISHED + IP_CT_IS_REPLY,
 IP_CT_RELATED_REPLY = IP_CT_RELATED + IP_CT_IS_REPLY,



 IP_CT_NUMBER,





 IP_CT_UNTRACKED = 7,

};






enum ip_conntrack_status {

 IPS_EXPECTED_BIT = 0,
 IPS_EXPECTED = (1 << IPS_EXPECTED_BIT),


 IPS_SEEN_REPLY_BIT = 1,
 IPS_SEEN_REPLY = (1 << IPS_SEEN_REPLY_BIT),


 IPS_ASSURED_BIT = 2,
 IPS_ASSURED = (1 << IPS_ASSURED_BIT),


 IPS_CONFIRMED_BIT = 3,
 IPS_CONFIRMED = (1 << IPS_CONFIRMED_BIT),


 IPS_SRC_NAT_BIT = 4,
 IPS_SRC_NAT = (1 << IPS_SRC_NAT_BIT),


 IPS_DST_NAT_BIT = 5,
 IPS_DST_NAT = (1 << IPS_DST_NAT_BIT),


 IPS_NAT_MASK = (IPS_DST_NAT | IPS_SRC_NAT),


 IPS_SEQ_ADJUST_BIT = 6,
 IPS_SEQ_ADJUST = (1 << IPS_SEQ_ADJUST_BIT),


 IPS_SRC_NAT_DONE_BIT = 7,
 IPS_SRC_NAT_DONE = (1 << IPS_SRC_NAT_DONE_BIT),

 IPS_DST_NAT_DONE_BIT = 8,
 IPS_DST_NAT_DONE = (1 << IPS_DST_NAT_DONE_BIT),


 IPS_NAT_DONE_MASK = (IPS_DST_NAT_DONE | IPS_SRC_NAT_DONE),


 IPS_DYING_BIT = 9,
 IPS_DYING = (1 << IPS_DYING_BIT),


 IPS_FIXED_TIMEOUT_BIT = 10,
 IPS_FIXED_TIMEOUT = (1 << IPS_FIXED_TIMEOUT_BIT),


 IPS_TEMPLATE_BIT = 11,
 IPS_TEMPLATE = (1 << IPS_TEMPLATE_BIT),


 IPS_UNTRACKED_BIT = 12,
 IPS_UNTRACKED = (1 << IPS_UNTRACKED_BIT),


 IPS_HELPER_BIT = 13,
 IPS_HELPER = (1 << IPS_HELPER_BIT),




 IPS_UNCHANGEABLE_MASK = (IPS_NAT_DONE_MASK | IPS_NAT_MASK |
     IPS_EXPECTED | IPS_CONFIRMED | IPS_DYING |
     IPS_SEQ_ADJUST | IPS_TEMPLATE),

 __IPS_MAX_BIT = 14,
};


enum ip_conntrack_events {
 IPCT_NEW,
 IPCT_RELATED,
 IPCT_DESTROY,
 IPCT_REPLY,
 IPCT_ASSURED,
 IPCT_PROTOINFO,
 IPCT_HELPER,
 IPCT_MARK,
 IPCT_SEQADJ,
 IPCT_NATSEQADJ = IPCT_SEQADJ,
 IPCT_SECMARK,
 IPCT_LABEL,
 IPCT_COUNTER,

 __IPCT_MAX

};



enum ip_conntrack_expect_events {
 IPEXP_NEW,
 IPEXP_DESTROY,
};
# 6 "../include/linux/netfilter/nf_conntrack_common.h" 2

struct ip_conntrack_stat {
 unsigned int found;
 unsigned int invalid;
 unsigned int ignore;
 unsigned int insert;
 unsigned int insert_failed;
 unsigned int drop;
 unsigned int early_drop;
 unsigned int error;
 unsigned int expect_new;
 unsigned int expect_create;
 unsigned int expect_delete;
 unsigned int search_restart;
};


void need_conntrack(void);
# 10 "../include/uapi/linux/netfilter/nf_conntrack_tuple_common.h" 2

enum ip_conntrack_dir {
 IP_CT_DIR_ORIGINAL,
 IP_CT_DIR_REPLY,
 IP_CT_DIR_MAX
};




union nf_conntrack_man_proto {

 __be16 all;

 struct {
  __be16 port;
 } tcp;
 struct {
  __be16 port;
 } udp;
 struct {
  __be16 id;
 } icmp;
 struct {
  __be16 port;
 } dccp;
 struct {
  __be16 port;
 } sctp;
 struct {
  __be16 key;
 } gre;
};
# 30 "../include/linux/netfilter/nf_conntrack_dccp.h" 2

struct nf_ct_dccp {
 u_int8_t role[IP_CT_DIR_MAX];
 u_int8_t state;
 u_int8_t last_pkt;
 u_int8_t last_dir;
 u_int64_t handshake_seq;
};
# 12 "../include/net/netns/conntrack.h" 2


# 1 "../include/linux/netfilter/nf_conntrack_sctp.h" 1





# 1 "../include/uapi/linux/netfilter/nf_conntrack_sctp.h" 1







enum sctp_conntrack {
 SCTP_CONNTRACK_NONE,
 SCTP_CONNTRACK_CLOSED,
 SCTP_CONNTRACK_COOKIE_WAIT,
 SCTP_CONNTRACK_COOKIE_ECHOED,
 SCTP_CONNTRACK_ESTABLISHED,
 SCTP_CONNTRACK_SHUTDOWN_SENT,
 SCTP_CONNTRACK_SHUTDOWN_RECD,
 SCTP_CONNTRACK_SHUTDOWN_ACK_SENT,
 SCTP_CONNTRACK_HEARTBEAT_SENT,
 SCTP_CONNTRACK_HEARTBEAT_ACKED,
 SCTP_CONNTRACK_MAX
};
# 7 "../include/linux/netfilter/nf_conntrack_sctp.h" 2

struct ip_ct_sctp {
 enum sctp_conntrack state;

 __be32 vtag[IP_CT_DIR_MAX];
};
# 15 "../include/net/netns/conntrack.h" 2



struct ctl_table_header;
struct nf_conntrack_ecache;

struct nf_proto_net {

 struct ctl_table_header *ctl_table_header;
 struct ctl_table *ctl_table;

 unsigned int users;
};

struct nf_generic_net {
 struct nf_proto_net pn;
 unsigned int timeout;
};

struct nf_tcp_net {
 struct nf_proto_net pn;
 unsigned int timeouts[TCP_CONNTRACK_TIMEOUT_MAX];
 unsigned int tcp_loose;
 unsigned int tcp_be_liberal;
 unsigned int tcp_max_retrans;
};

enum udp_conntrack {
 UDP_CT_UNREPLIED,
 UDP_CT_REPLIED,
 UDP_CT_MAX
};

struct nf_udp_net {
 struct nf_proto_net pn;
 unsigned int timeouts[UDP_CT_MAX];
};

struct nf_icmp_net {
 struct nf_proto_net pn;
 unsigned int timeout;
};


struct nf_dccp_net {
 struct nf_proto_net pn;
 int dccp_loose;
 unsigned int dccp_timeout[(__CT_DCCP_MAX - 1) + 1];
};



struct nf_sctp_net {
 struct nf_proto_net pn;
 unsigned int timeouts[SCTP_CONNTRACK_MAX];
};


struct nf_ip_net {
 struct nf_generic_net generic;
 struct nf_tcp_net tcp;
 struct nf_udp_net udp;
 struct nf_icmp_net icmp;
 struct nf_icmp_net icmpv6;

 struct nf_dccp_net dccp;


 struct nf_sctp_net sctp;

};

struct ct_pcpu {
 spinlock_t lock;
 struct hlist_nulls_head unconfirmed;
 struct hlist_nulls_head dying;
};

struct netns_ct {
 atomic_t count;
 unsigned int expect_count;

 struct delayed_work ecache_dwork;
 bool ecache_dwork_pending;


 struct ctl_table_header *sysctl_header;
 struct ctl_table_header *acct_sysctl_header;
 struct ctl_table_header *tstamp_sysctl_header;
 struct ctl_table_header *event_sysctl_header;
 struct ctl_table_header *helper_sysctl_header;

 unsigned int sysctl_log_invalid;
 int sysctl_events;
 int sysctl_acct;
 int sysctl_auto_assign_helper;
 bool auto_assign_helper_warned;
 int sysctl_tstamp;
 int sysctl_checksum;

 struct ct_pcpu *pcpu_lists;
 struct ip_conntrack_stat *stat;
 struct nf_ct_event_notifier *nf_conntrack_event_cb;
 struct nf_exp_event_notifier *nf_expect_event_cb;
 struct nf_ip_net nf_ct_proto;



};
# 28 "../include/net/net_namespace.h" 2

# 1 "../include/net/netns/nftables.h" 1






struct nft_af_info;

struct netns_nftables {
 struct list_head af_info;
 struct list_head commit_list;
 struct nft_af_info *ipv4;
 struct nft_af_info *ipv6;
 struct nft_af_info *inet;
 struct nft_af_info *arp;
 struct nft_af_info *bridge;
 struct nft_af_info *netdev;
 unsigned int base_seq;
 u8 gencursor;
};
# 30 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/xfrm.h" 1







# 1 "../include/uapi/linux/xfrm.h" 1
# 15 "../include/uapi/linux/xfrm.h"
typedef union {
 __be32 a4;
 __be32 a6[4];
 struct in6_addr in6;
} xfrm_address_t;





struct xfrm_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u8 proto;
};

struct xfrm_sec_ctx {
 __u8 ctx_doi;
 __u8 ctx_alg;
 __u16 ctx_len;
 __u32 ctx_sid;
 char ctx_str[0];
};
# 49 "../include/uapi/linux/xfrm.h"
struct xfrm_selector {
 xfrm_address_t daddr;
 xfrm_address_t saddr;
 __be16 dport;
 __be16 dport_mask;
 __be16 sport;
 __be16 sport_mask;
 __u16 family;
 __u8 prefixlen_d;
 __u8 prefixlen_s;
 __u8 proto;
 int ifindex;
 __kernel_uid32_t user;
};



struct xfrm_lifetime_cfg {
 __u64 soft_byte_limit;
 __u64 hard_byte_limit;
 __u64 soft_packet_limit;
 __u64 hard_packet_limit;
 __u64 soft_add_expires_seconds;
 __u64 hard_add_expires_seconds;
 __u64 soft_use_expires_seconds;
 __u64 hard_use_expires_seconds;
};

struct xfrm_lifetime_cur {
 __u64 bytes;
 __u64 packets;
 __u64 add_time;
 __u64 use_time;
};

struct xfrm_replay_state {
 __u32 oseq;
 __u32 seq;
 __u32 bitmap;
};



struct xfrm_replay_state_esn {
 unsigned int bmp_len;
 __u32 oseq;
 __u32 seq;
 __u32 oseq_hi;
 __u32 seq_hi;
 __u32 replay_window;
 __u32 bmp[0];
};

struct xfrm_algo {
 char alg_name[64];
 unsigned int alg_key_len;
 char alg_key[0];
};

struct xfrm_algo_auth {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_trunc_len;
 char alg_key[0];
};

struct xfrm_algo_aead {
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_icv_len;
 char alg_key[0];
};

struct xfrm_stats {
 __u32 replay_window;
 __u32 replay;
 __u32 integrity_failed;
};

enum {
 XFRM_POLICY_TYPE_MAIN = 0,
 XFRM_POLICY_TYPE_SUB = 1,
 XFRM_POLICY_TYPE_MAX = 2,
 XFRM_POLICY_TYPE_ANY = 255
};

enum {
 XFRM_POLICY_IN = 0,
 XFRM_POLICY_OUT = 1,
 XFRM_POLICY_FWD = 2,
 XFRM_POLICY_MASK = 3,
 XFRM_POLICY_MAX = 3
};

enum {
 XFRM_SHARE_ANY,
 XFRM_SHARE_SESSION,
 XFRM_SHARE_USER,
 XFRM_SHARE_UNIQUE
};
# 158 "../include/uapi/linux/xfrm.h"
enum {
 XFRM_MSG_BASE = 0x10,

 XFRM_MSG_NEWSA = 0x10,

 XFRM_MSG_DELSA,

 XFRM_MSG_GETSA,


 XFRM_MSG_NEWPOLICY,

 XFRM_MSG_DELPOLICY,

 XFRM_MSG_GETPOLICY,


 XFRM_MSG_ALLOCSPI,

 XFRM_MSG_ACQUIRE,

 XFRM_MSG_EXPIRE,


 XFRM_MSG_UPDPOLICY,

 XFRM_MSG_UPDSA,


 XFRM_MSG_POLEXPIRE,


 XFRM_MSG_FLUSHSA,

 XFRM_MSG_FLUSHPOLICY,


 XFRM_MSG_NEWAE,

 XFRM_MSG_GETAE,


 XFRM_MSG_REPORT,


 XFRM_MSG_MIGRATE,


 XFRM_MSG_NEWSADINFO,

 XFRM_MSG_GETSADINFO,


 XFRM_MSG_NEWSPDINFO,

 XFRM_MSG_GETSPDINFO,


 XFRM_MSG_MAPPING,

 __XFRM_MSG_MAX
};
# 228 "../include/uapi/linux/xfrm.h"
struct xfrm_user_sec_ctx {
 __u16 len;
 __u16 exttype;
 __u8 ctx_alg;
 __u8 ctx_doi;
 __u16 ctx_len;
};

struct xfrm_user_tmpl {
 struct xfrm_id id;
 __u16 family;
 xfrm_address_t saddr;
 __u32 reqid;
 __u8 mode;
 __u8 share;
 __u8 optional;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
};

struct xfrm_encap_tmpl {
 __u16 encap_type;
 __be16 encap_sport;
 __be16 encap_dport;
 xfrm_address_t encap_oa;
};


enum xfrm_ae_ftype_t {
 XFRM_AE_UNSPEC,
 XFRM_AE_RTHR=1,
 XFRM_AE_RVAL=2,
 XFRM_AE_LVAL=4,
 XFRM_AE_ETHR=8,
 XFRM_AE_CR=16,
 XFRM_AE_CE=32,
 XFRM_AE_CU=64,
 __XFRM_AE_MAX


};

struct xfrm_userpolicy_type {
 __u8 type;
 __u16 reserved1;
 __u8 reserved2;
};


enum xfrm_attr_type_t {
 XFRMA_UNSPEC,
 XFRMA_ALG_AUTH,
 XFRMA_ALG_CRYPT,
 XFRMA_ALG_COMP,
 XFRMA_ENCAP,
 XFRMA_TMPL,
 XFRMA_SA,
 XFRMA_POLICY,
 XFRMA_SEC_CTX,
 XFRMA_LTIME_VAL,
 XFRMA_REPLAY_VAL,
 XFRMA_REPLAY_THRESH,
 XFRMA_ETIMER_THRESH,
 XFRMA_SRCADDR,
 XFRMA_COADDR,
 XFRMA_LASTUSED,
 XFRMA_POLICY_TYPE,
 XFRMA_MIGRATE,
 XFRMA_ALG_AEAD,
 XFRMA_KMADDRESS,
 XFRMA_ALG_AUTH_TRUNC,
 XFRMA_MARK,
 XFRMA_TFCPAD,
 XFRMA_REPLAY_ESN_VAL,
 XFRMA_SA_EXTRA_FLAGS,
 XFRMA_PROTO,
 XFRMA_ADDRESS_FILTER,
 XFRMA_PAD,
 XFRMA_OFFLOAD_DEV,
 XFRMA_SET_MARK,
 XFRMA_SET_MARK_MASK,
 XFRMA_IF_ID,
 __XFRMA_MAX



};

struct xfrm_mark {
 __u32 v;
 __u32 m;
};

enum xfrm_sadattr_type_t {
 XFRMA_SAD_UNSPEC,
 XFRMA_SAD_CNT,
 XFRMA_SAD_HINFO,
 __XFRMA_SAD_MAX


};

struct xfrmu_sadhinfo {
 __u32 sadhcnt;
 __u32 sadhmcnt;
};

enum xfrm_spdattr_type_t {
 XFRMA_SPD_UNSPEC,
 XFRMA_SPD_INFO,
 XFRMA_SPD_HINFO,
 XFRMA_SPD_IPV4_HTHRESH,
 XFRMA_SPD_IPV6_HTHRESH,
 __XFRMA_SPD_MAX


};

struct xfrmu_spdinfo {
 __u32 incnt;
 __u32 outcnt;
 __u32 fwdcnt;
 __u32 inscnt;
 __u32 outscnt;
 __u32 fwdscnt;
};

struct xfrmu_spdhinfo {
 __u32 spdhcnt;
 __u32 spdhmcnt;
};

struct xfrmu_spdhthresh {
 __u8 lbits;
 __u8 rbits;
};

struct xfrm_usersa_info {
 struct xfrm_selector sel;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 struct xfrm_stats stats;
 __u32 seq;
 __u32 reqid;
 __u16 family;
 __u8 mode;
 __u8 replay_window;
 __u8 flags;
# 387 "../include/uapi/linux/xfrm.h"
};



struct xfrm_usersa_id {
 xfrm_address_t daddr;
 __be32 spi;
 __u16 family;
 __u8 proto;
};

struct xfrm_aevent_id {
 struct xfrm_usersa_id sa_id;
 xfrm_address_t saddr;
 __u32 flags;
 __u32 reqid;
};

struct xfrm_userspi_info {
 struct xfrm_usersa_info info;
 __u32 min;
 __u32 max;
};

struct xfrm_userpolicy_info {
 struct xfrm_selector sel;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 __u32 priority;
 __u32 index;
 __u8 dir;
 __u8 action;


 __u8 flags;



 __u8 share;
};

struct xfrm_userpolicy_id {
 struct xfrm_selector sel;
 __u32 index;
 __u8 dir;
};

struct xfrm_user_acquire {
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_selector sel;
 struct xfrm_userpolicy_info policy;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
 __u32 seq;
};

struct xfrm_user_expire {
 struct xfrm_usersa_info state;
 __u8 hard;
};

struct xfrm_user_polexpire {
 struct xfrm_userpolicy_info pol;
 __u8 hard;
};

struct xfrm_usersa_flush {
 __u8 proto;
};

struct xfrm_user_report {
 __u8 proto;
 struct xfrm_selector sel;
};



struct xfrm_user_kmaddress {
 xfrm_address_t local;
 xfrm_address_t remote;
 __u32 reserved;
 __u16 family;
};

struct xfrm_user_migrate {
 xfrm_address_t old_daddr;
 xfrm_address_t old_saddr;
 xfrm_address_t new_daddr;
 xfrm_address_t new_saddr;
 __u8 proto;
 __u8 mode;
 __u16 reserved;
 __u32 reqid;
 __u16 old_family;
 __u16 new_family;
};

struct xfrm_user_mapping {
 struct xfrm_usersa_id id;
 __u32 reqid;
 xfrm_address_t old_saddr;
 xfrm_address_t new_saddr;
 __be16 old_sport;
 __be16 new_sport;
};

struct xfrm_address_filter {
 xfrm_address_t saddr;
 xfrm_address_t daddr;
 __u16 family;
 __u8 splen;
 __u8 dplen;
};

struct xfrm_user_offload {
 int ifindex;
 __u8 flags;
};
# 519 "../include/uapi/linux/xfrm.h"
enum xfrm_nlgroups {
 XFRMNLGRP_NONE,

 XFRMNLGRP_ACQUIRE,

 XFRMNLGRP_EXPIRE,

 XFRMNLGRP_SA,

 XFRMNLGRP_POLICY,

 XFRMNLGRP_AEVENTS,

 XFRMNLGRP_REPORT,

 XFRMNLGRP_MIGRATE,

 XFRMNLGRP_MAPPING,

 __XFRMNLGRP_MAX
};
# 9 "../include/net/netns/xfrm.h" 2


struct ctl_table_header;

struct xfrm_policy_hash {
 struct hlist_head *table;
 unsigned int hmask;
 u8 dbits4;
 u8 sbits4;
 u8 dbits6;
 u8 sbits6;
};

struct xfrm_policy_hthresh {
 struct work_struct work;
 seqlock_t lock;
 u8 lbits4;
 u8 rbits4;
 u8 lbits6;
 u8 rbits6;
};

struct netns_xfrm {
 struct list_head state_all;
# 41 "../include/net/netns/xfrm.h"
 struct hlist_head *state_bydst;
 struct hlist_head *state_bysrc;
 struct hlist_head *state_byspi;
 unsigned int state_hmask;
 unsigned int state_num;
 struct work_struct state_hash_work;

 struct list_head policy_all;
 struct hlist_head *policy_byidx;
 unsigned int policy_idx_hmask;
 struct hlist_head policy_inexact[XFRM_POLICY_MAX];
 struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX];
 unsigned int policy_count[XFRM_POLICY_MAX * 2];
 struct work_struct policy_hash_work;
 struct xfrm_policy_hthresh policy_hthresh;


 struct sock *nlsk;
 struct sock *nlsk_stash;

 u32 sysctl_aevent_etime;
 u32 sysctl_aevent_rseqth;
 int sysctl_larval_drop;
 u32 sysctl_acq_expires;

 struct ctl_table_header *sysctl_hdr;


 struct dst_ops xfrm4_dst_ops;

 struct dst_ops xfrm6_dst_ops;

 spinlock_t xfrm_state_lock;
 spinlock_t xfrm_policy_lock;
 struct mutex xfrm_cfg_mutex;
};
# 31 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/mpls.h" 1








struct mpls_route;
struct ctl_table_header;

struct netns_mpls {
 int ip_ttl_propagate;
 int default_ttl;
 size_t platform_labels;
 struct mpls_route * *platform_label;

 struct ctl_table_header *ctl;
};
# 32 "../include/net/net_namespace.h" 2
# 1 "../include/net/netns/can.h" 1
# 11 "../include/net/netns/can.h"
struct dev_rcv_lists;
struct s_stats;
struct s_pstats;

struct netns_can {

 struct proc_dir_entry *proc_dir;
 struct proc_dir_entry *pde_version;
 struct proc_dir_entry *pde_stats;
 struct proc_dir_entry *pde_reset_stats;
 struct proc_dir_entry *pde_rcvlist_all;
 struct proc_dir_entry *pde_rcvlist_fil;
 struct proc_dir_entry *pde_rcvlist_inv;
 struct proc_dir_entry *pde_rcvlist_sff;
 struct proc_dir_entry *pde_rcvlist_eff;
 struct proc_dir_entry *pde_rcvlist_err;
 struct proc_dir_entry *bcmproc_dir;



 struct dev_rcv_lists *can_rx_alldev_list;
 spinlock_t can_rcvlists_lock;
 struct timer_list can_stattimer;
 struct s_stats *can_stats;
 struct s_pstats *can_pstats;


 struct hlist_head cgw_list;
};
# 33 "../include/net/net_namespace.h" 2
# 1 "../include/linux/ns_common.h" 1




struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
};
# 34 "../include/net/net_namespace.h" 2



struct user_namespace;
struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;
struct sock;
struct netns_ipvs;





struct net {
 refcount_t passive;


 atomic_t count;


 spinlock_t rules_mod_lock;

 u32 hash_mix;
 atomic64_t cookie_gen;

 struct list_head list;
 struct list_head cleanup_list;
 struct list_head exit_list;

 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 spinlock_t nsid_lock;
 struct idr netns_ids;

 struct ns_common ns;

 struct proc_dir_entry *proc_net;
 struct proc_dir_entry *proc_net_stat;


 struct ctl_table_set sysctls;


 struct sock *rtnl;
 struct sock *genl_sock;

 struct list_head dev_base_head;
 struct hlist_head *dev_name_head;
 struct hlist_head *dev_index_head;
 unsigned int dev_base_seq;
 int ifindex;
 unsigned int dev_unreg_count;


 struct list_head rules_ops;

 struct list_head fib_notifier_ops;

 struct net_device *loopback_dev;
 struct netns_core core;
 struct netns_mib mib;
 struct netns_packet packet;
 struct netns_unix unx;
 struct netns_ipv4 ipv4;

 struct netns_ipv6 ipv6;





 struct netns_sctp sctp;





 struct netns_nf nf;
 struct netns_xt xt;

 struct netns_ct ct;





 struct netns_nf_frag nf_frag;
 struct ctl_table_header *nf_frag_frags_hdr;

 struct sock *nfnl;
 struct sock *nfnl_stash;
# 136 "../include/net/net_namespace.h"
 struct sk_buff_head wext_nlevents;

 struct net_generic *gen;



 struct netns_xfrm xfrm;
# 153 "../include/net/net_namespace.h"
 struct sock *diag_nlsk;
 atomic_t fnhe_genid;
} ;

# 1 "../include/linux/seq_file_net.h" 1






struct net;
extern struct net init_net;

struct seq_net_private {

 struct net *net;

};

int seq_open_net(struct inode *, struct file *,
   const struct seq_operations *, int);
int single_open_net(struct inode *, struct file *file,
  int (*show)(struct seq_file *, void *));
int seq_release_net(struct inode *, struct file *);
int single_release_net(struct inode *, struct file *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net *seq_file_net(struct seq_file *seq)
{

 return ((struct seq_net_private *)seq->private)->net;



}
# 158 "../include/net/net_namespace.h" 2


extern struct net init_net;


struct net *copy_net_ns(unsigned long flags, struct user_namespace *user_ns,
   struct net *old_net);

void net_ns_barrier(void);
# 182 "../include/net/net_namespace.h"
extern struct list_head net_namespace_list;

struct net *get_net_ns_by_pid(pid_t pid);
struct net *get_net_ns_by_fd(int fd);


void ipx_register_sysctl(void);
void ipx_unregister_sysctl(void);






void __put_net(struct net *net);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net *get_net(struct net *net)
{
 atomic_add(1, (&net->count));
 return net;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net *maybe_get_net(struct net *net)
{





 if (!atomic_add_unless((&net->count), 1, 0))
  net = ((void *)0);
 return net;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_net(struct net *net)
{
 if ((atomic_sub_return(1, (&net->count)) == 0))
  __put_net(net);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
int net_eq(const struct net *net1, const struct net *net2)
{
 return net1 == net2;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int check_net(const struct net *net)
{
 return ({ union { typeof((&net->count)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&net->count)->counter), __u.__c, sizeof((&net->count)->counter)); else __read_once_size_nocheck(&((&net->count)->counter), __u.__c, sizeof((&net->count)->counter)); do { } while (0); __u.__val; }) != 0;
}

void net_drop_ns(void *);
# 266 "../include/net/net_namespace.h"
typedef struct {

 struct net *net;

} possible_net_t;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void write_pnet(possible_net_t *pnet, struct net *net)
{

 pnet->net = net;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net *read_pnet(const possible_net_t *pnet)
{

 return pnet->net;



}
# 306 "../include/net/net_namespace.h"
int peernet2id_alloc(struct net *net, struct net *peer);
int peernet2id(struct net *net, struct net *peer);
bool peernet_has_id(struct net *net, struct net *peer);
struct net *get_net_ns_by_id(struct net *net, int id);

struct pernet_operations {
 struct list_head list;
 int (*init)(struct net *net);
 void (*exit)(struct net *net);
 void (*exit_batch)(struct list_head *net_exit_list);
 unsigned int *id;
 size_t size;
};
# 339 "../include/net/net_namespace.h"
int register_pernet_subsys(struct pernet_operations *);
void unregister_pernet_subsys(struct pernet_operations *);
int register_pernet_device(struct pernet_operations *);
void unregister_pernet_device(struct pernet_operations *);

struct ctl_table;
struct ctl_table_header;


int net_sysctl_init(void);
struct ctl_table_header *register_net_sysctl(struct net *net, const char *path,
          struct ctl_table *table);
void unregister_net_sysctl_table(struct ctl_table_header *header);
# 364 "../include/net/net_namespace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int rt_genid_ipv4(struct net *net)
{
 return ({ union { typeof((&net->ipv4.rt_genid)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&net->ipv4.rt_genid)->counter), __u.__c, sizeof((&net->ipv4.rt_genid)->counter)); else __read_once_size_nocheck(&((&net->ipv4.rt_genid)->counter), __u.__c, sizeof((&net->ipv4.rt_genid)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rt_genid_bump_ipv4(struct net *net)
{
 atomic_add(1, (&net->ipv4.rt_genid));
}

extern void (*__fib6_flush_trees)(struct net *net);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rt_genid_bump_ipv6(struct net *net)
{
 if (__fib6_flush_trees)
  __fib6_flush_trees(net);
}
# 390 "../include/net/net_namespace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rt_genid_bump_all(struct net *net)
{
 rt_genid_bump_ipv4(net);
 rt_genid_bump_ipv6(net);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int fnhe_genid(struct net *net)
{
 return ({ union { typeof((&net->fnhe_genid)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((&net->fnhe_genid)->counter), __u.__c, sizeof((&net->fnhe_genid)->counter)); else __read_once_size_nocheck(&((&net->fnhe_genid)->counter), __u.__c, sizeof((&net->fnhe_genid)->counter)); do { } while (0); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void fnhe_genid_bump(struct net *net)
{
 atomic_add(1, (&net->fnhe_genid));
}
# 43 "../include/linux/netdevice.h" 2



# 1 "../include/net/netprio_cgroup.h" 1
# 17 "../include/net/netprio_cgroup.h"
# 1 "../include/linux/cgroup.h" 1
# 16 "../include/linux/cgroup.h"
# 1 "../include/uapi/linux/cgroupstats.h" 1
# 20 "../include/uapi/linux/cgroupstats.h"
# 1 "../include/uapi/linux/taskstats.h" 1
# 42 "../include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 73 "../include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;
 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "../include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;
};

struct taskstats2 {
 __u16 version;
 __s16 oom_score;
 __u32 pid;
 __u64 anon_rss;
 __u64 file_rss;
 __u64 swap_rss;
 __u64 shmem_rss;
 __u64 unreclaimable;



 __u64 utime;
 __u64 stime;
 __u64 cutime;
 __u64 cstime;

 __u32 uid __attribute__((aligned(8)));

 __u32 ppid;
 char name[32];
 char state[32];


};







enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 TASKSTATS2_CMD_GET,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 TASKSTATS_TYPE_FOREACH,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_FOREACH,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "../include/uapi/linux/cgroupstats.h" 2
# 32 "../include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "../include/linux/cgroup.h" 2






# 1 "../include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "../include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 68 "../include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__ ((__section__(".init.text"))) nsproxy_cache_init(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_nsproxy(struct nsproxy *ns)
{
 if ((atomic_sub_return(1, (&ns->count)) == 0)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_add(1, (&ns->count));
}
# 24 "../include/linux/cgroup.h" 2
# 1 "../include/linux/user_namespace.h" 1
# 16 "../include/linux/user_namespace.h"
struct uid_gid_map {
 u32 nr_extents;
 struct uid_gid_extent {
  u32 first;
  u32 lower_first;
  u32 count;
 } extent[5];
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,

 UCOUNT_COUNTS,
};

struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 atomic_t count;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;






 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 int ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 int count;
 atomic_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);
# 122 "../include/linux/user_namespace.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 return &init_user_ns;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int create_user_ns(struct cred *new)
{
 return -22;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int unshare_userns(unsigned long unshare_flags,
     struct cred **new_cred)
{
 if (unshare_flags & 0x10000000)
  return -22;
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_user_ns(struct user_namespace *ns)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool userns_may_setgroups(const struct user_namespace *ns)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool in_userns(const struct user_namespace *ancestor,
        const struct user_namespace *child)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool current_in_userns(const struct user_namespace *target_ns)
{
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct ns_common *ns_get_owner(struct ns_common *ns)
{
 return ERR_PTR(-1);
}
# 25 "../include/linux/cgroup.h" 2


# 1 "../include/linux/cgroup-defs.h" 1
# 21 "../include/linux/cgroup-defs.h"
# 1 "../include/linux/bpf-cgroup.h" 1





# 1 "../include/uapi/linux/bpf.h" 1
# 12 "../include/uapi/linux/bpf.h"
# 1 "../include/uapi/linux/bpf_common.h" 1
# 13 "../include/uapi/linux/bpf.h" 2
# 46 "../include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};


enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
};

enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 __MAX_BPF_ATTACH_TYPE
};
# 219 "../include/uapi/linux/bpf.h"
union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;
  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;
} __attribute__((aligned(8)));
# 689 "../include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update,
 __BPF_FUNC_MAX_ID,
};
# 734 "../include/uapi/linux/bpf.h"
enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
};




struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};
# 790 "../include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,

};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;
};
# 815 "../include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
} __attribute__((aligned(8)));







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


};
# 7 "../include/linux/bpf-cgroup.h" 2

struct sock;
struct cgroup;
struct sk_buff;
struct bpf_sock_ops_kern;



extern struct static_key_false cgroup_bpf_enabled_key;


struct bpf_prog_list {
 struct list_head node;
 struct bpf_prog *prog;
};

struct bpf_prog_array;

struct cgroup_bpf {

 struct bpf_prog_array *effective[__MAX_BPF_ATTACH_TYPE];






 struct list_head progs[__MAX_BPF_ATTACH_TYPE];
 u32 flags[__MAX_BPF_ATTACH_TYPE];


 struct bpf_prog_array *inactive;
};

void cgroup_bpf_put(struct cgroup *cgrp);
int cgroup_bpf_inherit(struct cgroup *cgrp);

int __cgroup_bpf_attach(struct cgroup *cgrp, struct bpf_prog *prog,
   enum bpf_attach_type type, u32 flags);
int __cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
   enum bpf_attach_type type, u32 flags);


int cgroup_bpf_attach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type, u32 flags);
int cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type, u32 flags);

int __cgroup_bpf_run_filter_skb(struct sock *sk,
    struct sk_buff *skb,
    enum bpf_attach_type type);

int __cgroup_bpf_run_filter_sk(struct sock *sk,
          enum bpf_attach_type type);

int __cgroup_bpf_run_filter_sock_ops(struct sock *sk,
         struct bpf_sock_ops_kern *sock_ops,
         enum bpf_attach_type type);
# 22 "../include/linux/cgroup-defs.h" 2
# 1 "../include/linux/psi_types.h" 1



# 1 "../include/linux/kthread.h" 1







__attribute__((format(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 29 "../include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);
# 52 "../include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 77 "../include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(unsigned long __data);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 148 "../include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 173 "../include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((format(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((format(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);
# 5 "../include/linux/psi_types.h" 2








enum psi_task_count {
 NR_IOWAIT,
 NR_MEMSTALL,
 NR_RUNNING,
 NR_PSI_TASK_COUNTS = 3,
};







enum psi_res {
 PSI_IO,
 PSI_MEM,
 PSI_CPU,
 NR_PSI_RESOURCES = 3,
};







enum psi_states {
 PSI_IO_SOME,
 PSI_IO_FULL,
 PSI_MEM_SOME,
 PSI_MEM_FULL,
 PSI_CPU_SOME,

 PSI_NONIDLE,
 NR_PSI_STATES = 6,
};

enum psi_aggregators {
 PSI_AVGS = 0,
 PSI_POLL,
 NR_PSI_AGGREGATORS,
};

struct psi_group_cpu {



 seqcount_t seq __attribute__((__aligned__((1 << 7))));


 unsigned int tasks[NR_PSI_TASK_COUNTS];


 u32 state_mask;


 u32 times[NR_PSI_STATES];


 u64 state_start;




 u32 times_prev[NR_PSI_AGGREGATORS][NR_PSI_STATES]
   __attribute__((__aligned__((1 << 7))));
};


struct psi_window {

 u64 size;


 u64 start_time;


 u64 start_value;


 u64 prev_growth;
};

struct psi_trigger {

 enum psi_states state;


 u64 threshold;


 struct list_head node;


 struct psi_group *group;


 wait_queue_head_t event_wait;


 int event;


 struct psi_window win;





 u64 last_event_time;


 struct kref refcount;
};

struct psi_group {

 struct mutex avgs_lock;


 struct psi_group_cpu *pcpu;


 u64 avg_total[NR_PSI_STATES - 1];
 u64 avg_last_update;
 u64 avg_next_update;


 struct delayed_work avgs_work;


 u64 total[NR_PSI_AGGREGATORS][NR_PSI_STATES - 1];
 unsigned long avg[NR_PSI_STATES - 1][3];


 atomic_t poll_scheduled;
 struct kthread_worker *poll_kworker;
 struct kthread_delayed_work poll_work;


 struct mutex trigger_lock;


 struct list_head triggers;
 u32 nr_triggers[NR_PSI_STATES - 1];
 u32 poll_states;
 u64 poll_min_period;


 u64 polling_total[NR_PSI_STATES - 1];
 u64 polling_next_update;
 u64 polling_until;
};
# 23 "../include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {
# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
cpuset_cgrp_id,



cpu_cgrp_id,



cpuacct_cgrp_id,



schedtune_cgrp_id,



io_cgrp_id,



memory_cgrp_id,







freezer_cgrp_id,
# 44 "../include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_PRESSURE = (1 << 6),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
};
# 119 "../include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct callback_head callback_head;
 struct work_struct destroy_work;





 struct cgroup_subsys_state *parent;
};
# 173 "../include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 205 "../include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 219 "../include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 251 "../include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;
# 276 "../include/linux/cgroup-defs.h"
 int id;







 int level;


 int max_depth;
# 300 "../include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 315 "../include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 332 "../include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 355 "../include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 364 "../include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 int ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 int cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 struct idr cgroup_idr;


 char release_agent_path[4096];


 char name[64];
};
# 436 "../include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 unsigned int (*poll)(struct kernfs_open_file *of,
        struct poll_table_struct *pt);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task);
 void (*cancel_fork)(struct task_struct *task);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 557 "../include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 569 "../include/linux/cgroup-defs.h"
 bool threaded:1;
# 583 "../include/linux/cgroup-defs.h"
 bool broken_hierarchy:1;
 bool warned_broken_hierarchy:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 619 "../include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 631 "../include/linux/cgroup-defs.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 689 "../include/linux/cgroup-defs.h"
struct sock_cgroup_data {
 union {

  struct {
   u8 is_data;
   u8 padding;
   u16 prioidx;
   u32 classid;
  } __attribute__((packed));
# 706 "../include/linux/cgroup-defs.h"
  u64 val;
 };
};






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 sock_cgroup_prioidx(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->prioidx : 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 sock_cgroup_classid(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->classid : 0;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sock_cgroup_set_prioidx(struct sock_cgroup_data *skcd,
        u16 prioidx)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ union { typeof(skcd->val) __val; char __c[1]; } __u; if (1) __read_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); else __read_once_size_nocheck(&(skcd->val), __u.__c, sizeof(skcd->val)); do { } while (0); __u.__val; }) }};

 if (sock_cgroup_prioidx(&skcd_buf) == prioidx)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.prioidx = prioidx;
 ({ union { typeof(skcd->val) __val; char __c[1]; } __u = { .__val = ( typeof(skcd->val)) (skcd_buf.val) }; __write_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); __u.__val; });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sock_cgroup_set_classid(struct sock_cgroup_data *skcd,
        u32 classid)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ union { typeof(skcd->val) __val; char __c[1]; } __u; if (1) __read_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); else __read_once_size_nocheck(&(skcd->val), __u.__c, sizeof(skcd->val)); do { } while (0); __u.__val; }) }};

 if (sock_cgroup_classid(&skcd_buf) == classid)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.classid = classid;
 ({ union { typeof(skcd->val) __val; char __c[1]; } __u = { .__val = ( typeof(skcd->val)) (skcd_buf.val) }; __write_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); __u.__val; });
}
# 28 "../include/linux/cgroup.h" 2
# 49 "../include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;
 struct list_head *tasks_head;
 struct list_head *mg_tasks_head;
 struct list_head *dying_tasks_head;

 struct list_head *cur_tasks_head;
 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuset_cgrp_subsys;



extern struct cgroup_subsys cpu_cgrp_subsys;



extern struct cgroup_subsys cpuacct_cgrp_subsys;



extern struct cgroup_subsys schedtune_cgrp_subsys;



extern struct cgroup_subsys io_cgrp_subsys;



extern struct cgroup_subsys memory_cgrp_subsys;







extern struct cgroup_subsys freezer_cgrp_subsys;
# 76 "../include/linux/cgroup.h" 2





# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
extern struct static_key_true cpuset_cgrp_subsys_enabled_key; extern struct static_key_true cpuset_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;



extern struct static_key_true schedtune_cgrp_subsys_enabled_key; extern struct static_key_true schedtune_cgrp_subsys_on_dfl_key;



extern struct static_key_true io_cgrp_subsys_enabled_key; extern struct static_key_true io_cgrp_subsys_on_dfl_key;



extern struct static_key_true memory_cgrp_subsys_enabled_key; extern struct static_key_true memory_cgrp_subsys_on_dfl_key;







extern struct static_key_true freezer_cgrp_subsys_enabled_key; extern struct static_key_true freezer_cgrp_subsys_on_dfl_key;
# 82 "../include/linux/cgroup.h" 2
# 98 "../include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p);
extern void cgroup_cancel_fork(struct task_struct *p);
extern void cgroup_post_fork(struct task_struct *p);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 309 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 322 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 339 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 356 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 378 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 402 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 467 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ union { typeof(((task)->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); else __read_once_size_nocheck(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 479 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 494 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  cpu_relax();
 }
 rcu_read_unlock();
 return css;
}
# 524 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) && !__builtin_types_compatible_p(typeof(*(parent_css)), typeof(void)))); extern void __compiletime_assert_86(void) ; if (__cond) __compiletime_assert_86(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 559 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == ancestor->id;
}
# 576 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return cgrp->kn->id.ino;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

bool cgroup_psi_enabled(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_init_kthreadd(void)
{





 get_current()->no_cgroup_migration = 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void cgroup_kthread_ready(void)
{




 get_current()->no_cgroup_migration = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) union kernfs_node_id *cgroup_get_kernfs_id(struct cgroup *cgrp)
{
 return &cgrp->kn->id;
}

void cgroup_path_from_kernfs_id(const union kernfs_node_id *id,
     char *buf, size_t buflen);
# 737 "../include/linux/cgroup.h"
void cgroup_sk_alloc_disable(void);
void cgroup_sk_alloc(struct sock_cgroup_data *skcd);
void cgroup_sk_free(struct sock_cgroup_data *skcd);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct cgroup *sock_cgroup_ptr(struct sock_cgroup_data *skcd)
{
# 757 "../include/linux/cgroup.h"
 return (struct cgroup *)(unsigned long)skcd->val;

}
# 768 "../include/linux/cgroup.h"
struct cgroup_namespace {
 refcount_t count;
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 801 "../include/linux/cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->count);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->count))
  free_cgroup_ns(ns);
}
# 18 "../include/net/netprio_cgroup.h" 2
# 1 "../include/linux/hardirq.h" 1






# 1 "../include/linux/ftrace_irq.h" 1
# 10 "../include/linux/ftrace_irq.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_ftrace_nmi_enter(void) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void arch_ftrace_nmi_exit(void) { }







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ftrace_nmi_enter(void)
{




 arch_ftrace_nmi_enter();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ftrace_nmi_exit(void)
{
 arch_ftrace_nmi_exit();




}
# 8 "../include/linux/hardirq.h" 2
# 1 "../include/linux/vtime.h" 1




# 1 "../include/linux/context_tracking_state.h" 1





# 1 "../include/linux/static_key.h" 1
# 7 "../include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 44 "../include/linux/context_tracking_state.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool context_tracking_active(void) { return false; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool context_tracking_is_enabled(void) { return false; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool context_tracking_cpu_is_enabled(void) { return false; }
# 6 "../include/linux/vtime.h" 2





struct task_struct;
# 40 "../include/linux/vtime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool vtime_accounting_cpu_enabled(void) { return false; }
# 65 "../include/linux/vtime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_task_switch(struct task_struct *prev) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_account_system(struct task_struct *tsk) { }
# 77 "../include/linux/vtime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 93 "../include/linux/vtime.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_account_irq_enter(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_account_irq_exit(struct task_struct *tsk) { }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void vtime_flush(struct task_struct *tsk) { }




extern void irqtime_account_irq(struct task_struct *tsk);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void account_irq_enter_time(struct task_struct *tsk)
{
 vtime_account_irq_enter(tsk);
 irqtime_account_irq(tsk);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void account_irq_exit_time(struct task_struct *tsk)
{
 vtime_account_irq_exit(tsk);
 irqtime_account_irq(tsk);
}
# 9 "../include/linux/hardirq.h" 2
# 1 "../arch/arm64/include/asm/hardirq.h" 1
# 23 "../arch/arm64/include/asm/hardirq.h"
# 1 "../arch/arm64/include/asm/irq.h" 1






# 1 "../include/asm-generic/irq.h" 1
# 14 "../include/asm-generic/irq.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int irq_canonicalize(int irq)
{
 return irq;
}
# 8 "../arch/arm64/include/asm/irq.h" 2

struct pt_regs;

extern void set_handle_irq(void (*handle_irq)(struct pt_regs *));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int nr_legacy_irqs(void)
{
 return 0;
}
# 24 "../arch/arm64/include/asm/hardirq.h" 2
# 1 "../arch/arm64/include/asm/kvm_arm.h" 1
# 23 "../arch/arm64/include/asm/kvm_arm.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 24 "../arch/arm64/include/asm/kvm_arm.h" 2
# 25 "../arch/arm64/include/asm/hardirq.h" 2




typedef struct {
 unsigned int __softirq_pending;
 unsigned int ipi_irqs[7];
} __attribute__((__aligned__((1 << 7)))) irq_cpustat_t;

# 1 "../include/linux/irq_cpustat.h" 1
# 21 "../include/linux/irq_cpustat.h"
extern irq_cpustat_t irq_stat[];
# 35 "../arch/arm64/include/asm/hardirq.h" 2




u64 smp_irq_stat_cpu(unsigned int cpu);




struct nmi_ctx {
 u64 hcr;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct nmi_ctx) nmi_contexts;
# 71 "../arch/arm64/include/asm/hardirq.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ack_bad_irq(unsigned int irq)
{
 extern unsigned long irq_err_count;
 irq_err_count++;
}
# 10 "../include/linux/hardirq.h" 2


extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);
# 26 "../include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 46 "../include/linux/hardirq.h"
extern void irq_enter(void);
# 61 "../include/linux/hardirq.h"
extern void irq_exit(void);
# 19 "../include/net/netprio_cgroup.h" 2
# 50 "../include/net/netprio_cgroup.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 task_netprioidx(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void sock_update_netprioidx(struct sock_cgroup_data *skcd)
{
}
# 47 "../include/linux/netdevice.h" 2


# 1 "../include/uapi/linux/neighbour.h" 1





# 1 "../include/linux/netlink.h" 1








# 1 "../include/net/scm.h" 1







# 1 "../include/linux/security.h" 1
# 35 "../include/linux/security.h"
struct linux_binprm;
struct cred;
struct rlimit;
struct siginfo;
struct sem_array;
struct sembuf;
struct kern_ipc_perm;
struct audit_context;
struct super_block;
struct inode;
struct dentry;
struct file;
struct vfsmount;
struct path;
struct qstr;
struct iattr;
struct fown_struct;
struct file_operations;
struct shmid_kernel;
struct msg_msg;
struct msg_queue;
struct xattr;
struct xfrm_sec_ctx;
struct mm_struct;
# 67 "../include/linux/security.h"
struct ctl_table;
struct audit_krule;
struct user_namespace;
struct timezone;

enum lsm_event {
 LSM_POLICY_CHANGE,
};


extern int cap_capable(const struct cred *cred, struct user_namespace *ns,
         int cap, int audit);
extern int cap_settime(const struct timespec *ts, const struct timezone *tz);
extern int cap_ptrace_access_check(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset(struct cred *new, const struct cred *old,
        const kernel_cap_t *effective,
        const kernel_cap_t *inheritable,
        const kernel_cap_t *permitted);
extern int cap_bprm_set_creds(struct linux_binprm *bprm);
extern int cap_inode_setxattr(struct dentry *dentry, const char *name,
         const void *value, size_t size, int flags);
extern int cap_inode_removexattr(struct dentry *dentry, const char *name);
extern int cap_inode_need_killpriv(struct dentry *dentry);
extern int cap_inode_killpriv(struct dentry *dentry);
extern int cap_inode_getsecurity(struct inode *inode, const char *name,
     void **buffer, bool alloc);
extern int cap_mmap_addr(unsigned long addr);
extern int cap_mmap_file(struct file *file, unsigned long reqprot,
    unsigned long prot, unsigned long flags);
extern int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5);
extern int cap_task_setscheduler(struct task_struct *p);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;


extern unsigned long mmap_min_addr;
extern unsigned long dac_mmap_min_addr;
# 147 "../include/linux/security.h"
struct sched_param;
struct request_sock;







extern int mmap_min_addr_handler(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);



typedef int (*initxattrs) (struct inode *inode,
      const struct xattr *xattr_array, void *fs_data);



struct security_mnt_opts {
 char **mnt_opts;
 int *mnt_opts_flags;
 int num_mnt_opts;
};

int call_lsm_notifier(enum lsm_event event, void *data);
int register_lsm_notifier(struct notifier_block *nb);
int unregister_lsm_notifier(struct notifier_block *nb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_init_mnt_opts(struct security_mnt_opts *opts)
{
 opts->mnt_opts = ((void *)0);
 opts->mnt_opts_flags = ((void *)0);
 opts->num_mnt_opts = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_free_mnt_opts(struct security_mnt_opts *opts)
{
 int i;
 if (opts->mnt_opts)
  for (i = 0; i < opts->num_mnt_opts; i++)
   kfree(opts->mnt_opts[i]);
 kfree(opts->mnt_opts);
 opts->mnt_opts = ((void *)0);
 kfree(opts->mnt_opts_flags);
 opts->mnt_opts_flags = ((void *)0);
 opts->num_mnt_opts = 0;
}


extern int security_init(void);


int security_binder_set_context_mgr(struct task_struct *mgr);
int security_binder_transaction(struct task_struct *from,
    struct task_struct *to);
int security_binder_transfer_binder(struct task_struct *from,
        struct task_struct *to);
int security_binder_transfer_file(struct task_struct *from,
      struct task_struct *to, struct file *file);
int security_ptrace_access_check(struct task_struct *child, unsigned int mode);
int security_ptrace_traceme(struct task_struct *parent);
int security_capget(struct task_struct *target,
      kernel_cap_t *effective,
      kernel_cap_t *inheritable,
      kernel_cap_t *permitted);
int security_capset(struct cred *new, const struct cred *old,
      const kernel_cap_t *effective,
      const kernel_cap_t *inheritable,
      const kernel_cap_t *permitted);
int security_capable(const struct cred *cred, struct user_namespace *ns,
   int cap);
int security_capable_noaudit(const struct cred *cred, struct user_namespace *ns,
        int cap);
int security_quotactl(int cmds, int type, int id, struct super_block *sb);
int security_quota_on(struct dentry *dentry);
int security_syslog(int type);
int security_settime64(const struct timespec *ts, const struct timezone *tz);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_settime(const struct timespec *ts, const struct timezone *tz)
{
 struct timespec ts64 = timespec_to_timespec64(*ts);

 return security_settime64(&ts64, tz);
}
int security_vm_enough_memory_mm(struct mm_struct *mm, long pages);
int security_bprm_set_creds(struct linux_binprm *bprm);
int security_bprm_check(struct linux_binprm *bprm);
void security_bprm_committing_creds(struct linux_binprm *bprm);
void security_bprm_committed_creds(struct linux_binprm *bprm);
int security_sb_alloc(struct super_block *sb);
void security_sb_free(struct super_block *sb);
int security_sb_copy_data(char *orig, char *copy);
int security_sb_remount(struct super_block *sb, void *data);
int security_sb_kern_mount(struct super_block *sb, int flags, void *data);
int security_sb_show_options(struct seq_file *m, struct super_block *sb);
int security_sb_statfs(struct dentry *dentry);
int security_sb_mount(const char *dev_name, const struct path *path,
        const char *type, unsigned long flags, void *data);
int security_sb_umount(struct vfsmount *mnt, int flags);
int security_sb_pivotroot(const struct path *old_path, const struct path *new_path);
int security_sb_set_mnt_opts(struct super_block *sb,
    struct security_mnt_opts *opts,
    unsigned long kern_flags,
    unsigned long *set_kern_flags);
int security_sb_clone_mnt_opts(const struct super_block *oldsb,
    struct super_block *newsb,
    unsigned long kern_flags,
    unsigned long *set_kern_flags);
int security_sb_parse_opts_str(char *options, struct security_mnt_opts *opts);
int security_dentry_init_security(struct dentry *dentry, int mode,
     const struct qstr *name, void **ctx,
     u32 *ctxlen);
int security_dentry_create_files_as(struct dentry *dentry, int mode,
     struct qstr *name,
     const struct cred *old,
     struct cred *new);

int security_inode_alloc(struct inode *inode);
void security_inode_free(struct inode *inode);
int security_inode_init_security(struct inode *inode, struct inode *dir,
     const struct qstr *qstr,
     initxattrs initxattrs, void *fs_data);
int security_old_inode_init_security(struct inode *inode, struct inode *dir,
         const struct qstr *qstr, const char **name,
         void **value, size_t *len);
int security_inode_create(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_link(struct dentry *old_dentry, struct inode *dir,
    struct dentry *new_dentry);
int security_inode_unlink(struct inode *dir, struct dentry *dentry);
int security_inode_symlink(struct inode *dir, struct dentry *dentry,
      const char *old_name);
int security_inode_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_rmdir(struct inode *dir, struct dentry *dentry);
int security_inode_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev);
int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
     struct inode *new_dir, struct dentry *new_dentry,
     unsigned int flags);
int security_inode_readlink(struct dentry *dentry);
int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
          bool rcu);
int security_inode_permission(struct inode *inode, int mask);
int security_inode_setattr(struct dentry *dentry, struct iattr *attr);
int security_inode_getattr(const struct path *path);
int security_inode_setxattr(struct dentry *dentry, const char *name,
       const void *value, size_t size, int flags);
void security_inode_post_setxattr(struct dentry *dentry, const char *name,
      const void *value, size_t size, int flags);
int security_inode_getxattr(struct dentry *dentry, const char *name);
int security_inode_listxattr(struct dentry *dentry);
int security_inode_removexattr(struct dentry *dentry, const char *name);
int security_inode_need_killpriv(struct dentry *dentry);
int security_inode_killpriv(struct dentry *dentry);
int security_inode_getsecurity(struct inode *inode, const char *name, void **buffer, bool alloc);
int security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags);
int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size);
void security_inode_getsecid(struct inode *inode, u32 *secid);
int security_inode_copy_up(struct dentry *src, struct cred **new);
int security_inode_copy_up_xattr(const char *name);
int security_file_permission(struct file *file, int mask);
int security_file_alloc(struct file *file);
void security_file_free(struct file *file);
int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
int security_mmap_file(struct file *file, unsigned long prot,
   unsigned long flags);
int security_mmap_addr(unsigned long addr);
int security_file_mprotect(struct vm_area_struct *vma, unsigned long reqprot,
      unsigned long prot);
int security_file_lock(struct file *file, unsigned int cmd);
int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg);
void security_file_set_fowner(struct file *file);
int security_file_send_sigiotask(struct task_struct *tsk,
     struct fown_struct *fown, int sig);
int security_file_receive(struct file *file);
int security_file_open(struct file *file, const struct cred *cred);
int security_task_alloc(struct task_struct *task, unsigned long clone_flags);
void security_task_free(struct task_struct *task);
int security_cred_alloc_blank(struct cred *cred, gfp_t gfp);
void security_cred_free(struct cred *cred);
int security_prepare_creds(struct cred *new, const struct cred *old, gfp_t gfp);
void security_transfer_creds(struct cred *new, const struct cred *old);
int security_kernel_act_as(struct cred *new, u32 secid);
int security_kernel_create_files_as(struct cred *new, struct inode *inode);
int security_kernel_module_request(char *kmod_name);
int security_kernel_read_file(struct file *file, enum kernel_read_file_id id);
int security_kernel_post_read_file(struct file *file, char *buf, loff_t size,
       enum kernel_read_file_id id);
int security_task_fix_setuid(struct cred *new, const struct cred *old,
        int flags);
int security_task_setpgid(struct task_struct *p, pid_t pgid);
int security_task_getpgid(struct task_struct *p);
int security_task_getsid(struct task_struct *p);
void security_task_getsecid(struct task_struct *p, u32 *secid);
int security_task_setnice(struct task_struct *p, int nice);
int security_task_setioprio(struct task_struct *p, int ioprio);
int security_task_getioprio(struct task_struct *p);
int security_task_prlimit(const struct cred *cred, const struct cred *tcred,
     unsigned int flags);
int security_task_setrlimit(struct task_struct *p, unsigned int resource,
  struct rlimit *new_rlim);
int security_task_setscheduler(struct task_struct *p);
int security_task_getscheduler(struct task_struct *p);
int security_task_movememory(struct task_struct *p);
int security_task_kill(struct task_struct *p, struct siginfo *info,
   int sig, u32 secid);
int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
   unsigned long arg4, unsigned long arg5);
void security_task_to_inode(struct task_struct *p, struct inode *inode);
int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag);
void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid);
int security_msg_msg_alloc(struct msg_msg *msg);
void security_msg_msg_free(struct msg_msg *msg);
int security_msg_queue_alloc(struct msg_queue *msq);
void security_msg_queue_free(struct msg_queue *msq);
int security_msg_queue_associate(struct msg_queue *msq, int msqflg);
int security_msg_queue_msgctl(struct msg_queue *msq, int cmd);
int security_msg_queue_msgsnd(struct msg_queue *msq,
         struct msg_msg *msg, int msqflg);
int security_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
         struct task_struct *target, long type, int mode);
int security_shm_alloc(struct shmid_kernel *shp);
void security_shm_free(struct shmid_kernel *shp);
int security_shm_associate(struct shmid_kernel *shp, int shmflg);
int security_shm_shmctl(struct shmid_kernel *shp, int cmd);
int security_shm_shmat(struct shmid_kernel *shp, char *shmaddr, int shmflg);
int security_sem_alloc(struct sem_array *sma);
void security_sem_free(struct sem_array *sma);
int security_sem_associate(struct sem_array *sma, int semflg);
int security_sem_semctl(struct sem_array *sma, int cmd);
int security_sem_semop(struct sem_array *sma, struct sembuf *sops,
   unsigned nsops, int alter);
void security_d_instantiate(struct dentry *dentry, struct inode *inode);
int security_getprocattr(struct task_struct *p, char *name, char **value);
int security_setprocattr(const char *name, void *value, size_t size);
int security_netlink_send(struct sock *sk, struct sk_buff *skb);
int security_ismaclabel(const char *name);
int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen);
int security_secctx_to_secid(const char *secdata, u32 seclen, u32 *secid);
void security_release_secctx(char *secdata, u32 seclen);

void security_inode_invalidate_secctx(struct inode *inode);
int security_inode_notifysecctx(struct inode *inode, void *ctx, u32 ctxlen);
int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen);
int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen);
# 1190 "../include/linux/security.h"
int security_unix_stream_connect(struct sock *sock, struct sock *other, struct sock *newsk);
int security_unix_may_send(struct socket *sock, struct socket *other);
int security_socket_create(int family, int type, int protocol, int kern);
int security_socket_post_create(struct socket *sock, int family,
    int type, int protocol, int kern);
int security_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_listen(struct socket *sock, int backlog);
int security_socket_accept(struct socket *sock, struct socket *newsock);
int security_socket_sendmsg(struct socket *sock, struct msghdr *msg, int size);
int security_socket_recvmsg(struct socket *sock, struct msghdr *msg,
       int size, int flags);
int security_socket_getsockname(struct socket *sock);
int security_socket_getpeername(struct socket *sock);
int security_socket_getsockopt(struct socket *sock, int level, int optname);
int security_socket_setsockopt(struct socket *sock, int level, int optname);
int security_socket_shutdown(struct socket *sock, int how);
int security_sock_rcv_skb(struct sock *sk, struct sk_buff *skb);
int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len);
int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid);
int security_sk_alloc(struct sock *sk, int family, gfp_t priority);
void security_sk_free(struct sock *sk);
void security_sk_clone(const struct sock *sk, struct sock *newsk);
void security_sk_classify_flow(struct sock *sk, struct flowi *fl);
void security_req_classify_flow(const struct request_sock *req, struct flowi *fl);
void security_sock_graft(struct sock*sk, struct socket *parent);
int security_inet_conn_request(struct sock *sk,
   struct sk_buff *skb, struct request_sock *req);
void security_inet_csk_clone(struct sock *newsk,
   const struct request_sock *req);
void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb);
int security_secmark_relabel_packet(u32 secid);
void security_secmark_refcount_inc(void);
void security_secmark_refcount_dec(void);
int security_tun_dev_alloc_security(void **security);
void security_tun_dev_free_security(void *security);
int security_tun_dev_create(void);
int security_tun_dev_attach_queue(void *security);
int security_tun_dev_attach(struct sock *sk, void *security);
int security_tun_dev_open(void *security);
# 1432 "../include/linux/security.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_ib_pkey_access(void *sec, u64 subnet_prefix, u16 pkey)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_ib_endport_manage_subnet(void *sec, const char *dev_name, u8 port_num)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_ib_alloc_security(void **sec)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_ib_free_security(void *sec)
{
}
# 1473 "../include/linux/security.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp,
          struct xfrm_user_sec_ctx *sec_ctx,
          gfp_t gfp)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_policy_clone(struct xfrm_sec_ctx *old, struct xfrm_sec_ctx **new_ctxp)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_state_alloc(struct xfrm_state *x,
     struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
     struct xfrm_sec_ctx *polsec, u32 secid)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_xfrm_state_free(struct xfrm_state *x)
{
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_state_delete(struct xfrm_state *x)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid, u8 dir)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
   struct xfrm_policy *xp, const struct flowi *fl)
{
 return 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void security_skb_classify_flow(struct sk_buff *skb, struct flowi *fl)
{
}
# 1555 "../include/linux/security.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_unlink(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_mkdir(const struct path *dir, struct dentry *dentry,
          umode_t mode)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_rmdir(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_mknod(const struct path *dir, struct dentry *dentry,
          umode_t mode, unsigned int dev)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_truncate(const struct path *path)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_symlink(const struct path *dir, struct dentry *dentry,
     const char *old_name)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_link(struct dentry *old_dentry,
         const struct path *new_dir,
         struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_rename(const struct path *old_dir,
           struct dentry *old_dentry,
           const struct path *new_dir,
           struct dentry *new_dentry,
           unsigned int flags)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_chmod(const struct path *path, umode_t mode)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int security_path_chroot(const struct path *path)
{
 return 0;
}





int security_key_alloc(struct key *key, const struct cred *cred, unsigned long flags);
void security_key_free(struct key *key);
int security_key_permission(key_ref_t key_ref,
       const struct cred *cred, unsigned perm);
int security_key_getsecurity(struct key *key, char **_buffer);
# 1660 "../include/linux/security.h"
int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule);
int security_audit_rule_known(struct audit_krule *krule);
int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule,
         struct audit_context *actx);
void security_audit_rule_free(void *lsmrule);
# 1705 "../include/linux/security.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *securityfs_create_dir(const char *name,
         struct dentry *parent)
{
 return ERR_PTR(-19);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *securityfs_create_file(const char *name,
          umode_t mode,
          struct dentry *parent,
          void *data,
          const struct file_operations *fops)
{
 return ERR_PTR(-19);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct dentry *securityfs_create_symlink(const char *name,
     struct dentry *parent,
     const char *target,
     const struct inode_operations *iops)
{
 return ERR_PTR(-19);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void securityfs_remove(struct dentry *dentry)
{}




union bpf_attr;
struct bpf_map;
struct bpf_prog;
struct bpf_prog_aux;

extern int security_bpf(int cmd, union bpf_attr *attr, unsigned int size);
extern int security_bpf_map(struct bpf_map *map, fmode_t fmode);
extern int security_bpf_prog(struct bpf_prog *prog);
extern int security_bpf_map_alloc(struct bpf_map *map);
extern void security_bpf_map_free(struct bpf_map *map);
extern int security_bpf_prog_alloc(struct bpf_prog_aux *aux);
extern void security_bpf_prog_free(struct bpf_prog_aux *aux);
# 1783 "../include/linux/security.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char *alloc_secdata(void)
{
 return (char *)get_zeroed_page(((( gfp_t)(0x400000u|0x1000000u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void free_secdata(void *secdata)
{
 free_pages(((unsigned long)secdata), 0);
}
# 1805 "../include/linux/security.h"
struct perf_event_attr;
struct perf_event;


extern int security_perf_event_open(struct perf_event_attr *attr, int type);
extern int security_perf_event_alloc(struct perf_event *event);
extern void security_perf_event_free(struct perf_event *event);
extern int security_perf_event_read(struct perf_event *event);
extern int security_perf_event_write(struct perf_event *event);
# 9 "../include/net/scm.h" 2








struct scm_creds {
 u32 pid;
 kuid_t uid;
 kgid_t gid;
};

struct scm_fp_list {
 short count;
 short max;
 struct user_struct *user;
 struct file *fp[253];
};

struct scm_cookie {
 struct pid *pid;
 struct scm_fp_list *fp;
 struct scm_creds creds;

 u32 secid;

};

void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm);
void scm_detach_fds_compat(struct msghdr *msg, struct scm_cookie *scm);
int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm);
void __scm_destroy(struct scm_cookie *scm);
struct scm_fp_list *scm_fp_dup(struct scm_fp_list *fpl);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void unix_get_peersec_dgram(struct socket *sock, struct scm_cookie *scm)
{
 security_socket_getpeersec_dgram(sock, ((void *)0), &scm->secid);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void scm_set_cred(struct scm_cookie *scm,
        struct pid *pid, kuid_t uid, kgid_t gid)
{
 scm->pid = get_pid(pid);
 scm->creds.pid = pid_vnr(pid);
 scm->creds.uid = uid;
 scm->creds.gid = gid;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void scm_destroy_cred(struct scm_cookie *scm)
{
 put_pid(scm->pid);
 scm->pid = ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void scm_destroy(struct scm_cookie *scm)
{
 scm_destroy_cred(scm);
 if (scm->fp)
  __scm_destroy(scm);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int scm_send(struct socket *sock, struct msghdr *msg,
          struct scm_cookie *scm, bool forcecreds)
{
 memset(scm, 0, sizeof(*scm));
 scm->creds.uid = (kuid_t){ -1 };
 scm->creds.gid = (kgid_t){ -1 };
 if (forcecreds)
  scm_set_cred(scm, task_tgid(get_current()), (({ ({ do { } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->uid; })), (({ ({ do { } while (0); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->gid; })));
 unix_get_peersec_dgram(sock, scm);
 if (msg->msg_controllen <= 0)
  return 0;
 return __scm_send(sock, msg, scm);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void scm_passec(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm)
{
 char *secdata;
 u32 seclen;
 int err;

 if (test_bit(4, &sock->flags)) {
  err = security_secid_to_secctx(scm->secid, &secdata, &seclen);

  if (!err) {
   put_cmsg(msg, 1, 0x03, seclen, secdata);
   security_release_secctx(secdata, seclen);
  }
 }
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void scm_recv(struct socket *sock, struct msghdr *msg,
    struct scm_cookie *scm, int flags)
{
 if (!msg->msg_control) {
  if (test_bit(3, &sock->flags) || scm->fp)
   msg->msg_flags |= 8;
  scm_destroy(scm);
  return;
 }

 if (test_bit(3, &sock->flags)) {
  struct user_namespace *current_ns = current_user_ns();
  struct ucred ucreds = {
   .pid = scm->creds.pid,
   .uid = from_kuid_munged(current_ns, scm->creds.uid),
   .gid = from_kgid_munged(current_ns, scm->creds.gid),
  };
  put_cmsg(msg, 1, 0x02, sizeof(ucreds), &ucreds);
 }

 scm_destroy_cred(scm);

 scm_passec(sock, msg, scm);

 if (!scm->fp)
  return;

 scm_detach_fds(msg, scm);
}
# 10 "../include/linux/netlink.h" 2
# 1 "../include/uapi/linux/netlink.h" 1
# 73 "../include/uapi/linux/netlink.h"
struct sockaddr_nl {
 __kernel_sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;
};

struct nlmsghdr {
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;
};
# 145 "../include/uapi/linux/netlink.h"
struct nlmsgerr {
 int error;
 struct nlmsghdr msg;
# 157 "../include/uapi/linux/netlink.h"
};
# 171 "../include/uapi/linux/netlink.h"
enum nlmsgerr_attrs {
 NLMSGERR_ATTR_UNUSED,
 NLMSGERR_ATTR_MSG,
 NLMSGERR_ATTR_OFFS,
 NLMSGERR_ATTR_COOKIE,

 __NLMSGERR_ATTR_MAX,
 NLMSGERR_ATTR_MAX = __NLMSGERR_ATTR_MAX - 1
};
# 195 "../include/uapi/linux/netlink.h"
struct nl_pktinfo {
 __u32 group;
};

struct nl_mmap_req {
 unsigned int nm_block_size;
 unsigned int nm_block_nr;
 unsigned int nm_frame_size;
 unsigned int nm_frame_nr;
};

struct nl_mmap_hdr {
 unsigned int nm_status;
 unsigned int nm_len;
 __u32 nm_group;

 __u32 nm_pid;
 __u32 nm_uid;
 __u32 nm_gid;
};
# 232 "../include/uapi/linux/netlink.h"
enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
# 246 "../include/uapi/linux/netlink.h"
struct nlattr {
 __u16 nla_len;
 __u16 nla_type;
};
# 282 "../include/uapi/linux/netlink.h"
struct nla_bitfield32 {
 __u32 value;
 __u32 selector;
};
# 11 "../include/linux/netlink.h" 2

struct net;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct nlmsghdr *nlmsg_hdr(const struct sk_buff *skb)
{
 return (struct nlmsghdr *)skb->data;
}

enum netlink_skb_flags {
 NETLINK_SKB_MMAPED = 0x1,
 NETLINK_SKB_TX = 0x2,
 NETLINK_SKB_DELIVERED = 0x4,
 NETLINK_SKB_DST = 0x8,
};

struct netlink_skb_parms {
 struct scm_creds creds;
 __u32 portid;
 __u32 dst_group;
 __u32 flags;
 struct sock *sk;
 bool nsid_is_set;
 int nsid;
};





extern void netlink_table_grab(void);
extern void netlink_table_ungrab(void);





struct netlink_kernel_cfg {
 unsigned int groups;
 unsigned int flags;
 void (*input)(struct sk_buff *skb);
 struct mutex *cb_mutex;
 int (*bind)(struct net *net, int group);
 void (*unbind)(struct net *net, int group);
 bool (*compare)(struct net *net, struct sock *sk);
};

extern struct sock *__netlink_kernel_create(struct net *net, int unit,
         struct module *module,
         struct netlink_kernel_cfg *cfg);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sock *
netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg)
{
 return __netlink_kernel_create(net, unit, ((struct module *)0), cfg);
}
# 77 "../include/linux/netlink.h"
struct netlink_ext_ack {
 const char *_msg;
 const struct nlattr *bad_attr;
 u8 cookie[20];
 u8 cookie_len;
};
# 116 "../include/linux/netlink.h"
extern void netlink_kernel_release(struct sock *sk);
extern int __netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern int netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern void __netlink_clear_multicast_users(struct sock *sk, unsigned int group);
extern void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
   const struct netlink_ext_ack *extack);
extern int netlink_has_listeners(struct sock *sk, unsigned int group);

extern int netlink_unicast(struct sock *ssk, struct sk_buff *skb, __u32 portid, int nonblock);
extern int netlink_broadcast(struct sock *ssk, struct sk_buff *skb, __u32 portid,
        __u32 group, gfp_t allocation);
extern int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb,
 __u32 portid, __u32 group, gfp_t allocation,
 int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data),
 void *filter_data);
extern int netlink_set_err(struct sock *ssk, __u32 portid, __u32 group, int code);
extern int netlink_register_notifier(struct notifier_block *nb);
extern int netlink_unregister_notifier(struct notifier_block *nb);


struct sock *netlink_getsockbyfilp(struct file *filp);
int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
        long *timeo, struct sock *ssk);
void netlink_detachskb(struct sock *sk, struct sk_buff *skb);
int netlink_sendskb(struct sock *sk, struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff *
netlink_skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
{
 struct sk_buff *nskb;

 nskb = skb_clone(skb, gfp_mask);
 if (!nskb)
  return ((void *)0);


 if (is_vmalloc_addr(skb->head))
  nskb->destructor = skb->destructor;

 return nskb;
}
# 173 "../include/linux/netlink.h"
struct netlink_callback {
 struct sk_buff *skb;
 const struct nlmsghdr *nlh;
 int (*start)(struct netlink_callback *);
 int (*dump)(struct sk_buff * skb,
     struct netlink_callback *cb);
 int (*done)(struct netlink_callback *cb);
 void *data;

 struct module *module;
 u16 family;
 u16 min_dump_alloc;
 unsigned int prev_seq, seq;
 long args[6];
};

struct netlink_notify {
 struct net *net;
 u32 portid;
 int protocol;
};

struct nlmsghdr *
__nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq, int type, int len, int flags);

struct netlink_dump_control {
 int (*start)(struct netlink_callback *);
 int (*dump)(struct sk_buff *skb, struct netlink_callback *);
 int (*done)(struct netlink_callback *);
 void *data;
 struct module *module;
 u16 min_dump_alloc;
};

extern int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
    const struct nlmsghdr *nlh,
    struct netlink_dump_control *control);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
         const struct nlmsghdr *nlh,
         struct netlink_dump_control *control)
{
 if (!control->module)
  control->module = ((struct module *)0);

 return __netlink_dump_start(ssk, skb, nlh, control);
}

struct netlink_tap {
 struct net_device *dev;
 struct module *module;
 struct list_head list;
};

extern int netlink_add_tap(struct netlink_tap *nt);
extern int netlink_remove_tap(struct netlink_tap *nt);

bool __netlink_ns_capable(const struct netlink_skb_parms *nsp,
     struct user_namespace *ns, int cap);
bool netlink_ns_capable(const struct sk_buff *skb,
   struct user_namespace *ns, int cap);
bool netlink_capable(const struct sk_buff *skb, int cap);
bool netlink_net_capable(const struct sk_buff *skb, int cap);
# 7 "../include/uapi/linux/neighbour.h" 2

struct ndmsg {
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;
};

enum {
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 NDA_VLAN,
 NDA_PORT,
 NDA_VNI,
 NDA_IFINDEX,
 NDA_MASTER,
 NDA_LINK_NETNSID,
 NDA_SRC_VNI,
 __NDA_MAX
};
# 69 "../include/uapi/linux/neighbour.h"
struct nda_cacheinfo {
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;
};
# 101 "../include/uapi/linux/neighbour.h"
struct ndt_stats {
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;
 __u64 ndts_table_fulls;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 NDTPA_QUEUE_LENBYTES,
 NDTPA_MCAST_REPROBES,
 NDTPA_PAD,
 __NDTPA_MAX
};


struct ndtmsg {
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;
};

struct ndt_config {
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 NDTA_PAD,
 __NDTA_MAX
};
# 50 "../include/linux/netdevice.h" 2
# 1 "../include/uapi/linux/netdevice.h" 1
# 32 "../include/uapi/linux/netdevice.h"
# 1 "../include/linux/if_link.h" 1




# 1 "../include/uapi/linux/if_link.h" 1








struct rtnl_link_stats {
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;


 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

 __u32 rx_nohandler;
};


struct rtnl_link_stats64 {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 rx_errors;
 __u64 tx_errors;
 __u64 rx_dropped;
 __u64 tx_dropped;
 __u64 multicast;
 __u64 collisions;


 __u64 rx_length_errors;
 __u64 rx_over_errors;
 __u64 rx_crc_errors;
 __u64 rx_frame_errors;
 __u64 rx_fifo_errors;
 __u64 rx_missed_errors;


 __u64 tx_aborted_errors;
 __u64 tx_carrier_errors;
 __u64 tx_fifo_errors;
 __u64 tx_heartbeat_errors;
 __u64 tx_window_errors;


 __u64 rx_compressed;
 __u64 tx_compressed;

 __u64 rx_nohandler;
};


struct rtnl_link_ifmap {
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;
};
# 106 "../include/uapi/linux/if_link.h"
enum {
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 IFLA_IFALIAS,
 IFLA_NUM_VF,
 IFLA_VFINFO_LIST,
 IFLA_STATS64,
 IFLA_VF_PORTS,
 IFLA_PORT_SELF,
 IFLA_AF_SPEC,
 IFLA_GROUP,
 IFLA_NET_NS_FD,
 IFLA_EXT_MASK,
 IFLA_PROMISCUITY,

 IFLA_NUM_TX_QUEUES,
 IFLA_NUM_RX_QUEUES,
 IFLA_CARRIER,
 IFLA_PHYS_PORT_ID,
 IFLA_CARRIER_CHANGES,
 IFLA_PHYS_SWITCH_ID,
 IFLA_LINK_NETNSID,
 IFLA_PHYS_PORT_NAME,
 IFLA_PROTO_DOWN,
 IFLA_GSO_MAX_SEGS,
 IFLA_GSO_MAX_SIZE,
 IFLA_PAD,
 IFLA_XDP,
 IFLA_EVENT,
 __IFLA_MAX
};
# 174 "../include/uapi/linux/if_link.h"
enum {
 IFLA_INET_UNSPEC,
 IFLA_INET_CONF,
 __IFLA_INET_MAX,
};
# 212 "../include/uapi/linux/if_link.h"
enum {
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 IFLA_INET6_TOKEN,
 IFLA_INET6_ADDR_GEN_MODE,
 __IFLA_INET6_MAX
};



enum in6_addr_gen_mode {
 IN6_ADDR_GEN_MODE_EUI64,
 IN6_ADDR_GEN_MODE_NONE,
 IN6_ADDR_GEN_MODE_STABLE_PRIVACY,
 IN6_ADDR_GEN_MODE_RANDOM,
};



enum {
 IFLA_BR_UNSPEC,
 IFLA_BR_FORWARD_DELAY,
 IFLA_BR_HELLO_TIME,
 IFLA_BR_MAX_AGE,
 IFLA_BR_AGEING_TIME,
 IFLA_BR_STP_STATE,
 IFLA_BR_PRIORITY,
 IFLA_BR_VLAN_FILTERING,
 IFLA_BR_VLAN_PROTOCOL,
 IFLA_BR_GROUP_FWD_MASK,
 IFLA_BR_ROOT_ID,
 IFLA_BR_BRIDGE_ID,
 IFLA_BR_ROOT_PORT,
 IFLA_BR_ROOT_PATH_COST,
 IFLA_BR_TOPOLOGY_CHANGE,
 IFLA_BR_TOPOLOGY_CHANGE_DETECTED,
 IFLA_BR_HELLO_TIMER,
 IFLA_BR_TCN_TIMER,
 IFLA_BR_TOPOLOGY_CHANGE_TIMER,
 IFLA_BR_GC_TIMER,
 IFLA_BR_GROUP_ADDR,
 IFLA_BR_FDB_FLUSH,
 IFLA_BR_MCAST_ROUTER,
 IFLA_BR_MCAST_SNOOPING,
 IFLA_BR_MCAST_QUERY_USE_IFADDR,
 IFLA_BR_MCAST_QUERIER,
 IFLA_BR_MCAST_HASH_ELASTICITY,
 IFLA_BR_MCAST_HASH_MAX,
 IFLA_BR_MCAST_LAST_MEMBER_CNT,
 IFLA_BR_MCAST_STARTUP_QUERY_CNT,
 IFLA_BR_MCAST_LAST_MEMBER_INTVL,
 IFLA_BR_MCAST_MEMBERSHIP_INTVL,
 IFLA_BR_MCAST_QUERIER_INTVL,
 IFLA_BR_MCAST_QUERY_INTVL,
 IFLA_BR_MCAST_QUERY_RESPONSE_INTVL,
 IFLA_BR_MCAST_STARTUP_QUERY_INTVL,
 IFLA_BR_NF_CALL_IPTABLES,
 IFLA_BR_NF_CALL_IP6TABLES,
 IFLA_BR_NF_CALL_ARPTABLES,
 IFLA_BR_VLAN_DEFAULT_PVID,
 IFLA_BR_PAD,
 IFLA_BR_VLAN_STATS_ENABLED,
 IFLA_BR_MCAST_STATS_ENABLED,
 IFLA_BR_MCAST_IGMP_VERSION,
 IFLA_BR_MCAST_MLD_VERSION,
 __IFLA_BR_MAX,
};



struct ifla_bridge_id {
 __u8 prio[2];
 __u8 addr[6];
};

enum {
 BRIDGE_MODE_UNSPEC,
 BRIDGE_MODE_HAIRPIN,
};

enum {
 IFLA_BRPORT_UNSPEC,
 IFLA_BRPORT_STATE,
 IFLA_BRPORT_PRIORITY,
 IFLA_BRPORT_COST,
 IFLA_BRPORT_MODE,
 IFLA_BRPORT_GUARD,
 IFLA_BRPORT_PROTECT,
 IFLA_BRPORT_FAST_LEAVE,
 IFLA_BRPORT_LEARNING,
 IFLA_BRPORT_UNICAST_FLOOD,
 IFLA_BRPORT_PROXYARP,
 IFLA_BRPORT_LEARNING_SYNC,
 IFLA_BRPORT_PROXYARP_WIFI,
 IFLA_BRPORT_ROOT_ID,
 IFLA_BRPORT_BRIDGE_ID,
 IFLA_BRPORT_DESIGNATED_PORT,
 IFLA_BRPORT_DESIGNATED_COST,
 IFLA_BRPORT_ID,
 IFLA_BRPORT_NO,
 IFLA_BRPORT_TOPOLOGY_CHANGE_ACK,
 IFLA_BRPORT_CONFIG_PENDING,
 IFLA_BRPORT_MESSAGE_AGE_TIMER,
 IFLA_BRPORT_FORWARD_DELAY_TIMER,
 IFLA_BRPORT_HOLD_TIMER,
 IFLA_BRPORT_FLUSH,
 IFLA_BRPORT_MULTICAST_ROUTER,
 IFLA_BRPORT_PAD,
 IFLA_BRPORT_MCAST_FLOOD,
 IFLA_BRPORT_MCAST_TO_UCAST,
 IFLA_BRPORT_VLAN_TUNNEL,
 IFLA_BRPORT_BCAST_FLOOD,
 __IFLA_BRPORT_MAX
};


struct ifla_cacheinfo {
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;
};

enum {
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 IFLA_INFO_SLAVE_KIND,
 IFLA_INFO_SLAVE_DATA,
 __IFLA_INFO_MAX,
};





enum {
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 IFLA_VLAN_PROTOCOL,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
 __u32 flags;
 __u32 mask;
};

enum {
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping {
 __u32 from;
 __u32 to;
};


enum {
 IFLA_MACVLAN_UNSPEC,
 IFLA_MACVLAN_MODE,
 IFLA_MACVLAN_FLAGS,
 IFLA_MACVLAN_MACADDR_MODE,
 IFLA_MACVLAN_MACADDR,
 IFLA_MACVLAN_MACADDR_DATA,
 IFLA_MACVLAN_MACADDR_COUNT,
 __IFLA_MACVLAN_MAX,
};



enum macvlan_mode {
 MACVLAN_MODE_PRIVATE = 1,
 MACVLAN_MODE_VEPA = 2,
 MACVLAN_MODE_BRIDGE = 4,
 MACVLAN_MODE_PASSTHRU = 8,
 MACVLAN_MODE_SOURCE = 16,
};

enum macvlan_macaddr_mode {
 MACVLAN_MACADDR_ADD,
 MACVLAN_MACADDR_DEL,
 MACVLAN_MACADDR_FLUSH,
 MACVLAN_MACADDR_SET,
};




enum {
 IFLA_VRF_UNSPEC,
 IFLA_VRF_TABLE,
 __IFLA_VRF_MAX
};



enum {
 IFLA_VRF_PORT_UNSPEC,
 IFLA_VRF_PORT_TABLE,
 __IFLA_VRF_PORT_MAX
};




enum {
 IFLA_MACSEC_UNSPEC,
 IFLA_MACSEC_SCI,
 IFLA_MACSEC_PORT,
 IFLA_MACSEC_ICV_LEN,
 IFLA_MACSEC_CIPHER_SUITE,
 IFLA_MACSEC_WINDOW,
 IFLA_MACSEC_ENCODING_SA,
 IFLA_MACSEC_ENCRYPT,
 IFLA_MACSEC_PROTECT,
 IFLA_MACSEC_INC_SCI,
 IFLA_MACSEC_ES,
 IFLA_MACSEC_SCB,
 IFLA_MACSEC_REPLAY_PROTECT,
 IFLA_MACSEC_VALIDATION,
 IFLA_MACSEC_PAD,
 __IFLA_MACSEC_MAX,
};




enum {
 IFLA_XFRM_UNSPEC,
 IFLA_XFRM_LINK,
 IFLA_XFRM_IF_ID,
 __IFLA_XFRM_MAX
};



enum macsec_validation_type {
 MACSEC_VALIDATE_DISABLED = 0,
 MACSEC_VALIDATE_CHECK = 1,
 MACSEC_VALIDATE_STRICT = 2,
 __MACSEC_VALIDATE_END,
 MACSEC_VALIDATE_MAX = __MACSEC_VALIDATE_END - 1,
};


enum {
 IFLA_IPVLAN_UNSPEC,
 IFLA_IPVLAN_MODE,
 __IFLA_IPVLAN_MAX
};



enum ipvlan_mode {
 IPVLAN_MODE_L2 = 0,
 IPVLAN_MODE_L3,
 IPVLAN_MODE_L3S,
 IPVLAN_MODE_MAX
};


enum {
 IFLA_VXLAN_UNSPEC,
 IFLA_VXLAN_ID,
 IFLA_VXLAN_GROUP,
 IFLA_VXLAN_LINK,
 IFLA_VXLAN_LOCAL,
 IFLA_VXLAN_TTL,
 IFLA_VXLAN_TOS,
 IFLA_VXLAN_LEARNING,
 IFLA_VXLAN_AGEING,
 IFLA_VXLAN_LIMIT,
 IFLA_VXLAN_PORT_RANGE,
 IFLA_VXLAN_PROXY,
 IFLA_VXLAN_RSC,
 IFLA_VXLAN_L2MISS,
 IFLA_VXLAN_L3MISS,
 IFLA_VXLAN_PORT,
 IFLA_VXLAN_GROUP6,
 IFLA_VXLAN_LOCAL6,
 IFLA_VXLAN_UDP_CSUM,
 IFLA_VXLAN_UDP_ZERO_CSUM6_TX,
 IFLA_VXLAN_UDP_ZERO_CSUM6_RX,
 IFLA_VXLAN_REMCSUM_TX,
 IFLA_VXLAN_REMCSUM_RX,
 IFLA_VXLAN_GBP,
 IFLA_VXLAN_REMCSUM_NOPARTIAL,
 IFLA_VXLAN_COLLECT_METADATA,
 IFLA_VXLAN_LABEL,
 IFLA_VXLAN_GPE,
 __IFLA_VXLAN_MAX
};


struct ifla_vxlan_port_range {
 __be16 low;
 __be16 high;
};


enum {
 IFLA_GENEVE_UNSPEC,
 IFLA_GENEVE_ID,
 IFLA_GENEVE_REMOTE,
 IFLA_GENEVE_TTL,
 IFLA_GENEVE_TOS,
 IFLA_GENEVE_PORT,
 IFLA_GENEVE_COLLECT_METADATA,
 IFLA_GENEVE_REMOTE6,
 IFLA_GENEVE_UDP_CSUM,
 IFLA_GENEVE_UDP_ZERO_CSUM6_TX,
 IFLA_GENEVE_UDP_ZERO_CSUM6_RX,
 IFLA_GENEVE_LABEL,
 __IFLA_GENEVE_MAX
};



enum {
 IFLA_PPP_UNSPEC,
 IFLA_PPP_DEV_FD,
 __IFLA_PPP_MAX
};




enum ifla_gtp_role {
 GTP_ROLE_GGSN = 0,
 GTP_ROLE_SGSN,
};

enum {
 IFLA_GTP_UNSPEC,
 IFLA_GTP_FD0,
 IFLA_GTP_FD1,
 IFLA_GTP_PDP_HASHSIZE,
 IFLA_GTP_ROLE,
 __IFLA_GTP_MAX,
};




enum {
 IFLA_BOND_UNSPEC,
 IFLA_BOND_MODE,
 IFLA_BOND_ACTIVE_SLAVE,
 IFLA_BOND_MIIMON,
 IFLA_BOND_UPDELAY,
 IFLA_BOND_DOWNDELAY,
 IFLA_BOND_USE_CARRIER,
 IFLA_BOND_ARP_INTERVAL,
 IFLA_BOND_ARP_IP_TARGET,
 IFLA_BOND_ARP_VALIDATE,
 IFLA_BOND_ARP_ALL_TARGETS,
 IFLA_BOND_PRIMARY,
 IFLA_BOND_PRIMARY_RESELECT,
 IFLA_BOND_FAIL_OVER_MAC,
 IFLA_BOND_XMIT_HASH_POLICY,
 IFLA_BOND_RESEND_IGMP,
 IFLA_BOND_NUM_PEER_NOTIF,
 IFLA_BOND_ALL_SLAVES_ACTIVE,
 IFLA_BOND_MIN_LINKS,
 IFLA_BOND_LP_INTERVAL,
 IFLA_BOND_PACKETS_PER_SLAVE,
 IFLA_BOND_AD_LACP_RATE,
 IFLA_BOND_AD_SELECT,
 IFLA_BOND_AD_INFO,
 IFLA_BOND_AD_ACTOR_SYS_PRIO,
 IFLA_BOND_AD_USER_PORT_KEY,
 IFLA_BOND_AD_ACTOR_SYSTEM,
 IFLA_BOND_TLB_DYNAMIC_LB,
 __IFLA_BOND_MAX,
};



enum {
 IFLA_BOND_AD_INFO_UNSPEC,
 IFLA_BOND_AD_INFO_AGGREGATOR,
 IFLA_BOND_AD_INFO_NUM_PORTS,
 IFLA_BOND_AD_INFO_ACTOR_KEY,
 IFLA_BOND_AD_INFO_PARTNER_KEY,
 IFLA_BOND_AD_INFO_PARTNER_MAC,
 __IFLA_BOND_AD_INFO_MAX,
};



enum {
 IFLA_BOND_SLAVE_UNSPEC,
 IFLA_BOND_SLAVE_STATE,
 IFLA_BOND_SLAVE_MII_STATUS,
 IFLA_BOND_SLAVE_LINK_FAILURE_COUNT,
 IFLA_BOND_SLAVE_PERM_HWADDR,
 IFLA_BOND_SLAVE_QUEUE_ID,
 IFLA_BOND_SLAVE_AD_AGGREGATOR_ID,
 IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE,
 IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE,
 __IFLA_BOND_SLAVE_MAX,
};





enum {
 IFLA_VF_INFO_UNSPEC,
 IFLA_VF_INFO,
 __IFLA_VF_INFO_MAX,
};



enum {
 IFLA_VF_UNSPEC,
 IFLA_VF_MAC,
 IFLA_VF_VLAN,
 IFLA_VF_TX_RATE,
 IFLA_VF_SPOOFCHK,
 IFLA_VF_LINK_STATE,
 IFLA_VF_RATE,
 IFLA_VF_RSS_QUERY_EN,


 IFLA_VF_STATS,
 IFLA_VF_TRUST,
 IFLA_VF_IB_NODE_GUID,
 IFLA_VF_IB_PORT_GUID,
 IFLA_VF_VLAN_LIST,
 __IFLA_VF_MAX,
};



struct ifla_vf_mac {
 __u32 vf;
 __u8 mac[32];
};

struct ifla_vf_vlan {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
};

enum {
 IFLA_VF_VLAN_INFO_UNSPEC,
 IFLA_VF_VLAN_INFO,
 __IFLA_VF_VLAN_INFO_MAX,
};




struct ifla_vf_vlan_info {
 __u32 vf;
 __u32 vlan;
 __u32 qos;
 __be16 vlan_proto;
};

struct ifla_vf_tx_rate {
 __u32 vf;
 __u32 rate;
};

struct ifla_vf_rate {
 __u32 vf;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
};

struct ifla_vf_spoofchk {
 __u32 vf;
 __u32 setting;
};

struct ifla_vf_guid {
 __u32 vf;
 __u64 guid;
};

enum {
 IFLA_VF_LINK_STATE_AUTO,
 IFLA_VF_LINK_STATE_ENABLE,
 IFLA_VF_LINK_STATE_DISABLE,
 __IFLA_VF_LINK_STATE_MAX,
};

struct ifla_vf_link_state {
 __u32 vf;
 __u32 link_state;
};

struct ifla_vf_rss_query_en {
 __u32 vf;
 __u32 setting;
};

enum {
 IFLA_VF_STATS_RX_PACKETS,
 IFLA_VF_STATS_TX_PACKETS,
 IFLA_VF_STATS_RX_BYTES,
 IFLA_VF_STATS_TX_BYTES,
 IFLA_VF_STATS_BROADCAST,
 IFLA_VF_STATS_MULTICAST,
 IFLA_VF_STATS_PAD,
 __IFLA_VF_STATS_MAX,
};



struct ifla_vf_trust {
 __u32 vf;
 __u32 setting;
};
# 762 "../include/uapi/linux/if_link.h"
enum {
 IFLA_VF_PORT_UNSPEC,
 IFLA_VF_PORT,
 __IFLA_VF_PORT_MAX,
};



enum {
 IFLA_PORT_UNSPEC,
 IFLA_PORT_VF,
 IFLA_PORT_PROFILE,
 IFLA_PORT_VSI_TYPE,
 IFLA_PORT_INSTANCE_UUID,
 IFLA_PORT_HOST_UUID,
 IFLA_PORT_REQUEST,
 IFLA_PORT_RESPONSE,
 __IFLA_PORT_MAX,
};







enum {
 PORT_REQUEST_PREASSOCIATE = 0,
 PORT_REQUEST_PREASSOCIATE_RR,
 PORT_REQUEST_ASSOCIATE,
 PORT_REQUEST_DISASSOCIATE,
};

enum {
 PORT_VDP_RESPONSE_SUCCESS = 0,
 PORT_VDP_RESPONSE_INVALID_FORMAT,
 PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_VDP_RESPONSE_UNUSED_VTID,
 PORT_VDP_RESPONSE_VTID_VIOLATION,
 PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION,
 PORT_VDP_RESPONSE_OUT_OF_SYNC,

 PORT_PROFILE_RESPONSE_SUCCESS = 0x100,
 PORT_PROFILE_RESPONSE_INPROGRESS,
 PORT_PROFILE_RESPONSE_INVALID,
 PORT_PROFILE_RESPONSE_BADSTATE,
 PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_PROFILE_RESPONSE_ERROR,
};

struct ifla_port_vsi {
 __u8 vsi_mgr_id;
 __u8 vsi_type_id[3];
 __u8 vsi_type_version;
 __u8 pad[3];
};




enum {
 IFLA_IPOIB_UNSPEC,
 IFLA_IPOIB_PKEY,
 IFLA_IPOIB_MODE,
 IFLA_IPOIB_UMCAST,
 __IFLA_IPOIB_MAX
};

enum {
 IPOIB_MODE_DATAGRAM = 0,
 IPOIB_MODE_CONNECTED = 1,
};






enum {
 IFLA_HSR_UNSPEC,
 IFLA_HSR_SLAVE1,
 IFLA_HSR_SLAVE2,
 IFLA_HSR_MULTICAST_SPEC,
 IFLA_HSR_SUPERVISION_ADDR,
 IFLA_HSR_SEQ_NR,
 IFLA_HSR_VERSION,
 __IFLA_HSR_MAX,
};





struct if_stats_msg {
 __u8 family;
 __u8 pad1;
 __u16 pad2;
 __u32 ifindex;
 __u32 filter_mask;
};




enum {
 IFLA_STATS_UNSPEC,
 IFLA_STATS_LINK_64,
 IFLA_STATS_LINK_XSTATS,
 IFLA_STATS_LINK_XSTATS_SLAVE,
 IFLA_STATS_LINK_OFFLOAD_XSTATS,
 IFLA_STATS_AF_SPEC,
 __IFLA_STATS_MAX,
};
# 885 "../include/uapi/linux/if_link.h"
enum {
 LINK_XSTATS_TYPE_UNSPEC,
 LINK_XSTATS_TYPE_BRIDGE,
 __LINK_XSTATS_TYPE_MAX
};



enum {
 IFLA_OFFLOAD_XSTATS_UNSPEC,
 IFLA_OFFLOAD_XSTATS_CPU_HIT,
 __IFLA_OFFLOAD_XSTATS_MAX
};
# 913 "../include/uapi/linux/if_link.h"
enum {
 XDP_ATTACHED_NONE = 0,
 XDP_ATTACHED_DRV,
 XDP_ATTACHED_SKB,
 XDP_ATTACHED_HW,
};

enum {
 IFLA_XDP_UNSPEC,
 IFLA_XDP_FD,
 IFLA_XDP_ATTACHED,
 IFLA_XDP_FLAGS,
 IFLA_XDP_PROG_ID,
 __IFLA_XDP_MAX,
};



enum {
 IFLA_EVENT_NONE,
 IFLA_EVENT_REBOOT,
 IFLA_EVENT_FEATURES,
 IFLA_EVENT_BONDING_FAILOVER,
 IFLA_EVENT_NOTIFY_PEERS,
 IFLA_EVENT_IGMP_RESEND,
 IFLA_EVENT_BONDING_OPTIONS,
};
# 951 "../include/uapi/linux/if_link.h"
enum {
 IFLA_RMNET_UNSPEC,
 IFLA_RMNET_MUX_ID,
 IFLA_RMNET_FLAGS,
 __IFLA_RMNET_MAX,
};



struct ifla_rmnet_flags {
 __u32 flags;
 __u32 mask;
};
# 6 "../include/linux/if_link.h" 2



struct ifla_vf_stats {
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 broadcast;
 __u64 multicast;
};

struct ifla_vf_info {
 __u32 vf;
 __u8 mac[32];
 __u32 vlan;
 __u32 qos;
 __u32 spoofchk;
 __u32 linkstate;
 __u32 min_tx_rate;
 __u32 max_tx_rate;
 __u32 rss_query_en;
 __u32 trusted;
 __be16 vlan_proto;
};
# 33 "../include/uapi/linux/netdevice.h" 2
# 49 "../include/uapi/linux/netdevice.h"
enum {
        IF_PORT_UNKNOWN = 0,
        IF_PORT_10BASE2,
        IF_PORT_10BASET,
        IF_PORT_AUI,
        IF_PORT_100BASET,
        IF_PORT_100BASETX,
        IF_PORT_100BASEFX
};
# 51 "../include/linux/netdevice.h" 2
# 1 "../include/uapi/linux/if_bonding.h" 1
# 98 "../include/uapi/linux/if_bonding.h"
typedef struct ifbond {
 __s32 bond_mode;
 __s32 num_slaves;
 __s32 miimon;
} ifbond;

typedef struct ifslave {
 __s32 slave_id;
 char slave_name[16];
 __s8 link;
 __s8 state;
 __u32 link_failure_count;
} ifslave;

struct ad_info {
 __u16 aggregator_id;
 __u16 ports;
 __u16 actor_key;
 __u16 partner_key;
 __u8 partner_system[6];
};
# 52 "../include/linux/netdevice.h" 2
# 1 "../include/uapi/linux/pkt_cls.h" 1





# 1 "../include/uapi/linux/pkt_sched.h" 1
# 33 "../include/uapi/linux/pkt_sched.h"
struct tc_stats {
 __u64 bytes;
 __u32 packets;
 __u32 drops;
 __u32 overlimits;

 __u32 bps;
 __u32 pps;
 __u32 qlen;
 __u32 backlog;
};

struct tc_estimator {
 signed char interval;
 unsigned char ewma_log;
};
# 82 "../include/uapi/linux/pkt_sched.h"
enum tc_link_layer {
 TC_LINKLAYER_UNAWARE,
 TC_LINKLAYER_ETHERNET,
 TC_LINKLAYER_ATM,
};


struct tc_ratespec {
 unsigned char cell_log;
 __u8 linklayer;
 unsigned short overhead;
 short cell_align;
 unsigned short mpu;
 __u32 rate;
};



struct tc_sizespec {
 unsigned char cell_log;
 unsigned char size_log;
 short cell_align;
 int overhead;
 unsigned int linklayer;
 unsigned int mpu;
 unsigned int mtu;
 unsigned int tsize;
};

enum {
 TCA_STAB_UNSPEC,
 TCA_STAB_BASE,
 TCA_STAB_DATA,
 __TCA_STAB_MAX
};





struct tc_fifo_qopt {
 __u32 limit;
};






struct tc_prio_qopt {
 int bands;
 __u8 priomap[15 +1];
 __u8 enable_flow;
};





struct tc_multiq_qopt {
 __u16 bands;
 __u16 max_bands;
};
# 153 "../include/uapi/linux/pkt_sched.h"
struct tc_plug_qopt {
# 163 "../include/uapi/linux/pkt_sched.h"
 int action;
 __u32 limit;
};



struct tc_tbf_qopt {
 struct tc_ratespec rate;
 struct tc_ratespec peakrate;
 __u32 limit;
 __u32 buffer;
 __u32 mtu;
};

enum {
 TCA_TBF_UNSPEC,
 TCA_TBF_PARMS,
 TCA_TBF_RTAB,
 TCA_TBF_PTAB,
 TCA_TBF_RATE64,
 TCA_TBF_PRATE64,
 TCA_TBF_BURST,
 TCA_TBF_PBURST,
 TCA_TBF_PAD,
 __TCA_TBF_MAX,
};
# 199 "../include/uapi/linux/pkt_sched.h"
struct tc_sfq_qopt {
 unsigned quantum;
 int perturb_period;
 __u32 limit;
 unsigned divisor;
 unsigned flows;
};

struct tc_sfqred_stats {
 __u32 prob_drop;
 __u32 forced_drop;
 __u32 prob_mark;
 __u32 forced_mark;
 __u32 prob_mark_head;
 __u32 forced_mark_head;
};

struct tc_sfq_qopt_v1 {
 struct tc_sfq_qopt v0;
 unsigned int depth;
 unsigned int headdrop;

 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;
 __u32 max_P;

 struct tc_sfqred_stats stats;
};


struct tc_sfq_xstats {
 __s32 allot;
};



enum {
 TCA_RED_UNSPEC,
 TCA_RED_PARMS,
 TCA_RED_STAB,
 TCA_RED_MAX_P,
 __TCA_RED_MAX,
};



struct tc_red_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;



};

struct tc_red_xstats {
 __u32 early;
 __u32 pdrop;
 __u32 other;
 __u32 marked;
};





enum {
       TCA_GRED_UNSPEC,
       TCA_GRED_PARMS,
       TCA_GRED_STAB,
       TCA_GRED_DPS,
       TCA_GRED_MAX_P,
       TCA_GRED_LIMIT,
       __TCA_GRED_MAX,
};



struct tc_gred_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 __u32 DP;
 __u32 backlog;
 __u32 qave;
 __u32 forced;
 __u32 early;
 __u32 other;
 __u32 pdrop;
 __u8 Wlog;
 __u8 Plog;
 __u8 Scell_log;
 __u8 prio;
 __u32 packets;
 __u32 bytesin;
};


struct tc_gred_sopt {
 __u32 DPs;
 __u32 def_DP;
 __u8 grio;
 __u8 flags;
 __u16 pad1;
};



enum {
 TCA_CHOKE_UNSPEC,
 TCA_CHOKE_PARMS,
 TCA_CHOKE_STAB,
 TCA_CHOKE_MAX_P,
 __TCA_CHOKE_MAX,
};



struct tc_choke_qopt {
 __u32 limit;
 __u32 qth_min;
 __u32 qth_max;
 unsigned char Wlog;
 unsigned char Plog;
 unsigned char Scell_log;
 unsigned char flags;
};

struct tc_choke_xstats {
 __u32 early;
 __u32 pdrop;
 __u32 other;
 __u32 marked;
 __u32 matched;
};






struct tc_htb_opt {
 struct tc_ratespec rate;
 struct tc_ratespec ceil;
 __u32 buffer;
 __u32 cbuffer;
 __u32 quantum;
 __u32 level;
 __u32 prio;
};
struct tc_htb_glob {
 __u32 version;
     __u32 rate2quantum;
     __u32 defcls;
 __u32 debug;


 __u32 direct_pkts;
};
enum {
 TCA_HTB_UNSPEC,
 TCA_HTB_PARMS,
 TCA_HTB_INIT,
 TCA_HTB_CTAB,
 TCA_HTB_RTAB,
 TCA_HTB_DIRECT_QLEN,
 TCA_HTB_RATE64,
 TCA_HTB_CEIL64,
 TCA_HTB_PAD,
 __TCA_HTB_MAX,
};



struct tc_htb_xstats {
 __u32 lends;
 __u32 borrows;
 __u32 giants;
 __u32 tokens;
 __u32 ctokens;
};



struct tc_hfsc_qopt {
 __u16 defcls;
};

struct tc_service_curve {
 __u32 m1;
 __u32 d;
 __u32 m2;
};

struct tc_hfsc_stats {
 __u64 work;
 __u64 rtwork;
 __u32 period;
 __u32 level;
};

enum {
 TCA_HFSC_UNSPEC,
 TCA_HFSC_RSC,
 TCA_HFSC_FSC,
 TCA_HFSC_USC,
 __TCA_HFSC_MAX,
};
# 426 "../include/uapi/linux/pkt_sched.h"
struct tc_cbq_lssopt {
 unsigned char change;
 unsigned char flags;


 unsigned char ewma_log;
 unsigned char level;






 __u32 maxidle;
 __u32 minidle;
 __u32 offtime;
 __u32 avpkt;
};

struct tc_cbq_wrropt {
 unsigned char flags;
 unsigned char priority;
 unsigned char cpriority;
 unsigned char __reserved;
 __u32 allot;
 __u32 weight;
};

struct tc_cbq_ovl {
 unsigned char strategy;





 unsigned char priority2;
 __u16 pad;
 __u32 penalty;
};

struct tc_cbq_police {
 unsigned char police;
 unsigned char __res1;
 unsigned short __res2;
};

struct tc_cbq_fopt {
 __u32 split;
 __u32 defmap;
 __u32 defchange;
};

struct tc_cbq_xstats {
 __u32 borrows;
 __u32 overactions;
 __s32 avgidle;
 __s32 undertime;
};

enum {
 TCA_CBQ_UNSPEC,
 TCA_CBQ_LSSOPT,
 TCA_CBQ_WRROPT,
 TCA_CBQ_FOPT,
 TCA_CBQ_OVL_STRATEGY,
 TCA_CBQ_RATE,
 TCA_CBQ_RTAB,
 TCA_CBQ_POLICE,
 __TCA_CBQ_MAX,
};





enum {
 TCA_DSMARK_UNSPEC,
 TCA_DSMARK_INDICES,
 TCA_DSMARK_DEFAULT_INDEX,
 TCA_DSMARK_SET_TC_INDEX,
 TCA_DSMARK_MASK,
 TCA_DSMARK_VALUE,
 __TCA_DSMARK_MAX,
};





enum {
 TCA_ATM_UNSPEC,
 TCA_ATM_FD,
 TCA_ATM_PTR,
 TCA_ATM_HDR,
 TCA_ATM_EXCESS,
 TCA_ATM_ADDR,
 TCA_ATM_STATE,
 __TCA_ATM_MAX,
};





enum {
 TCA_NETEM_UNSPEC,
 TCA_NETEM_CORR,
 TCA_NETEM_DELAY_DIST,
 TCA_NETEM_REORDER,
 TCA_NETEM_CORRUPT,
 TCA_NETEM_LOSS,
 TCA_NETEM_RATE,
 TCA_NETEM_ECN,
 TCA_NETEM_RATE64,
 TCA_NETEM_PAD,
 __TCA_NETEM_MAX,
};



struct tc_netem_qopt {
 __u32 latency;
 __u32 limit;
 __u32 loss;
 __u32 gap;
 __u32 duplicate;
 __u32 jitter;
};

struct tc_netem_corr {
 __u32 delay_corr;
 __u32 loss_corr;
 __u32 dup_corr;
};

struct tc_netem_reorder {
 __u32 probability;
 __u32 correlation;
};

struct tc_netem_corrupt {
 __u32 probability;
 __u32 correlation;
};

struct tc_netem_rate {
 __u32 rate;
 __s32 packet_overhead;
 __u32 cell_size;
 __s32 cell_overhead;
};

enum {
 NETEM_LOSS_UNSPEC,
 NETEM_LOSS_GI,
 NETEM_LOSS_GE,
 __NETEM_LOSS_MAX
};



struct tc_netem_gimodel {
 __u32 p13;
 __u32 p31;
 __u32 p32;
 __u32 p14;
 __u32 p23;
};


struct tc_netem_gemodel {
 __u32 p;
 __u32 r;
 __u32 h;
 __u32 k1;
};






enum {
 TCA_DRR_UNSPEC,
 TCA_DRR_QUANTUM,
 __TCA_DRR_MAX
};



struct tc_drr_stats {
 __u32 deficit;
};





enum {
 TC_MQPRIO_HW_OFFLOAD_NONE,
 TC_MQPRIO_HW_OFFLOAD_TCS,
 __TC_MQPRIO_HW_OFFLOAD_MAX
};



struct tc_mqprio_qopt {
 __u8 num_tc;
 __u8 prio_tc_map[15 + 1];
 __u8 hw;
 __u16 count[16];
 __u16 offset[16];
};



enum {
 TCA_SFB_UNSPEC,
 TCA_SFB_PARMS,
 __TCA_SFB_MAX,
};






struct tc_sfb_qopt {
 __u32 rehash_interval;
 __u32 warmup_time;
 __u32 max;
 __u32 bin_size;
 __u32 increment;
 __u32 decrement;
 __u32 limit;
 __u32 penalty_rate;
 __u32 penalty_burst;
};

struct tc_sfb_xstats {
 __u32 earlydrop;
 __u32 penaltydrop;
 __u32 bucketdrop;
 __u32 queuedrop;
 __u32 childdrop;
 __u32 marked;
 __u32 maxqlen;
 __u32 maxprob;
 __u32 avgprob;
};




enum {
 TCA_QFQ_UNSPEC,
 TCA_QFQ_WEIGHT,
 TCA_QFQ_LMAX,
 __TCA_QFQ_MAX
};



struct tc_qfq_stats {
 __u32 weight;
 __u32 lmax;
};



enum {
 TCA_CODEL_UNSPEC,
 TCA_CODEL_TARGET,
 TCA_CODEL_LIMIT,
 TCA_CODEL_INTERVAL,
 TCA_CODEL_ECN,
 TCA_CODEL_CE_THRESHOLD,
 __TCA_CODEL_MAX
};



struct tc_codel_xstats {
 __u32 maxpacket;
 __u32 count;


 __u32 lastcount;
 __u32 ldelay;
 __s32 drop_next;
 __u32 drop_overlimit;
 __u32 ecn_mark;
 __u32 dropping;
 __u32 ce_mark;
};



enum {
 TCA_FQ_CODEL_UNSPEC,
 TCA_FQ_CODEL_TARGET,
 TCA_FQ_CODEL_LIMIT,
 TCA_FQ_CODEL_INTERVAL,
 TCA_FQ_CODEL_ECN,
 TCA_FQ_CODEL_FLOWS,
 TCA_FQ_CODEL_QUANTUM,
 TCA_FQ_CODEL_CE_THRESHOLD,
 TCA_FQ_CODEL_DROP_BATCH_SIZE,
 TCA_FQ_CODEL_MEMORY_LIMIT,
 __TCA_FQ_CODEL_MAX
};



enum {
 TCA_FQ_CODEL_XSTATS_QDISC,
 TCA_FQ_CODEL_XSTATS_CLASS,
};

struct tc_fq_codel_qd_stats {
 __u32 maxpacket;
 __u32 drop_overlimit;


 __u32 ecn_mark;


 __u32 new_flow_count;


 __u32 new_flows_len;
 __u32 old_flows_len;
 __u32 ce_mark;
 __u32 memory_usage;
 __u32 drop_overmemory;
};

struct tc_fq_codel_cl_stats {
 __s32 deficit;
 __u32 ldelay;


 __u32 count;
 __u32 lastcount;
 __u32 dropping;
 __s32 drop_next;
};

struct tc_fq_codel_xstats {
 __u32 type;
 union {
  struct tc_fq_codel_qd_stats qdisc_stats;
  struct tc_fq_codel_cl_stats class_stats;
 };
};



enum {
 TCA_FQ_UNSPEC,

 TCA_FQ_PLIMIT,

 TCA_FQ_FLOW_PLIMIT,

 TCA_FQ_QUANTUM,

 TCA_FQ_INITIAL_QUANTUM,

 TCA_FQ_RATE_ENABLE,

 TCA_FQ_FLOW_DEFAULT_RATE,

 TCA_FQ_FLOW_MAX_RATE,

 TCA_FQ_BUCKETS_LOG,

 TCA_FQ_FLOW_REFILL_DELAY,

 TCA_FQ_ORPHAN_MASK,

 TCA_FQ_LOW_RATE_THRESHOLD,

 __TCA_FQ_MAX
};



struct tc_fq_qd_stats {
 __u64 gc_flows;
 __u64 highprio_packets;
 __u64 tcp_retrans;
 __u64 throttled;
 __u64 flows_plimit;
 __u64 pkts_too_long;
 __u64 allocation_errors;
 __s64 time_next_delayed_flow;
 __u32 flows;
 __u32 inactive_flows;
 __u32 throttled_flows;
 __u32 unthrottle_latency_ns;
};



enum {
 TCA_HHF_UNSPEC,
 TCA_HHF_BACKLOG_LIMIT,
 TCA_HHF_QUANTUM,
 TCA_HHF_HH_FLOWS_LIMIT,
 TCA_HHF_RESET_TIMEOUT,
 TCA_HHF_ADMIT_BYTES,
 TCA_HHF_EVICT_TIMEOUT,
 TCA_HHF_NON_HH_WEIGHT,
 __TCA_HHF_MAX
};



struct tc_hhf_xstats {
 __u32 drop_overlimit;


 __u32 hh_overlimit;
 __u32 hh_tot_count;
 __u32 hh_cur_count;
};


enum {
 TCA_PIE_UNSPEC,
 TCA_PIE_TARGET,
 TCA_PIE_LIMIT,
 TCA_PIE_TUPDATE,
 TCA_PIE_ALPHA,
 TCA_PIE_BETA,
 TCA_PIE_ECN,
 TCA_PIE_BYTEMODE,
 __TCA_PIE_MAX
};


struct tc_pie_xstats {
 __u32 prob;
 __u32 delay;
 __u32 avg_dq_rate;
 __u32 packets_in;
 __u32 dropped;
 __u32 overlimit;
 __u32 maxq;
 __u32 ecn_mark;
};
# 7 "../include/uapi/linux/pkt_cls.h" 2




enum {
 TCA_ACT_UNSPEC,
 TCA_ACT_KIND,
 TCA_ACT_OPTIONS,
 TCA_ACT_INDEX,
 TCA_ACT_STATS,
 TCA_ACT_PAD,
 TCA_ACT_COOKIE,
 __TCA_ACT_MAX
};
# 65 "../include/uapi/linux/pkt_cls.h"
enum {
 TCA_ID_UNSPEC=0,
 TCA_ID_POLICE=1,

 __TCA_ID_MAX=255
};



struct tc_police {
 __u32 index;
 int action;






 __u32 limit;
 __u32 burst;
 __u32 mtu;
 struct tc_ratespec rate;
 struct tc_ratespec peakrate;
 int refcnt;
 int bindcnt;
 __u32 capab;
};

struct tcf_t {
 __u64 install;
 __u64 lastuse;
 __u64 expires;
 __u64 firstuse;
};

struct tc_cnt {
 int refcnt;
 int bindcnt;
};
# 112 "../include/uapi/linux/pkt_cls.h"
enum {
 TCA_POLICE_UNSPEC,
 TCA_POLICE_TBF,
 TCA_POLICE_RATE,
 TCA_POLICE_PEAKRATE,
 TCA_POLICE_AVRATE,
 TCA_POLICE_RESULT,
 TCA_POLICE_TM,
 TCA_POLICE_PAD,
 __TCA_POLICE_MAX

};
# 143 "../include/uapi/linux/pkt_cls.h"
enum {
 TCA_U32_UNSPEC,
 TCA_U32_CLASSID,
 TCA_U32_HASH,
 TCA_U32_LINK,
 TCA_U32_DIVISOR,
 TCA_U32_SEL,
 TCA_U32_POLICE,
 TCA_U32_ACT,
 TCA_U32_INDEV,
 TCA_U32_PCNT,
 TCA_U32_MARK,
 TCA_U32_FLAGS,
 TCA_U32_PAD,
 __TCA_U32_MAX
};



struct tc_u32_key {
 __be32 mask;
 __be32 val;
 int off;
 int offmask;
};

struct tc_u32_sel {
 unsigned char flags;
 unsigned char offshift;
 unsigned char nkeys;

 __be16 offmask;
 __u16 off;
 short offoff;

 short hoff;
 __be32 hmask;
 struct tc_u32_key keys[0];
};

struct tc_u32_mark {
 __u32 val;
 __u32 mask;
 __u32 success;
};

struct tc_u32_pcnt {
 __u64 rcnt;
 __u64 rhit;
 __u64 kcnts[0];
};
# 207 "../include/uapi/linux/pkt_cls.h"
enum {
 TCA_RSVP_UNSPEC,
 TCA_RSVP_CLASSID,
 TCA_RSVP_DST,
 TCA_RSVP_SRC,
 TCA_RSVP_PINFO,
 TCA_RSVP_POLICE,
 TCA_RSVP_ACT,
 __TCA_RSVP_MAX
};



struct tc_rsvp_gpi {
 __u32 key;
 __u32 mask;
 int offset;
};

struct tc_rsvp_pinfo {
 struct tc_rsvp_gpi dpi;
 struct tc_rsvp_gpi spi;
 __u8 protocol;
 __u8 tunnelid;
 __u8 tunnelhdr;
 __u8 pad;
};



enum {
 TCA_ROUTE4_UNSPEC,
 TCA_ROUTE4_CLASSID,
 TCA_ROUTE4_TO,
 TCA_ROUTE4_FROM,
 TCA_ROUTE4_IIF,
 TCA_ROUTE4_POLICE,
 TCA_ROUTE4_ACT,
 __TCA_ROUTE4_MAX
};






enum {
 TCA_FW_UNSPEC,
 TCA_FW_CLASSID,
 TCA_FW_POLICE,
 TCA_FW_INDEV,
 TCA_FW_ACT,
 TCA_FW_MASK,
 __TCA_FW_MAX
};





enum {
 TCA_TCINDEX_UNSPEC,
 TCA_TCINDEX_HASH,
 TCA_TCINDEX_MASK,
 TCA_TCINDEX_SHIFT,
 TCA_TCINDEX_FALL_THROUGH,
 TCA_TCINDEX_CLASSID,
 TCA_TCINDEX_POLICE,
 TCA_TCINDEX_ACT,
 __TCA_TCINDEX_MAX
};





enum {
 FLOW_KEY_SRC,
 FLOW_KEY_DST,
 FLOW_KEY_PROTO,
 FLOW_KEY_PROTO_SRC,
 FLOW_KEY_PROTO_DST,
 FLOW_KEY_IIF,
 FLOW_KEY_PRIORITY,
 FLOW_KEY_MARK,
 FLOW_KEY_NFCT,
 FLOW_KEY_NFCT_SRC,
 FLOW_KEY_NFCT_DST,
 FLOW_KEY_NFCT_PROTO_SRC,
 FLOW_KEY_NFCT_PROTO_DST,
 FLOW_KEY_RTCLASSID,
 FLOW_KEY_SKUID,
 FLOW_KEY_SKGID,
 FLOW_KEY_VLAN_TAG,
 FLOW_KEY_RXHASH,
 __FLOW_KEY_MAX,
};



enum {
 FLOW_MODE_MAP,
 FLOW_MODE_HASH,
};

enum {
 TCA_FLOW_UNSPEC,
 TCA_FLOW_KEYS,
 TCA_FLOW_MODE,
 TCA_FLOW_BASECLASS,
 TCA_FLOW_RSHIFT,
 TCA_FLOW_ADDEND,
 TCA_FLOW_MASK,
 TCA_FLOW_XOR,
 TCA_FLOW_DIVISOR,
 TCA_FLOW_ACT,
 TCA_FLOW_POLICE,
 TCA_FLOW_EMATCHES,
 TCA_FLOW_PERTURB,
 __TCA_FLOW_MAX
};





enum {
 TCA_BASIC_UNSPEC,
 TCA_BASIC_CLASSID,
 TCA_BASIC_EMATCHES,
 TCA_BASIC_ACT,
 TCA_BASIC_POLICE,
 __TCA_BASIC_MAX
};






enum {
 TCA_CGROUP_UNSPEC,
 TCA_CGROUP_ACT,
 TCA_CGROUP_POLICE,
 TCA_CGROUP_EMATCHES,
 __TCA_CGROUP_MAX,
};







enum {
 TCA_BPF_UNSPEC,
 TCA_BPF_ACT,
 TCA_BPF_POLICE,
 TCA_BPF_CLASSID,
 TCA_BPF_OPS_LEN,
 TCA_BPF_OPS,
 TCA_BPF_FD,
 TCA_BPF_NAME,
 TCA_BPF_FLAGS,
 TCA_BPF_FLAGS_GEN,
 TCA_BPF_TAG,
 TCA_BPF_ID,
 __TCA_BPF_MAX,
};





enum {
 TCA_FLOWER_UNSPEC,
 TCA_FLOWER_CLASSID,
 TCA_FLOWER_INDEV,
 TCA_FLOWER_ACT,
 TCA_FLOWER_KEY_ETH_DST,
 TCA_FLOWER_KEY_ETH_DST_MASK,
 TCA_FLOWER_KEY_ETH_SRC,
 TCA_FLOWER_KEY_ETH_SRC_MASK,
 TCA_FLOWER_KEY_ETH_TYPE,
 TCA_FLOWER_KEY_IP_PROTO,
 TCA_FLOWER_KEY_IPV4_SRC,
 TCA_FLOWER_KEY_IPV4_SRC_MASK,
 TCA_FLOWER_KEY_IPV4_DST,
 TCA_FLOWER_KEY_IPV4_DST_MASK,
 TCA_FLOWER_KEY_IPV6_SRC,
 TCA_FLOWER_KEY_IPV6_SRC_MASK,
 TCA_FLOWER_KEY_IPV6_DST,
 TCA_FLOWER_KEY_IPV6_DST_MASK,
 TCA_FLOWER_KEY_TCP_SRC,
 TCA_FLOWER_KEY_TCP_DST,
 TCA_FLOWER_KEY_UDP_SRC,
 TCA_FLOWER_KEY_UDP_DST,

 TCA_FLOWER_FLAGS,
 TCA_FLOWER_KEY_VLAN_ID,
 TCA_FLOWER_KEY_VLAN_PRIO,
 TCA_FLOWER_KEY_VLAN_ETH_TYPE,

 TCA_FLOWER_KEY_ENC_KEY_ID,
 TCA_FLOWER_KEY_ENC_IPV4_SRC,
 TCA_FLOWER_KEY_ENC_IPV4_SRC_MASK,
 TCA_FLOWER_KEY_ENC_IPV4_DST,
 TCA_FLOWER_KEY_ENC_IPV4_DST_MASK,
 TCA_FLOWER_KEY_ENC_IPV6_SRC,
 TCA_FLOWER_KEY_ENC_IPV6_SRC_MASK,
 TCA_FLOWER_KEY_ENC_IPV6_DST,
 TCA_FLOWER_KEY_ENC_IPV6_DST_MASK,

 TCA_FLOWER_KEY_TCP_SRC_MASK,
 TCA_FLOWER_KEY_TCP_DST_MASK,
 TCA_FLOWER_KEY_UDP_SRC_MASK,
 TCA_FLOWER_KEY_UDP_DST_MASK,
 TCA_FLOWER_KEY_SCTP_SRC_MASK,
 TCA_FLOWER_KEY_SCTP_DST_MASK,

 TCA_FLOWER_KEY_SCTP_SRC,
 TCA_FLOWER_KEY_SCTP_DST,

 TCA_FLOWER_KEY_ENC_UDP_SRC_PORT,
 TCA_FLOWER_KEY_ENC_UDP_SRC_PORT_MASK,
 TCA_FLOWER_KEY_ENC_UDP_DST_PORT,
 TCA_FLOWER_KEY_ENC_UDP_DST_PORT_MASK,

 TCA_FLOWER_KEY_FLAGS,
 TCA_FLOWER_KEY_FLAGS_MASK,

 TCA_FLOWER_KEY_ICMPV4_CODE,
 TCA_FLOWER_KEY_ICMPV4_CODE_MASK,
 TCA_FLOWER_KEY_ICMPV4_TYPE,
 TCA_FLOWER_KEY_ICMPV4_TYPE_MASK,
 TCA_FLOWER_KEY_ICMPV6_CODE,
 TCA_FLOWER_KEY_ICMPV6_CODE_MASK,
 TCA_FLOWER_KEY_ICMPV6_TYPE,
 TCA_FLOWER_KEY_ICMPV6_TYPE_MASK,

 TCA_FLOWER_KEY_ARP_SIP,
 TCA_FLOWER_KEY_ARP_SIP_MASK,
 TCA_FLOWER_KEY_ARP_TIP,
 TCA_FLOWER_KEY_ARP_TIP_MASK,
 TCA_FLOWER_KEY_ARP_OP,
 TCA_FLOWER_KEY_ARP_OP_MASK,
 TCA_FLOWER_KEY_ARP_SHA,
 TCA_FLOWER_KEY_ARP_SHA_MASK,
 TCA_FLOWER_KEY_ARP_THA,
 TCA_FLOWER_KEY_ARP_THA_MASK,

 TCA_FLOWER_KEY_MPLS_TTL,
 TCA_FLOWER_KEY_MPLS_BOS,
 TCA_FLOWER_KEY_MPLS_TC,
 TCA_FLOWER_KEY_MPLS_LABEL,

 TCA_FLOWER_KEY_TCP_FLAGS,
 TCA_FLOWER_KEY_TCP_FLAGS_MASK,

 TCA_FLOWER_KEY_IP_TOS,
 TCA_FLOWER_KEY_IP_TOS_MASK,
 TCA_FLOWER_KEY_IP_TTL,
 TCA_FLOWER_KEY_IP_TTL_MASK,

 __TCA_FLOWER_MAX,
};



enum {
 TCA_FLOWER_KEY_FLAGS_IS_FRAGMENT = (1 << 0),
};



enum {
 TCA_MATCHALL_UNSPEC,
 TCA_MATCHALL_CLASSID,
 TCA_MATCHALL_ACT,
 TCA_MATCHALL_FLAGS,
 __TCA_MATCHALL_MAX,
};





struct tcf_ematch_tree_hdr {
 __u16 nmatches;
 __u16 progid;
};

enum {
 TCA_EMATCH_TREE_UNSPEC,
 TCA_EMATCH_TREE_HDR,
 TCA_EMATCH_TREE_LIST,
 __TCA_EMATCH_TREE_MAX
};


struct tcf_ematch_hdr {
 __u16 matchid;
 __u16 kind;
 __u16 flags;
 __u16 pad;
};
# 537 "../include/uapi/linux/pkt_cls.h"
enum {
 TCF_LAYER_LINK,
 TCF_LAYER_NETWORK,
 TCF_LAYER_TRANSPORT,
 __TCF_LAYER_MAX
};
# 560 "../include/uapi/linux/pkt_cls.h"
enum {
 TCF_EM_PROG_TC
};

enum {
 TCF_EM_OPND_EQ,
 TCF_EM_OPND_GT,
 TCF_EM_OPND_LT
};
# 53 "../include/linux/netdevice.h" 2
# 1 "../include/linux/hashtable.h" 1
# 34 "../include/linux/hashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __hash_init(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  ((&ht[i])->first = ((void *)0));
}
# 76 "../include/linux/hashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool hash_hashed(struct hlist_node *node)
{
 return !hlist_unhashed(node);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __hash_empty(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  if (!hlist_empty(&ht[i]))
   return false;

 return true;
}
# 105 "../include/linux/hashtable.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hash_del(struct hlist_node *node)
{
 hlist_del_init(node);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void hash_del_rcu(struct hlist_node *node)
{
 hlist_del_init_rcu(node);
}
# 54 "../include/linux/netdevice.h" 2

struct netpoll_info;
struct device;
struct phy_device;
struct dsa_switch_tree;
struct macsec_context;


struct wireless_dev;

struct wpan_dev;
struct mpls_dev;

struct udp_tunnel_info;
struct bpf_prog;
struct xdp_buff;

void netdev_set_default_ethtool_ops(struct net_device *dev,
        const struct ethtool_ops *ops);
# 110 "../include/linux/netdevice.h"
enum netdev_tx {
 __NETDEV_TX_MIN = (-((int)(~0U>>1)) - 1),
 NETDEV_TX_OK = 0x00,
 NETDEV_TX_BUSY = 0x10,
};
typedef enum netdev_tx netdev_tx_t;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dev_xmit_complete(int rc)
{






 if (__builtin_expect(!!(rc < 0x0f), 1))
  return true;

 return false;
}
# 164 "../include/linux/netdevice.h"
struct net_device_stats {
 unsigned long rx_packets;
 unsigned long tx_packets;
 unsigned long rx_bytes;
 unsigned long tx_bytes;
 unsigned long rx_errors;
 unsigned long tx_errors;
 unsigned long rx_dropped;
 unsigned long tx_dropped;
 unsigned long multicast;
 unsigned long collisions;
 unsigned long rx_length_errors;
 unsigned long rx_over_errors;
 unsigned long rx_crc_errors;
 unsigned long rx_frame_errors;
 unsigned long rx_fifo_errors;
 unsigned long rx_missed_errors;
 unsigned long tx_aborted_errors;
 unsigned long tx_carrier_errors;
 unsigned long tx_fifo_errors;
 unsigned long tx_heartbeat_errors;
 unsigned long tx_window_errors;
 unsigned long rx_compressed;
 unsigned long tx_compressed;
};






# 1 "../include/linux/static_key.h" 1
# 196 "../include/linux/netdevice.h" 2
extern struct static_key rps_needed;
extern struct static_key rfs_needed;


struct neighbour;
struct neigh_parms;
struct sk_buff;

struct netdev_hw_addr {
 struct list_head list;
 unsigned char addr[32];
 unsigned char type;





 bool global_use;
 int sync_cnt;
 int refcount;
 int synced;
 struct callback_head callback_head;
};

struct netdev_hw_addr_list {
 struct list_head list;
 int count;
};
# 240 "../include/linux/netdevice.h"
struct hh_cache {
 unsigned int hh_len;
 seqlock_t hh_lock;







 unsigned long hh_data[(((96)+(16 -1))&~(16 - 1)) / sizeof(long)];
};
# 266 "../include/linux/netdevice.h"
struct header_ops {
 int (*create) (struct sk_buff *skb, struct net_device *dev,
      unsigned short type, const void *daddr,
      const void *saddr, unsigned int len);
 int (*parse)(const struct sk_buff *skb, unsigned char *haddr);
 int (*cache)(const struct neighbour *neigh, struct hh_cache *hh, __be16 type);
 void (*cache_update)(struct hh_cache *hh,
    const struct net_device *dev,
    const unsigned char *haddr);
 bool (*validate)(const char *ll_header, unsigned int len);
};






enum netdev_state_t {
 __LINK_STATE_START,
 __LINK_STATE_PRESENT,
 __LINK_STATE_NOCARRIER,
 __LINK_STATE_LINKWATCH_PENDING,
 __LINK_STATE_DORMANT,
};






struct netdev_boot_setup {
 char name[16];
 struct ifmap map;
};


int __attribute__ ((__section__(".init.text"))) netdev_boot_setup(char *str);




struct napi_struct {






 struct list_head poll_list;

 unsigned long state;
 int weight;
 unsigned int gro_count;
 int (*poll)(struct napi_struct *, int);



 struct net_device *dev;
 struct sk_buff *gro_list;
 struct sk_buff *skb;
 struct hrtimer timer;
 struct list_head dev_list;
 struct hlist_node napi_hash_node;
 unsigned int napi_id;
};

enum {
 NAPI_STATE_SCHED,
 NAPI_STATE_MISSED,
 NAPI_STATE_DISABLE,
 NAPI_STATE_NPSVC,
 NAPI_STATE_HASHED,
 NAPI_STATE_NO_BUSY_POLL,
 NAPI_STATE_IN_BUSY_POLL,
};

enum {
 NAPIF_STATE_SCHED = (1UL << (NAPI_STATE_SCHED)),
 NAPIF_STATE_MISSED = (1UL << (NAPI_STATE_MISSED)),
 NAPIF_STATE_DISABLE = (1UL << (NAPI_STATE_DISABLE)),
 NAPIF_STATE_NPSVC = (1UL << (NAPI_STATE_NPSVC)),
 NAPIF_STATE_HASHED = (1UL << (NAPI_STATE_HASHED)),
 NAPIF_STATE_NO_BUSY_POLL = (1UL << (NAPI_STATE_NO_BUSY_POLL)),
 NAPIF_STATE_IN_BUSY_POLL = (1UL << (NAPI_STATE_IN_BUSY_POLL)),
};

enum gro_result {
 GRO_MERGED,
 GRO_MERGED_FREE,
 GRO_HELD,
 GRO_NORMAL,
 GRO_DROP,
 GRO_CONSUMED,
};
typedef enum gro_result gro_result_t;
# 403 "../include/linux/netdevice.h"
enum rx_handler_result {
 RX_HANDLER_CONSUMED,
 RX_HANDLER_ANOTHER,
 RX_HANDLER_EXACT,
 RX_HANDLER_PASS,
};
typedef enum rx_handler_result rx_handler_result_t;
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **pskb);

void __napi_schedule(struct napi_struct *n);
void __napi_schedule_irqoff(struct napi_struct *n);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool napi_disable_pending(struct napi_struct *n)
{
 return test_bit(NAPI_STATE_DISABLE, &n->state);
}

bool napi_schedule_prep(struct napi_struct *n);
# 429 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void napi_schedule(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule(n);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void napi_schedule_irqoff(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule_irqoff(n);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool napi_reschedule(struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __napi_schedule(napi);
  return true;
 }
 return false;
}

bool napi_complete_done(struct napi_struct *n, int work_done);
# 466 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool napi_complete(struct napi_struct *n)
{
 return napi_complete_done(n, 0);
}
# 483 "../include/linux/netdevice.h"
bool napi_hash_del(struct napi_struct *napi);
# 492 "../include/linux/netdevice.h"
void napi_disable(struct napi_struct *n);
# 501 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void napi_enable(struct napi_struct *n)
{
 do { if (__builtin_expect(!!(!test_bit(NAPI_STATE_SCHED, &n->state)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/netdevice.h\"; .popsection; .long 2b - 0b; .short 503; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 asm volatile("dmb " "ish" : : : "memory");
 clear_bit(NAPI_STATE_SCHED, &n->state);
 clear_bit(NAPI_STATE_NPSVC, &n->state);
}
# 517 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void napi_synchronize(const struct napi_struct *n)
{
 if (1)
  while (test_bit(NAPI_STATE_SCHED, &n->state))
   msleep(1);
 else
  __asm__ __volatile__("": : :"memory");
}

enum netdev_queue_state_t {
 __QUEUE_STATE_DRV_XOFF,
 __QUEUE_STATE_STACK_XOFF,
 __QUEUE_STATE_FROZEN,
};
# 552 "../include/linux/netdevice.h"
struct netdev_queue {



 struct net_device *dev;
 struct Qdisc *qdisc;
 struct Qdisc *qdisc_sleeping;

 struct kobject kobj;




 unsigned long tx_maxrate;




 unsigned long trans_timeout;



 spinlock_t _xmit_lock __attribute__((__aligned__((1 << 7))));
 int xmit_lock_owner;



 unsigned long trans_start;

 unsigned long state;


 struct dql dql;

} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int netdev_queue_numa_node_read(const struct netdev_queue *q)
{



 return (-1);

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_queue_numa_node_write(struct netdev_queue *q, int node)
{



}






struct rps_map {
 unsigned int len;
 struct callback_head rcu;
 u16 cpus[0];
};







struct rps_dev_flow {
 u16 cpu;
 u16 filter;
 unsigned int last_qtail;
};





struct rps_dev_flow_table {
 unsigned int mask;
 struct callback_head rcu;
 struct rps_dev_flow flows[0];
};
# 649 "../include/linux/netdevice.h"
struct rps_sock_flow_table {
 u32 mask;

 u32 ents[0] __attribute__((__aligned__((1 << 7))));
};




extern u32 rps_cpu_mask;
extern struct rps_sock_flow_table *rps_sock_flow_table;

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void rps_record_sock_flow(struct rps_sock_flow_table *table,
     u32 hash)
{
 if (table && hash) {
  unsigned int index = hash & table->mask;
  u32 val = hash & ~rps_cpu_mask;


  val |= (*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }));

  if (table->ents[index] != val)
   table->ents[index] = val;
 }
}


bool rps_may_expire_flow(struct net_device *dev, u16 rxq_index, u32 flow_id,
    u16 filter_id);




struct netdev_rx_queue {

 struct rps_map *rps_map;
 struct rps_dev_flow_table *rps_flow_table;

 struct kobject kobj;
 struct net_device *dev;
} __attribute__((__aligned__((1 << 7))));




struct rx_queue_attribute {
 struct attribute attr;
 ssize_t (*show)(struct netdev_rx_queue *queue, char *buf);
 ssize_t (*store)(struct netdev_rx_queue *queue,
    const char *buf, size_t len);
};






struct xps_map {
 unsigned int len;
 unsigned int alloc_len;
 struct callback_head rcu;
 u16 queues[0];
};







struct xps_dev_maps {
 struct callback_head rcu;
 struct xps_map *cpu_map[0];
};







struct netdev_tc_txq {
 u16 count;
 u16 offset;
};
# 758 "../include/linux/netdevice.h"
struct netdev_phys_item_id {
 unsigned char id[32];
 unsigned char id_len;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netdev_phys_item_id_same(struct netdev_phys_item_id *a,
         struct netdev_phys_item_id *b)
{
 return a->id_len == b->id_len &&
        memcmp(a->id, b->id, a->id_len) == 0;
}

typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
           struct sk_buff *skb);

enum tc_setup_type {
 TC_SETUP_MQPRIO,
 TC_SETUP_CLSU32,
 TC_SETUP_CLSFLOWER,
 TC_SETUP_CLSMATCHALL,
 TC_SETUP_CLSBPF,
};




enum xdp_netdev_command {







 XDP_SETUP_PROG,
 XDP_SETUP_PROG_HW,




 XDP_QUERY_PROG,
};

struct netlink_ext_ack;

struct netdev_xdp {
 enum xdp_netdev_command command;
 union {

  struct {
   u32 flags;
   struct bpf_prog *prog;
   struct netlink_ext_ack *extack;
  };

  struct {
   u8 prog_attached;
   u32 prog_id;
  };
 };
};
# 1160 "../include/linux/netdevice.h"
struct net_device_ops {
 int (*ndo_init)(struct net_device *dev);
 void (*ndo_uninit)(struct net_device *dev);
 int (*ndo_open)(struct net_device *dev);
 int (*ndo_stop)(struct net_device *dev);
 netdev_tx_t (*ndo_start_xmit)(struct sk_buff *skb,
        struct net_device *dev);
 netdev_features_t (*ndo_features_check)(struct sk_buff *skb,
            struct net_device *dev,
            netdev_features_t features);
 u16 (*ndo_select_queue)(struct net_device *dev,
          struct sk_buff *skb,
          void *accel_priv,
          select_queue_fallback_t fallback);
 void (*ndo_change_rx_flags)(struct net_device *dev,
             int flags);
 void (*ndo_set_rx_mode)(struct net_device *dev);
 int (*ndo_set_mac_address)(struct net_device *dev,
             void *addr);
 int (*ndo_validate_addr)(struct net_device *dev);
 int (*ndo_do_ioctl)(struct net_device *dev,
             struct ifreq *ifr, int cmd);
 int (*ndo_set_config)(struct net_device *dev,
               struct ifmap *map);
 int (*ndo_change_mtu)(struct net_device *dev,
        int new_mtu);
 int (*ndo_neigh_setup)(struct net_device *dev,
         struct neigh_parms *);
 void (*ndo_tx_timeout) (struct net_device *dev);

 void (*ndo_get_stats64)(struct net_device *dev,
         struct rtnl_link_stats64 *storage);
 bool (*ndo_has_offload_stats)(const struct net_device *dev, int attr_id);
 int (*ndo_get_offload_stats)(int attr_id,
        const struct net_device *dev,
        void *attr_data);
 struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);

 int (*ndo_vlan_rx_add_vid)(struct net_device *dev,
             __be16 proto, u16 vid);
 int (*ndo_vlan_rx_kill_vid)(struct net_device *dev,
              __be16 proto, u16 vid);






 int (*ndo_set_vf_mac)(struct net_device *dev,
        int queue, u8 *mac);
 int (*ndo_set_vf_vlan)(struct net_device *dev,
         int queue, u16 vlan,
         u8 qos, __be16 proto);
 int (*ndo_set_vf_rate)(struct net_device *dev,
         int vf, int min_tx_rate,
         int max_tx_rate);
 int (*ndo_set_vf_spoofchk)(struct net_device *dev,
             int vf, bool setting);
 int (*ndo_set_vf_trust)(struct net_device *dev,
          int vf, bool setting);
 int (*ndo_get_vf_config)(struct net_device *dev,
           int vf,
           struct ifla_vf_info *ivf);
 int (*ndo_set_vf_link_state)(struct net_device *dev,
        int vf, int link_state);
 int (*ndo_get_vf_stats)(struct net_device *dev,
          int vf,
          struct ifla_vf_stats
          *vf_stats);
 int (*ndo_set_vf_port)(struct net_device *dev,
         int vf,
         struct nlattr *port[]);
 int (*ndo_get_vf_port)(struct net_device *dev,
         int vf, struct sk_buff *skb);
 int (*ndo_set_vf_guid)(struct net_device *dev,
         int vf, u64 guid,
         int guid_type);
 int (*ndo_set_vf_rss_query_en)(
         struct net_device *dev,
         int vf, bool setting);
 int (*ndo_setup_tc)(struct net_device *dev,
      enum tc_setup_type type,
      void *type_data);
# 1268 "../include/linux/netdevice.h"
 int (*ndo_rx_flow_steer)(struct net_device *dev,
           const struct sk_buff *skb,
           u16 rxq_index,
           u32 flow_id);

 int (*ndo_add_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 int (*ndo_del_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 netdev_features_t (*ndo_fix_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_set_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_neigh_construct)(struct net_device *dev,
             struct neighbour *n);
 void (*ndo_neigh_destroy)(struct net_device *dev,
           struct neighbour *n);

 int (*ndo_fdb_add)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid,
            u16 flags);
 int (*ndo_fdb_del)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            const unsigned char *addr,
            u16 vid);
 int (*ndo_fdb_dump)(struct sk_buff *skb,
      struct netlink_callback *cb,
      struct net_device *dev,
      struct net_device *filter_dev,
      int *idx);

 int (*ndo_bridge_setlink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags);
 int (*ndo_bridge_getlink)(struct sk_buff *skb,
            u32 pid, u32 seq,
            struct net_device *dev,
            u32 filter_mask,
            int nlflags);
 int (*ndo_bridge_dellink)(struct net_device *dev,
            struct nlmsghdr *nlh,
            u16 flags);
 int (*ndo_change_carrier)(struct net_device *dev,
            bool new_carrier);
 int (*ndo_get_phys_port_id)(struct net_device *dev,
       struct netdev_phys_item_id *ppid);
 int (*ndo_get_phys_port_name)(struct net_device *dev,
         char *name, size_t len);
 void (*ndo_udp_tunnel_add)(struct net_device *dev,
            struct udp_tunnel_info *ti);
 void (*ndo_udp_tunnel_del)(struct net_device *dev,
            struct udp_tunnel_info *ti);
 void* (*ndo_dfwd_add_station)(struct net_device *pdev,
       struct net_device *dev);
 void (*ndo_dfwd_del_station)(struct net_device *pdev,
       void *priv);

 int (*ndo_get_lock_subclass)(struct net_device *dev);
 int (*ndo_set_tx_maxrate)(struct net_device *dev,
            int queue_index,
            u32 maxrate);
 int (*ndo_get_iflink)(const struct net_device *dev);
 int (*ndo_change_proto_down)(struct net_device *dev,
        bool proto_down);
 int (*ndo_fill_metadata_dst)(struct net_device *dev,
             struct sk_buff *skb);
 void (*ndo_set_rx_headroom)(struct net_device *dev,
             int needed_headroom);
 int (*ndo_xdp)(struct net_device *dev,
        struct netdev_xdp *xdp);
 int (*ndo_xdp_xmit)(struct net_device *dev,
      struct xdp_buff *xdp);
 void (*ndo_xdp_flush)(struct net_device *dev);
};
# 1391 "../include/linux/netdevice.h"
enum netdev_priv_flags {
 IFF_802_1Q_VLAN = 1<<0,
 IFF_EBRIDGE = 1<<1,
 IFF_BONDING = 1<<2,
 IFF_ISATAP = 1<<3,
 IFF_WAN_HDLC = 1<<4,
 IFF_XMIT_DST_RELEASE = 1<<5,
 IFF_DONT_BRIDGE = 1<<6,
 IFF_DISABLE_NETPOLL = 1<<7,
 IFF_MACVLAN_PORT = 1<<8,
 IFF_BRIDGE_PORT = 1<<9,
 IFF_OVS_DATAPATH = 1<<10,
 IFF_TX_SKB_SHARING = 1<<11,
 IFF_UNICAST_FLT = 1<<12,
 IFF_TEAM_PORT = 1<<13,
 IFF_SUPP_NOFCS = 1<<14,
 IFF_LIVE_ADDR_CHANGE = 1<<15,
 IFF_MACVLAN = 1<<16,
 IFF_XMIT_DST_RELEASE_PERM = 1<<17,
 IFF_IPVLAN_MASTER = 1<<18,
 IFF_IPVLAN_SLAVE = 1<<19,
 IFF_L3MDEV_MASTER = 1<<20,
 IFF_NO_QUEUE = 1<<21,
 IFF_OPENVSWITCH = 1<<22,
 IFF_L3MDEV_SLAVE = 1<<23,
 IFF_TEAM = 1<<24,
 IFF_RXFH_CONFIGURED = 1<<25,
 IFF_PHONY_HEADROOM = 1<<26,
 IFF_MACSEC = 1<<27,
 IFF_L3MDEV_RX_HANDLER = 1<<28,
};
# 1667 "../include/linux/netdevice.h"
struct net_device {
 char name[16];
 struct hlist_node name_hlist;
 char *ifalias;




 unsigned long mem_end;
 unsigned long mem_start;
 unsigned long base_addr;
 int irq;

 atomic_t carrier_changes;







 unsigned long state;

 struct list_head dev_list;
 struct list_head napi_list;
 struct list_head unreg_list;
 struct list_head close_list;
 struct list_head ptype_all;
 struct list_head ptype_specific;

 struct {
  struct list_head upper;
  struct list_head lower;
 } adj_list;

 netdev_features_t features;
 netdev_features_t hw_features;
 netdev_features_t wanted_features;
 netdev_features_t vlan_features;
 netdev_features_t hw_enc_features;
 netdev_features_t mpls_features;
 netdev_features_t gso_partial_features;

 int ifindex;
 int group;

 struct net_device_stats stats;

 atomic_long_t rx_dropped;
 atomic_long_t tx_dropped;
 atomic_long_t rx_nohandler;


 const struct iw_handler_def *wireless_handlers;
 struct iw_public_data *wireless_data;

 const struct net_device_ops *netdev_ops;
 const struct ethtool_ops *ethtool_ops;

 const struct switchdev_ops *switchdev_ops;





 const struct ndisc_ops *ndisc_ops;



 const struct xfrmdev_ops *xfrmdev_ops;


 const struct header_ops *header_ops;

 unsigned int flags;
 unsigned int priv_flags;

 unsigned short gflags;
 unsigned short padded;

 unsigned char operstate;
 unsigned char link_mode;

 unsigned char if_port;
 unsigned char dma;






 unsigned int mtu;
 unsigned int min_mtu;
 unsigned int max_mtu;
 unsigned short type;
 unsigned short hard_header_len;
 unsigned char min_header_len;

 unsigned short needed_headroom;
 unsigned short needed_tailroom;


 unsigned char perm_addr[32];
 unsigned char addr_assign_type;
 unsigned char addr_len;
 unsigned short neigh_priv_len;
 unsigned short dev_id;
 unsigned short dev_port;
 spinlock_t addr_list_lock;
 unsigned char name_assign_type;
 bool uc_promisc;
 struct netdev_hw_addr_list uc;
 struct netdev_hw_addr_list mc;
 struct netdev_hw_addr_list dev_addrs;


 struct kset *queues_kset;

 unsigned int promiscuity;
 unsigned int allmulti;
# 1800 "../include/linux/netdevice.h"
 void *atalk_ptr;
 struct in_device *ip_ptr;
 struct dn_dev *dn_ptr;
 struct inet6_dev *ip6_ptr;
 void *ax25_ptr;
 struct wireless_dev *ieee80211_ptr;
 struct wpan_dev *ieee802154_ptr;
# 1815 "../include/linux/netdevice.h"
 unsigned char *dev_addr;


 struct netdev_rx_queue *_rx;

 unsigned int num_rx_queues;
 unsigned int real_num_rx_queues;


 struct bpf_prog *xdp_prog;
 unsigned long gro_flush_timeout;
 rx_handler_func_t *rx_handler;
 void *rx_handler_data;


 struct tcf_proto *ingress_cl_list;

 struct netdev_queue *ingress_queue;

 struct nf_hook_entries *nf_hooks_ingress;


 unsigned char broadcast[32];

 struct cpu_rmap *rx_cpu_rmap;

 struct hlist_node index_hlist;




 struct netdev_queue *_tx __attribute__((__aligned__((1 << 7))));
 unsigned int num_tx_queues;
 unsigned int real_num_tx_queues;
 struct Qdisc *qdisc;

 struct hlist_head qdisc_hash[1 << (4)];

 unsigned int tx_queue_len;
 spinlock_t tx_global_lock;
 int watchdog_timeo;


 struct xps_dev_maps *xps_maps;


 struct tcf_proto *egress_cl_list;



 struct timer_list watchdog_timer;

 int *pcpu_refcnt;
 struct list_head todo_list;

 struct list_head link_watch_list;

 enum { NETREG_UNINITIALIZED=0,
        NETREG_REGISTERED,
        NETREG_UNREGISTERING,
        NETREG_UNREGISTERED,
        NETREG_RELEASED,
        NETREG_DUMMY,
 } reg_state:8;

 bool dismantle;

 enum {
  RTNL_LINK_INITIALIZED,
  RTNL_LINK_INITIALIZING,
 } rtnl_link_state:16;

 bool needs_free_netdev;
 void (*priv_destructor)(struct net_device *dev);





 possible_net_t nd_net;


 union {
  void *ml_priv;
  struct pcpu_lstats *lstats;
  struct pcpu_sw_netstats *tstats;
  struct pcpu_dstats *dstats;
  struct pcpu_vstats *vstats;
 };
# 1912 "../include/linux/netdevice.h"
 struct device dev;
 const struct attribute_group *sysfs_groups[4];
 const struct attribute_group *sysfs_rx_queue_group;

 const struct rtnl_link_ops *rtnl_link_ops;



 unsigned int gso_max_size;

 u16 gso_max_segs;




 u8 num_tc;
 struct netdev_tc_txq tc_to_txq[16];
 u8 prio_tc_map[15 + 1];







 struct phy_device *phydev;
 struct lock_class_key *qdisc_tx_busylock;
 struct lock_class_key *qdisc_running_key;
 bool proto_down;





};


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_elide_gro(const struct net_device *dev)
{
 if (!(dev->features & ((netdev_features_t)1 << (NETIF_F_GRO_BIT))) || dev->xdp_prog)
  return true;
 return false;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
int netdev_get_prio_tc_map(const struct net_device *dev, u32 prio)
{
 return dev->prio_tc_map[prio & 15];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
 if (tc >= dev->num_tc)
  return -22;

 dev->prio_tc_map[prio & 15] = tc & 15;
 return 0;
}

int netdev_txq_to_tc(struct net_device *dev, unsigned int txq);
void netdev_reset_tc(struct net_device *dev);
int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset);
int netdev_set_num_tc(struct net_device *dev, u8 num_tc);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
int netdev_get_num_tc(struct net_device *dev)
{
 return dev->num_tc;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
struct netdev_queue *netdev_get_tx_queue(const struct net_device *dev,
      unsigned int index)
{
 return &dev->_tx[index];
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct netdev_queue *skb_get_tx_queue(const struct net_device *dev,
          const struct sk_buff *skb)
{
 return netdev_get_tx_queue(dev, skb_get_queue_mapping(skb));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_for_each_tx_queue(struct net_device *dev,
         void (*f)(struct net_device *,
            struct netdev_queue *,
            void *),
         void *arg)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  f(dev, &dev->_tx[i], arg);
}
# 2027 "../include/linux/netdevice.h"
struct netdev_queue *netdev_pick_tx(struct net_device *dev,
        struct sk_buff *skb,
        void *accel_priv);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned netdev_get_fwd_headroom(struct net_device *dev)
{
 return dev->priv_flags & IFF_PHONY_HEADROOM ? 0 : dev->needed_headroom;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_set_rx_headroom(struct net_device *dev, int new_hr)
{
 if (dev->netdev_ops->ndo_set_rx_headroom)
  dev->netdev_ops->ndo_set_rx_headroom(dev, new_hr);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_reset_rx_headroom(struct net_device *dev)
{
 netdev_set_rx_headroom(dev, -1);
}




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
struct net *dev_net(const struct net_device *dev)
{
 return read_pnet(&dev->nd_net);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
void dev_net_set(struct net_device *dev, struct net *net)
{
 write_pnet(&dev->nd_net, net);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *netdev_priv(const struct net_device *dev)
{
 return (char *)dev + ((((sizeof(struct net_device))) + ((typeof((sizeof(struct net_device))))((32)) - 1)) & ~((typeof((sizeof(struct net_device))))((32)) - 1));
}
# 2103 "../include/linux/netdevice.h"
void netif_napi_add(struct net_device *dev, struct napi_struct *napi,
      int (*poll)(struct napi_struct *, int), int weight);
# 2117 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_napi_add(struct net_device *dev,
         struct napi_struct *napi,
         int (*poll)(struct napi_struct *, int),
         int weight)
{
 set_bit(NAPI_STATE_NO_BUSY_POLL, &napi->state);
 netif_napi_add(dev, napi, poll, weight);
}







void netif_napi_del(struct napi_struct *napi);

struct napi_gro_cb {

 void *frag0;


 unsigned int frag0_len;


 int data_offset;


 u16 flush;


 u16 flush_id;


 u16 count;


 u16 gro_remcsum_start;


 unsigned long age;


 u16 proto;


 u8 same_flow:1;


 u8 encap_mark:1;


 u8 csum_valid:1;


 u8 csum_cnt:3;


 u8 free:2;




 u8 is_ipv6:1;


 u8 is_fou:1;


 u8 recursion_counter:4;




 __wsum csum;


 struct sk_buff *last;
};




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int gro_recursion_inc_test(struct sk_buff *skb)
{
 return ++((struct napi_gro_cb *)(skb)->cb)->recursion_counter == 15;
}

typedef struct sk_buff **(*gro_receive_t)(struct sk_buff **, struct sk_buff *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff **call_gro_receive(gro_receive_t cb,
      struct sk_buff **head,
      struct sk_buff *skb)
{
 if (__builtin_expect(!!(gro_recursion_inc_test(skb)), 0)) {
  ((struct napi_gro_cb *)(skb)->cb)->flush |= 1;
  return ((void *)0);
 }

 return cb(head, skb);
}

typedef struct sk_buff **(*gro_receive_sk_t)(struct sock *, struct sk_buff **,
          struct sk_buff *);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct sk_buff **call_gro_receive_sk(gro_receive_sk_t cb,
         struct sock *sk,
         struct sk_buff **head,
         struct sk_buff *skb)
{
 if (__builtin_expect(!!(gro_recursion_inc_test(skb)), 0)) {
  ((struct napi_gro_cb *)(skb)->cb)->flush |= 1;
  return ((void *)0);
 }

 return cb(sk, head, skb);
}

struct packet_type {
 __be16 type;
 struct net_device *dev;
 int (*func) (struct sk_buff *,
      struct net_device *,
      struct packet_type *,
      struct net_device *);
 bool (*id_match)(struct packet_type *ptype,
         struct sock *sk);
 void *af_packet_priv;
 struct list_head list;
};

struct offload_callbacks {
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
      netdev_features_t features);
 struct sk_buff **(*gro_receive)(struct sk_buff **head,
       struct sk_buff *skb);
 int (*gro_complete)(struct sk_buff *skb, int nhoff);
};

struct packet_offload {
 __be16 type;
 u16 priority;
 struct offload_callbacks callbacks;
 struct list_head list;
};


struct pcpu_sw_netstats {
 u64 rx_packets;
 u64 rx_bytes;
 u64 tx_packets;
 u64 tx_bytes;
 struct u64_stats_sync syncp;
};
# 2287 "../include/linux/netdevice.h"
enum netdev_lag_tx_type {
 NETDEV_LAG_TX_TYPE_UNKNOWN,
 NETDEV_LAG_TX_TYPE_RANDOM,
 NETDEV_LAG_TX_TYPE_BROADCAST,
 NETDEV_LAG_TX_TYPE_ROUNDROBIN,
 NETDEV_LAG_TX_TYPE_ACTIVEBACKUP,
 NETDEV_LAG_TX_TYPE_HASH,
};

struct netdev_lag_upper_info {
 enum netdev_lag_tx_type tx_type;
};

struct netdev_lag_lower_state_info {
 u8 link_up : 1,
    tx_enabled : 1;
};
# 2345 "../include/linux/netdevice.h"
int register_netdevice_notifier(struct notifier_block *nb);
int unregister_netdevice_notifier(struct notifier_block *nb);

struct netdev_notifier_info {
 struct net_device *dev;
};

struct netdev_notifier_info_ext {
 struct netdev_notifier_info info;
 union {
  u32 mtu;
 } ext;
};

struct netdev_notifier_change_info {
 struct netdev_notifier_info info;
 unsigned int flags_changed;
};

struct netdev_notifier_changeupper_info {
 struct netdev_notifier_info info;
 struct net_device *upper_dev;
 bool master;
 bool linking;
 void *upper_info;
};

struct netdev_notifier_changelowerstate_info {
 struct netdev_notifier_info info;
 void *lower_state_info;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_notifier_info_init(struct netdev_notifier_info *info,
          struct net_device *dev)
{
 info->dev = dev;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net_device *
netdev_notifier_info_to_dev(const struct netdev_notifier_info *info)
{
 return info->dev;
}

int call_netdevice_notifiers(unsigned long val, struct net_device *dev);


extern rwlock_t dev_base_lock;
# 2411 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net_device *next_net_device(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = dev->dev_list.next;
 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) && !__builtin_types_compatible_p(typeof(*(lh)), typeof(void)))); extern void __compiletime_assert_87(void) ; if (__cond) __compiletime_assert_87(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net_device *next_net_device_rcu(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = ({ typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)({ union { typeof(((*((struct list_head **)(&(&dev->dev_list)->next))))) __val; char __c[1]; } __u; if (1) __read_once_size(&(((*((struct list_head **)(&(&dev->dev_list)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&dev->dev_list)->next)))))); else __read_once_size_nocheck(&(((*((struct list_head **)(&(&dev->dev_list)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&dev->dev_list)->next)))))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((*((struct list_head **)(&(&dev->dev_list)->next))))) *)(________p1)); });
 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) && !__builtin_types_compatible_p(typeof(*(lh)), typeof(void)))); extern void __compiletime_assert_88(void) ; if (__cond) __compiletime_assert_88(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net_device *first_net_device(struct net *net)
{
 return list_empty(&net->dev_base_head) ? ((void *)0) :
  ({ void *__mptr = (void *)(net->dev_base_head.next); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(net->dev_base_head.next)), typeof(((struct net_device *)0)->dev_list)) && !__builtin_types_compatible_p(typeof(*(net->dev_base_head.next)), typeof(void)))); extern void __compiletime_assert_89(void) ; if (__cond) __compiletime_assert_89(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct net_device *first_net_device_rcu(struct net *net)
{
 struct list_head *lh = ({ typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *________p1 = (typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)({ union { typeof(((*((struct list_head **)(&(&net->dev_base_head)->next))))) __val; char __c[1]; } __u; if (1) __read_once_size(&(((*((struct list_head **)(&(&net->dev_base_head)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next)))))); else __read_once_size_nocheck(&(((*((struct list_head **)(&(&net->dev_base_head)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(&net->dev_base_head)->next)))))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((*((struct list_head **)(&(&net->dev_base_head)->next))))) *)(________p1)); });

 return lh == &net->dev_base_head ? ((void *)0) : ({ void *__mptr = (void *)(lh); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(lh)), typeof(((struct net_device *)0)->dev_list)) && !__builtin_types_compatible_p(typeof(*(lh)), typeof(void)))); extern void __compiletime_assert_90(void) ; if (__cond) __compiletime_assert_90(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct net_device *)(__mptr - __builtin_offsetof(struct net_device, dev_list))); });
}

int netdev_boot_setup_check(struct net_device *dev);
unsigned long netdev_boot_base(const char *prefix, int unit);
struct net_device *dev_getbyhwaddr_rcu(struct net *net, unsigned short type,
           const char *hwaddr);
struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type);
struct net_device *__dev_getfirstbyhwtype(struct net *net, unsigned short type);
void dev_add_pack(struct packet_type *pt);
void dev_remove_pack(struct packet_type *pt);
void __dev_remove_pack(struct packet_type *pt);
void dev_add_offload(struct packet_offload *po);
void dev_remove_offload(struct packet_offload *po);

int dev_get_iflink(const struct net_device *dev);
int dev_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb);
struct net_device *__dev_get_by_flags(struct net *net, unsigned short flags,
          unsigned short mask);
struct net_device *dev_get_by_name(struct net *net, const char *name);
struct net_device *dev_get_by_name_rcu(struct net *net, const char *name);
struct net_device *__dev_get_by_name(struct net *net, const char *name);
int dev_alloc_name(struct net_device *dev, const char *name);
int dev_open(struct net_device *dev);
void dev_close(struct net_device *dev);
void dev_close_many(struct list_head *head, bool unlink);
void dev_disable_lro(struct net_device *dev);
int dev_loopback_xmit(struct net *net, struct sock *sk, struct sk_buff *newskb);
int dev_queue_xmit(struct sk_buff *skb);
int dev_queue_xmit_accel(struct sk_buff *skb, void *accel_priv);
int register_netdevice(struct net_device *dev);
void unregister_netdevice_queue(struct net_device *dev, struct list_head *head);
void unregister_netdevice_many(struct list_head *head);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void unregister_netdevice(struct net_device *dev)
{
 unregister_netdevice_queue(dev, ((void *)0));
}

int netdev_refcnt_read(const struct net_device *dev);
void free_netdev(struct net_device *dev);
void netdev_freemem(struct net_device *dev);
void synchronize_net(void);
int init_dummy_netdev(struct net_device *dev);

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) xmit_recursion;


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dev_recursion_level(void)
{
 return ({ typeof(xmit_recursion) pscr_ret__; do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(xmit_recursion)) { case 1: pscr_ret__ = ({ typeof(xmit_recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(xmit_recursion))__percpu_read(({ do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))); (typeof((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))) (__ptr + ((__my_cpu_offset()))); }); }), sizeof(xmit_recursion)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 2: pscr_ret__ = ({ typeof(xmit_recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(xmit_recursion))__percpu_read(({ do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))); (typeof((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))) (__ptr + ((__my_cpu_offset()))); }); }), sizeof(xmit_recursion)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 4: pscr_ret__ = ({ typeof(xmit_recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(xmit_recursion))__percpu_read(({ do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))); (typeof((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))) (__ptr + ((__my_cpu_offset()))); }); }), sizeof(xmit_recursion)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; case 8: pscr_ret__ = ({ typeof(xmit_recursion) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(xmit_recursion))__percpu_read(({ do { const void *__vpp_verify = (typeof((&(xmit_recursion)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))); (typeof((typeof(*(&(xmit_recursion))) *)(&(xmit_recursion)))) (__ptr + ((__my_cpu_offset()))); }); }), sizeof(xmit_recursion)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule_notrace(); } while (0); __retval; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}

struct net_device *dev_get_by_index(struct net *net, int ifindex);
struct net_device *__dev_get_by_index(struct net *net, int ifindex);
struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex);
struct net_device *dev_get_by_napi_id(unsigned int napi_id);
int netdev_get_name(struct net *net, char *name, int ifindex);
int dev_restart(struct net_device *dev);
int skb_gro_receive(struct sk_buff **head, struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_gro_offset(const struct sk_buff *skb)
{
 return ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int skb_gro_len(const struct sk_buff *skb)
{
 return skb->len - ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_pull(struct sk_buff *skb, unsigned int len)
{
 ((struct napi_gro_cb *)(skb)->cb)->data_offset += len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_gro_header_fast(struct sk_buff *skb,
     unsigned int offset)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0 + offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int skb_gro_header_hard(struct sk_buff *skb, unsigned int hlen)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0_len < hlen;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_frag0_invalidate(struct sk_buff *skb)
{
 ((struct napi_gro_cb *)(skb)->cb)->frag0 = ((void *)0);
 ((struct napi_gro_cb *)(skb)->cb)->frag0_len = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_gro_header_slow(struct sk_buff *skb, unsigned int hlen,
     unsigned int offset)
{
 if (!pskb_may_pull(skb, hlen))
  return ((void *)0);

 skb_gro_frag0_invalidate(skb);
 return skb->data + offset;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_gro_network_header(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->frag0 ?: skb->data) +
        skb_network_offset(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_postpull_rcsum(struct sk_buff *skb,
     const void *start, unsigned int len)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid)
  ((struct napi_gro_cb *)(skb)->cb)->csum = csum_sub(((struct napi_gro_cb *)(skb)->cb)->csum,
        csum_partial(start, len, 0));
}






__sum16 __skb_gro_checksum_complete(struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_at_gro_remcsum_start(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start == skb_gro_offset(skb));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __skb_gro_checksum_validate_needed(struct sk_buff *skb,
            bool zero_okay,
            __sum16 check)
{
 return ((skb->ip_summed != 3 ||
  skb_checksum_start_offset(skb) <
   skb_gro_offset(skb)) &&
  !skb_at_gro_remcsum_start(skb) &&
  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  (!zero_okay || check));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __sum16 __skb_gro_checksum_validate_complete(struct sk_buff *skb,
          __wsum psum)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_valid &&
     !csum_fold(csum_add(psum, ((struct napi_gro_cb *)(skb)->cb)->csum)))
  return 0;

 ((struct napi_gro_cb *)(skb)->cb)->csum = psum;

 return __skb_gro_checksum_complete(skb);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_incr_csum_unnecessary(struct sk_buff *skb)
{
 if (((struct napi_gro_cb *)(skb)->cb)->csum_cnt > 0) {

  ((struct napi_gro_cb *)(skb)->cb)->csum_cnt--;
 } else {




  __skb_incr_checksum_unnecessary(skb);
 }
}
# 2629 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __skb_gro_checksum_convert_check(struct sk_buff *skb)
{
 return (((struct napi_gro_cb *)(skb)->cb)->csum_cnt == 0 &&
  !((struct napi_gro_cb *)(skb)->cb)->csum_valid);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __skb_gro_checksum_convert(struct sk_buff *skb,
           __sum16 check, __wsum pseudo)
{
 ((struct napi_gro_cb *)(skb)->cb)->csum = ~pseudo;
 ((struct napi_gro_cb *)(skb)->cb)->csum_valid = 1;
}
# 2649 "../include/linux/netdevice.h"
struct gro_remcsum {
 int offset;
 __wsum delta;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_remcsum_init(struct gro_remcsum *grc)
{
 grc->offset = 0;
 grc->delta = 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void *skb_gro_remcsum_process(struct sk_buff *skb, void *ptr,
         unsigned int off, size_t hdrlen,
         int start, int offset,
         struct gro_remcsum *grc,
         bool nopartial)
{
 __wsum delta;
 size_t plen = hdrlen + ({ size_t __UNIQUE_ID_min1_91 = (offset + sizeof(u16)); size_t __UNIQUE_ID_min2_92 = (start); (void) (&__UNIQUE_ID_min1_91 == &__UNIQUE_ID_min2_92); __UNIQUE_ID_min1_91 > __UNIQUE_ID_min2_92 ? __UNIQUE_ID_min1_91 : __UNIQUE_ID_min2_92; });

 do { if (__builtin_expect(!!(!((struct napi_gro_cb *)(skb)->cb)->csum_valid), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/netdevice.h\"; .popsection; .long 2b - 0b; .short 2669; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);

 if (!nopartial) {
  ((struct napi_gro_cb *)(skb)->cb)->gro_remcsum_start = off + hdrlen + start;
  return ptr;
 }

 ptr = skb_gro_header_fast(skb, off);
 if (skb_gro_header_hard(skb, off + plen)) {
  ptr = skb_gro_header_slow(skb, off + plen, off);
  if (!ptr)
   return ((void *)0);
 }

 delta = remcsum_adjust(ptr + hdrlen, ((struct napi_gro_cb *)(skb)->cb)->csum,
          start, offset);


 ((struct napi_gro_cb *)(skb)->cb)->csum = csum_add(((struct napi_gro_cb *)(skb)->cb)->csum, delta);

 grc->offset = off + hdrlen + offset;
 grc->delta = delta;

 return ptr;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_remcsum_cleanup(struct sk_buff *skb,
        struct gro_remcsum *grc)
{
 void *ptr;
 size_t plen = grc->offset + sizeof(u16);

 if (!grc->delta)
  return;

 ptr = skb_gro_header_fast(skb, grc->offset);
 if (skb_gro_header_hard(skb, grc->offset + sizeof(u16))) {
  ptr = skb_gro_header_slow(skb, plen, grc->offset);
  if (!ptr)
   return;
 }

 remcsum_unadjust((__sum16 *)ptr, grc->delta);
}
# 2732 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_flush_final(struct sk_buff *skb, struct sk_buff **pp, int flush)
{
 ((struct napi_gro_cb *)(skb)->cb)->flush |= flush;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gro_flush_final_remcsum(struct sk_buff *skb,
            struct sk_buff **pp,
            int flush,
            struct gro_remcsum *grc)
{
 ((struct napi_gro_cb *)(skb)->cb)->flush |= flush;
 skb_gro_remcsum_cleanup(skb, grc);
 skb->remcsum_offload = 0;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
      unsigned short type,
      const void *daddr, const void *saddr,
      unsigned int len)
{
 if (!dev->header_ops || !dev->header_ops->create)
  return 0;

 return dev->header_ops->create(skb, dev, type, daddr, saddr, len);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int dev_parse_header(const struct sk_buff *skb,
       unsigned char *haddr)
{
 const struct net_device *dev = skb->dev;

 if (!dev->header_ops || !dev->header_ops->parse)
  return 0;
 return dev->header_ops->parse(skb, haddr);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool dev_validate_header(const struct net_device *dev,
           char *ll_header, int len)
{
 if (__builtin_expect(!!(len >= dev->hard_header_len), 1))
  return true;
 if (len < dev->min_header_len)
  return false;

 if (capable(17)) {
  memset(ll_header + len, 0, dev->hard_header_len - len);
  return true;
 }

 if (dev->header_ops && dev->header_ops->validate)
  return dev->header_ops->validate(ll_header, len);

 return false;
}

typedef int gifconf_func_t(struct net_device * dev, char * bufptr, int len);
int register_gifconf(unsigned int family, gifconf_func_t *gifconf);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int unregister_gifconf(unsigned int family)
{
 return register_gifconf(family, ((void *)0));
}



struct sd_flow_limit {
 u64 count;
 unsigned int num_buckets;
 unsigned int history_head;
 u16 history[(1 << 7)];
 u8 buckets[];
};

extern int netdev_flow_limit_table_len;





struct softnet_data {
 struct list_head poll_list;
 struct napi_struct *current_napi;
 struct sk_buff_head process_queue;


 unsigned int processed;
 unsigned int time_squeeze;
 unsigned int received_rps;
 unsigned int gro_coalesced;


 struct softnet_data *rps_ipi_list;


 struct sd_flow_limit *flow_limit;

 struct Qdisc *output_queue;
 struct Qdisc **output_queue_tailp;
 struct sk_buff *completion_queue;





 unsigned int input_queue_head __attribute__((__aligned__((1 << 7))));


 call_single_data_t csd __attribute__((__aligned__((1 << 7))));
 struct softnet_data *rps_ipi_next;
 unsigned int cpu;
 unsigned int input_queue_tail;

 unsigned int dropped;
 struct sk_buff_head input_pkt_queue;
 struct napi_struct backlog;

};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void input_queue_head_incr(struct softnet_data *sd)
{

 sd->input_queue_head++;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void input_queue_tail_incr_save(struct softnet_data *sd,
           unsigned int *qtail)
{

 *qtail = ++sd->input_queue_tail;

}

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct softnet_data) softnet_data __attribute__((__aligned__((1 << 7))));

void __netif_schedule(struct Qdisc *q);
void netif_schedule_queue(struct netdev_queue *txq);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_schedule_all(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++)
  netif_schedule_queue(netdev_get_tx_queue(dev, i));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
 clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_start_queue(struct net_device *dev)
{
 netif_tx_start_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_start_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_start_queue(txq);
 }
}

void netif_tx_wake_queue(struct netdev_queue *dev_queue);
# 2913 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_wake_queue(struct net_device *dev)
{
 netif_tx_wake_queue(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_wake_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_wake_queue(txq);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
 set_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}
# 2940 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_stop_queue(struct net_device *dev)
{
 netif_tx_stop_queue(netdev_get_tx_queue(dev, 0));
}

void netif_tx_stop_all_queues(struct net_device *dev);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_tx_queue_stopped(const struct netdev_queue *dev_queue)
{
 return test_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_queue_stopped(const struct net_device *dev)
{
 return netif_tx_queue_stopped(netdev_get_tx_queue(dev, 0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_xmit_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
netif_xmit_frozen_or_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & (((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF)) | (1 << __QUEUE_STATE_FROZEN));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool
netif_xmit_frozen_or_drv_stopped(const struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_FROZEN));
}
# 2987 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_txq_bql_enqueue_prefetchw(struct netdev_queue *dev_queue)
{

 prefetchw(&dev_queue->dql.num_queued);

}
# 3001 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_txq_bql_complete_prefetchw(struct netdev_queue *dev_queue)
{

 prefetchw(&dev_queue->dql.limit);

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_tx_sent_queue(struct netdev_queue *dev_queue,
     unsigned int bytes)
{

 dql_queued(&dev_queue->dql, bytes);

 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 1))
  return;

 set_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);






 asm volatile("dmb " "ish" : : : "memory");


 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 0))
  clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);

}
# 3041 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
 netdev_tx_sent_queue(netdev_get_tx_queue(dev, 0), bytes);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_tx_completed_queue(struct netdev_queue *dev_queue,
          unsigned int pkts, unsigned int bytes)
{

 if (__builtin_expect(!!(!bytes), 0))
  return;

 dql_completed(&dev_queue->dql, bytes);






 asm volatile("dmb " "ish" : : : "memory");

 if (dql_avail(&dev_queue->dql) < 0)
  return;

 if (test_and_clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state))
  netif_schedule_queue(dev_queue);

}
# 3080 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_completed_queue(struct net_device *dev,
       unsigned int pkts, unsigned int bytes)
{
 netdev_tx_completed_queue(netdev_get_tx_queue(dev, 0), pkts, bytes);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_tx_reset_queue(struct netdev_queue *q)
{

 clear_bit(__QUEUE_STATE_STACK_XOFF, &q->state);
 dql_reset(&q->dql);

}
# 3101 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_reset_queue(struct net_device *dev_queue)
{
 netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue, 0));
}
# 3114 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 netdev_cap_txqueue(struct net_device *dev, u16 queue_index)
{
 if (__builtin_expect(!!(queue_index >= dev->real_num_tx_queues), 0)) {
  do { if (net_ratelimit()) printk("\001" "4" "%s selects TX queue %d, but real number of TX queues is %d\n", dev->name, queue_index, dev->real_num_tx_queues); } while (0);


  return 0;
 }

 return queue_index;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_running(const struct net_device *dev)
{
 return test_bit(__LINK_STATE_START, &dev->state);
}
# 3151 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_start_queue(txq);
}
# 3165 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
 netif_tx_stop_queue(txq);
}
# 3178 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __netif_subqueue_stopped(const struct net_device *dev,
         u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 return netif_tx_queue_stopped(txq);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_subqueue_stopped(const struct net_device *dev,
       struct sk_buff *skb)
{
 return __netif_subqueue_stopped(dev, skb_get_queue_mapping(skb));
}
# 3199 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_wake_queue(txq);
}


int netif_set_xps_queue(struct net_device *dev, const struct cpumask *mask,
   u16 index);
# 3218 "../include/linux/netdevice.h"
u16 __skb_tx_hash(const struct net_device *dev, struct sk_buff *skb,
    unsigned int num_tx_queues);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 skb_tx_hash(const struct net_device *dev,
         struct sk_buff *skb)
{
 return __skb_tx_hash(dev, skb, dev->real_num_tx_queues);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_multiqueue(const struct net_device *dev)
{
 return dev->num_tx_queues > 1;
}

int netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq);


int netif_set_real_num_rx_queues(struct net_device *dev, unsigned int rxq);
# 3255 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int get_netdev_rx_queue_index(
  struct netdev_rx_queue *queue)
{
 struct net_device *dev = queue->dev;
 int index = queue - dev->_rx;

 do { if (__builtin_expect(!!(index >= dev->num_rx_queues), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/netdevice.h\"; .popsection; .long 2b - 0b; .short 3261; .short 0; .popsection; 1: brk 0x800");; do { ; do { } while (1); } while (0); } while (0); } while (0);
 return index;
}



int netif_get_num_default_rss_queues(void);

enum skb_free_reason {
 SKB_REASON_CONSUMED,
 SKB_REASON_DROPPED,
};

void __dev_kfree_skb_irq(struct sk_buff *skb, enum skb_free_reason reason);
void __dev_kfree_skb_any(struct sk_buff *skb, enum skb_free_reason reason);
# 3296 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_kfree_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_consume_skb_irq(struct sk_buff *skb)
{
 __dev_kfree_skb_irq(skb, SKB_REASON_CONSUMED);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_kfree_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_DROPPED);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_consume_skb_any(struct sk_buff *skb)
{
 __dev_kfree_skb_any(skb, SKB_REASON_CONSUMED);
}

void generic_xdp_tx(struct sk_buff *skb, struct bpf_prog *xdp_prog);
int do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb);
int netif_rx(struct sk_buff *skb);
int netif_rx_ni(struct sk_buff *skb);
int netif_receive_skb(struct sk_buff *skb);
gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb);
void napi_gro_flush(struct napi_struct *napi, bool flush_old);
struct sk_buff *napi_get_frags(struct napi_struct *napi);
gro_result_t napi_gro_frags(struct napi_struct *napi);
struct packet_offload *gro_find_receive_by_type(__be16 type);
struct packet_offload *gro_find_complete_by_type(__be16 type);
extern struct napi_struct *get_current_napi_context(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void napi_free_frags(struct napi_struct *napi)
{
 kfree_skb(napi->skb);
 napi->skb = ((void *)0);
}

bool netdev_is_rx_handler_busy(struct net_device *dev);
int netdev_rx_handler_register(struct net_device *dev,
          rx_handler_func_t *rx_handler,
          void *rx_handler_data);
void netdev_rx_handler_unregister(struct net_device *dev);

bool dev_valid_name(const char *name);
int dev_ioctl(struct net *net, unsigned int cmd, void *);
int dev_ethtool(struct net *net, struct ifreq *);
unsigned int dev_get_flags(const struct net_device *);
int __dev_change_flags(struct net_device *, unsigned int flags);
int dev_change_flags(struct net_device *, unsigned int);
void __dev_notify_flags(struct net_device *, unsigned int old_flags,
   unsigned int gchanges);
int dev_change_name(struct net_device *, const char *);
int dev_set_alias(struct net_device *, const char *, size_t);
int dev_change_net_namespace(struct net_device *, struct net *, const char *);
int __dev_set_mtu(struct net_device *, int);
int dev_set_mtu(struct net_device *, int);
int dev_validate_mtu(struct net_device *dev, int mtu);
void dev_set_group(struct net_device *, int);
int dev_set_mac_address(struct net_device *, struct sockaddr *);
int dev_change_carrier(struct net_device *, bool new_carrier);
int dev_get_phys_port_id(struct net_device *dev,
    struct netdev_phys_item_id *ppid);
int dev_get_phys_port_name(struct net_device *dev,
      char *name, size_t len);
int dev_change_proto_down(struct net_device *dev, bool proto_down);
struct sk_buff *validate_xmit_skb_list(struct sk_buff *skb, struct net_device *dev);
struct sk_buff *dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
        struct netdev_queue *txq, int *ret);

typedef int (*xdp_op_t)(struct net_device *dev, struct netdev_xdp *xdp);
int dev_change_xdp_fd(struct net_device *dev, struct netlink_ext_ack *extack,
        int fd, u32 flags);
u8 __dev_xdp_attached(struct net_device *dev, xdp_op_t xdp_op, u32 *prog_id);

int __dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
int dev_forward_skb(struct net_device *dev, struct sk_buff *skb);
bool is_skb_forwardable(const struct net_device *dev,
   const struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int ____dev_forward_skb(struct net_device *dev,
            struct sk_buff *skb)
{
 if (skb_orphan_frags(skb, ((( gfp_t)0x20u)|(( gfp_t)0x80000u)|(( gfp_t)0x1000000u))) ||
     __builtin_expect(!!(!is_skb_forwardable(dev, skb)), 0)) {
  atomic_long_inc(&dev->rx_dropped);
  kfree_skb(skb);
  return 1;
 }

 skb_scrub_packet(skb, true);
 skb->priority = 0;
 return 0;
}

void dev_queue_xmit_nit(struct sk_buff *skb, struct net_device *dev);

extern int netdev_budget;
extern unsigned int netdev_budget_usecs;


void netdev_run_todo(void);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_put(struct net_device *dev)
{
 do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*dev->pcpu_refcnt))(1)), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*dev->pcpu_refcnt))(1)), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*dev->pcpu_refcnt))(1)), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (-(typeof(*dev->pcpu_refcnt))(1)), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void dev_hold(struct net_device *dev)
{
 do { do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*dev->pcpu_refcnt)) { case 1: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 2: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 4: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; case 8: ({ typeof(*dev->pcpu_refcnt) __retval; do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0); __retval = (typeof(*dev->pcpu_refcnt))__percpu_add(({ do { const void *__vpp_verify = (typeof((&(*dev->pcpu_refcnt)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))); (typeof((typeof(*(&(*dev->pcpu_refcnt))) *)(&(*dev->pcpu_refcnt)))) (__ptr + ((__my_cpu_offset()))); }); }), (1), sizeof(*dev->pcpu_refcnt)); do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) preempt_schedule(); } while (0); __retval; });break; default: __bad_size_call_parameter();break; } } while (0);
}
# 3431 "../include/linux/netdevice.h"
void linkwatch_init_dev(struct net_device *dev);
void linkwatch_fire_event(struct net_device *dev);
void linkwatch_forget_dev(struct net_device *dev);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_carrier_ok(const struct net_device *dev)
{
 return !test_bit(__LINK_STATE_NOCARRIER, &dev->state);
}

unsigned long dev_trans_start(struct net_device *dev);

void __netdev_watchdog_up(struct net_device *dev);

void netif_carrier_on(struct net_device *dev);

void netif_carrier_off(struct net_device *dev);
# 3466 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_dormant_on(struct net_device *dev)
{
 if (!test_and_set_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_dormant_off(struct net_device *dev)
{
 if (test_and_clear_bit(__LINK_STATE_DORMANT, &dev->state))
  linkwatch_fire_event(dev);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_dormant(const struct net_device *dev)
{
 return test_bit(__LINK_STATE_DORMANT, &dev->state);
}
# 3502 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_oper_up(const struct net_device *dev)
{
 return (dev->operstate == IF_OPER_UP ||
  dev->operstate == IF_OPER_UNKNOWN );
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_device_present(struct net_device *dev)
{
 return test_bit(__LINK_STATE_PRESENT, &dev->state);
}

void netif_device_detach(struct net_device *dev);

void netif_device_attach(struct net_device *dev);





enum {
 NETIF_MSG_DRV = 0x0001,
 NETIF_MSG_PROBE = 0x0002,
 NETIF_MSG_LINK = 0x0004,
 NETIF_MSG_TIMER = 0x0008,
 NETIF_MSG_IFDOWN = 0x0010,
 NETIF_MSG_IFUP = 0x0020,
 NETIF_MSG_RX_ERR = 0x0040,
 NETIF_MSG_TX_ERR = 0x0080,
 NETIF_MSG_TX_QUEUED = 0x0100,
 NETIF_MSG_INTR = 0x0200,
 NETIF_MSG_TX_DONE = 0x0400,
 NETIF_MSG_RX_STATUS = 0x0800,
 NETIF_MSG_PKTDATA = 0x1000,
 NETIF_MSG_HW = 0x2000,
 NETIF_MSG_WOL = 0x4000,
};
# 3561 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{

 if (debug_value < 0 || debug_value >= (sizeof(u32) * 8))
  return default_msg_enable_bits;
 if (debug_value == 0)
  return 0;

 return (1U << debug_value) - 1;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
 spin_lock(&txq->_xmit_lock);
 txq->xmit_lock_owner = cpu;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __netif_tx_acquire(struct netdev_queue *txq)
{
 (void)0;
 return true;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __netif_tx_release(struct netdev_queue *txq)
{
 (void)0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __netif_tx_lock_bh(struct netdev_queue *txq)
{
 spin_lock_bh(&txq->_xmit_lock);
 txq->xmit_lock_owner = (*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool __netif_tx_trylock(struct netdev_queue *txq)
{
 bool ok = spin_trylock(&txq->_xmit_lock);
 if (__builtin_expect(!!(ok), 1))
  txq->xmit_lock_owner = (*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }));
 return ok;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __netif_tx_unlock(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 spin_unlock(&txq->_xmit_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 spin_unlock_bh(&txq->_xmit_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void txq_trans_update(struct netdev_queue *txq)
{
 if (txq->xmit_lock_owner != -1)
  txq->trans_start = jiffies;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_trans_update(struct net_device *dev)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, 0);

 if (txq->trans_start != jiffies)
  txq->trans_start = jiffies;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_lock(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 spin_lock(&dev->tx_global_lock);
 cpu = (*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }));
 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);







  __netif_tx_lock(txq, cpu);
  set_bit(__QUEUE_STATE_FROZEN, &txq->state);
  __netif_tx_unlock(txq);
 }
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_lock_bh(struct net_device *dev)
{
 local_bh_disable();
 netif_tx_lock(dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_unlock(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);





  clear_bit(__QUEUE_STATE_FROZEN, &txq->state);
  netif_schedule_queue(txq);
 }
 spin_unlock(&dev->tx_global_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_unlock_bh(struct net_device *dev)
{
 netif_tx_unlock(dev);
 local_bh_enable();
}
# 3708 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_tx_disable(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 local_bh_disable();
 cpu = (*({ do { const void *__vpp_verify = (typeof((&cpu_number) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&cpu_number)) *)(&cpu_number))); (typeof((typeof(*(&cpu_number)) *)(&cpu_number))) (__ptr + ((__my_cpu_offset()))); }); }));
 for (i = 0; i < dev->num_tx_queues; i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);

  __netif_tx_lock(txq, cpu);
  netif_tx_stop_queue(txq);
  __netif_tx_unlock(txq);
 }
 local_bh_enable();
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_addr_lock(struct net_device *dev)
{
 spin_lock(&dev->addr_list_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_addr_lock_nested(struct net_device *dev)
{
 int subclass = 1;

 if (dev->netdev_ops->ndo_get_lock_subclass)
  subclass = dev->netdev_ops->ndo_get_lock_subclass(dev);

 do { _raw_spin_lock(((void)(subclass), (spinlock_check(&dev->addr_list_lock)))); } while (0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_addr_lock_bh(struct net_device *dev)
{
 spin_lock_bh(&dev->addr_list_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_addr_unlock(struct net_device *dev)
{
 spin_unlock(&dev->addr_list_lock);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_addr_unlock_bh(struct net_device *dev)
{
 spin_unlock_bh(&dev->addr_list_lock);
}
# 3764 "../include/linux/netdevice.h"
void ether_setup(struct net_device *dev);


struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
        unsigned char name_assign_type,
        void (*setup)(struct net_device *),
        unsigned int txqs, unsigned int rxqs);
int dev_get_valid_name(struct net *net, struct net_device *dev,
         const char *name);
# 3781 "../include/linux/netdevice.h"
int register_netdev(struct net_device *dev);
void unregister_netdev(struct net_device *dev);


int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
     struct netdev_hw_addr_list *from_list, int addr_len);
void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
        struct netdev_hw_addr_list *from_list, int addr_len);
int __hw_addr_sync_dev(struct netdev_hw_addr_list *list,
         struct net_device *dev,
         int (*sync)(struct net_device *, const unsigned char *),
         int (*unsync)(struct net_device *,
         const unsigned char *));
void __hw_addr_unsync_dev(struct netdev_hw_addr_list *list,
     struct net_device *dev,
     int (*unsync)(struct net_device *,
     const unsigned char *));
void __hw_addr_init(struct netdev_hw_addr_list *list);


int dev_addr_add(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
int dev_addr_del(struct net_device *dev, const unsigned char *addr,
   unsigned char addr_type);
void dev_addr_flush(struct net_device *dev);
int dev_addr_init(struct net_device *dev);


int dev_uc_add(struct net_device *dev, const unsigned char *addr);
int dev_uc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_uc_del(struct net_device *dev, const unsigned char *addr);
int dev_uc_sync(struct net_device *to, struct net_device *from);
int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_uc_unsync(struct net_device *to, struct net_device *from);
void dev_uc_flush(struct net_device *dev);
void dev_uc_init(struct net_device *dev);
# 3827 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __dev_uc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->uc, dev, sync, unsync);
}
# 3843 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __dev_uc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->uc, dev, unsync);
}


int dev_mc_add(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_add_excl(struct net_device *dev, const unsigned char *addr);
int dev_mc_del(struct net_device *dev, const unsigned char *addr);
int dev_mc_del_global(struct net_device *dev, const unsigned char *addr);
int dev_mc_sync(struct net_device *to, struct net_device *from);
int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_mc_unsync(struct net_device *to, struct net_device *from);
void dev_mc_flush(struct net_device *dev);
void dev_mc_init(struct net_device *dev);
# 3871 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int __dev_mc_sync(struct net_device *dev,
    int (*sync)(struct net_device *,
         const unsigned char *),
    int (*unsync)(struct net_device *,
           const unsigned char *))
{
 return __hw_addr_sync_dev(&dev->mc, dev, sync, unsync);
}
# 3887 "../include/linux/netdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void __dev_mc_unsync(struct net_device *dev,
       int (*unsync)(struct net_device *,
       const unsigned char *))
{
 __hw_addr_unsync_dev(&dev->mc, dev, unsync);
}


void dev_set_rx_mode(struct net_device *dev);
void __dev_set_rx_mode(struct net_device *dev);
int dev_set_promiscuity(struct net_device *dev, int inc);
int dev_set_allmulti(struct net_device *dev, int inc);
void netdev_state_change(struct net_device *dev);
void netdev_notify_peers(struct net_device *dev);
void netdev_features_change(struct net_device *dev);

void dev_load(struct net *net, const char *name);
struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
     struct rtnl_link_stats64 *storage);
void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
        const struct net_device_stats *netdev_stats);

extern int netdev_max_backlog;
extern int netdev_tstamp_prequeue;
extern int weight_p;
extern int dev_weight_rx_bias;
extern int dev_weight_tx_bias;
extern int dev_rx_weight;
extern int dev_tx_weight;

bool netdev_has_upper_dev(struct net_device *dev, struct net_device *upper_dev);
struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
struct net_device *netdev_all_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
# 3930 "../include/linux/netdevice.h"
int netdev_walk_all_upper_dev_rcu(struct net_device *dev,
      int (*fn)(struct net_device *upper_dev,
         void *data),
      void *data);

bool netdev_has_upper_dev_all_rcu(struct net_device *dev,
      struct net_device *upper_dev);

bool netdev_has_any_upper_dev(struct net_device *dev);

void *netdev_lower_get_next_private(struct net_device *dev,
        struct list_head **iter);
void *netdev_lower_get_next_private_rcu(struct net_device *dev,
     struct list_head **iter);
# 3957 "../include/linux/netdevice.h"
void *netdev_lower_get_next(struct net_device *dev,
    struct list_head **iter);







struct net_device *netdev_all_lower_get_next(struct net_device *dev,
          struct list_head **iter);
struct net_device *netdev_all_lower_get_next_rcu(struct net_device *dev,
       struct list_head **iter);

int netdev_walk_all_lower_dev(struct net_device *dev,
         int (*fn)(struct net_device *lower_dev,
     void *data),
         void *data);
int netdev_walk_all_lower_dev_rcu(struct net_device *dev,
      int (*fn)(struct net_device *lower_dev,
         void *data),
      void *data);

void *netdev_adjacent_get_private(struct list_head *adj_list);
void *netdev_lower_get_first_private_rcu(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
int netdev_upper_dev_link(struct net_device *dev, struct net_device *upper_dev);
int netdev_master_upper_dev_link(struct net_device *dev,
     struct net_device *upper_dev,
     void *upper_priv, void *upper_info);
void netdev_upper_dev_unlink(struct net_device *dev,
        struct net_device *upper_dev);
void netdev_adjacent_rename_links(struct net_device *dev, char *oldname);
void *netdev_lower_dev_get_private(struct net_device *dev,
       struct net_device *lower_dev);
void netdev_lower_state_changed(struct net_device *lower_dev,
    void *lower_state_info);



extern u8 netdev_rss_key[52] __attribute__((__section__(".data..read_mostly")));
void netdev_rss_key_fill(void *buffer, size_t len);

int dev_get_nest_level(struct net_device *dev);
int skb_checksum_help(struct sk_buff *skb);
int skb_crc32c_csum_help(struct sk_buff *skb);
int skb_csum_hwoffload_help(struct sk_buff *skb,
       const netdev_features_t features);

struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
      netdev_features_t features, bool tx_path);
struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
        netdev_features_t features);

struct netdev_bonding_info {
 ifslave slave;
 ifbond master;
};

struct netdev_notifier_bonding_info {
 struct netdev_notifier_info info;
 struct netdev_bonding_info bonding_info;
};

void netdev_bonding_info_change(struct net_device *dev,
    struct netdev_bonding_info *bonding_info);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function))
struct sk_buff *skb_gso_segment(struct sk_buff *skb, netdev_features_t features)
{
 return __skb_gso_segment(skb, features, true);
}
__be16 skb_network_protocol(struct sk_buff *skb, int *depth);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool can_checksum_protocol(netdev_features_t features,
      __be16 protocol)
{
 if (protocol == (( __be16)(__builtin_constant_p((__u16)((0x8906))) ? ((__u16)( (((__u16)((0x8906)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8906)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8906)))))
  return !!(features & ((netdev_features_t)1 << (NETIF_F_FCOE_CRC_BIT)));



 if (features & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {

  return true;
 }

 switch (protocol) {
 case (( __be16)(__builtin_constant_p((__u16)((0x0800))) ? ((__u16)( (((__u16)((0x0800)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0800)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0800)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT)));
 case (( __be16)(__builtin_constant_p((__u16)((0x86DD))) ? ((__u16)( (((__u16)((0x86DD)) & (__u16)0x00ffU) << 8) | (((__u16)((0x86DD)) & (__u16)0xff00U) >> 8))) : __fswab16((0x86DD)))):
  return !!(features & ((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 default:
  return false;
 }
}


void netdev_rx_csum_fault(struct net_device *dev);






void net_enable_timestamp(void);
void net_disable_timestamp(void);


int __attribute__ ((__section__(".init.text"))) dev_proc_init(void);




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) netdev_tx_t __netdev_start_xmit(const struct net_device_ops *ops,
           struct sk_buff *skb, struct net_device *dev,
           bool more)
{
 skb->xmit_more = more ? 1 : 0;
 return ops->ndo_start_xmit(skb, dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) netdev_tx_t netdev_start_xmit(struct sk_buff *skb, struct net_device *dev,
         struct netdev_queue *txq, bool more)
{
 const struct net_device_ops *ops = dev->netdev_ops;
 int rc;

 rc = __netdev_start_xmit(ops, skb, dev, more);
 if (rc == NETDEV_TX_OK)
  txq_trans_update(txq);

 return rc;
}

int netdev_class_create_file_ns(const struct class_attribute *class_attr,
    const void *ns);
void netdev_class_remove_file_ns(const struct class_attribute *class_attr,
     const void *ns);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int netdev_class_create_file(const struct class_attribute *class_attr)
{
 return netdev_class_create_file_ns(class_attr, ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netdev_class_remove_file(const struct class_attribute *class_attr)
{
 netdev_class_remove_file_ns(class_attr, ((void *)0));
}

extern const struct kobj_ns_type_operations net_ns_type_operations;

const char *netdev_drivername(const struct net_device *dev);

void linkwatch_run_queue(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) netdev_features_t netdev_intersect_features(netdev_features_t f1,
         netdev_features_t f2)
{
 if ((f1 ^ f2) & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) {
  if (f1 & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT)))
   f1 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
  else
   f2 |= (((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT))|((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)));
 }

 return f1 & f2;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) netdev_features_t netdev_get_wanted_features(
 struct net_device *dev)
{
 return (dev->features & ~dev->hw_features) | dev->wanted_features;
}
netdev_features_t netdev_increment_features(netdev_features_t all,
 netdev_features_t one, netdev_features_t mask);





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) netdev_features_t netdev_add_tso_features(netdev_features_t features,
       netdev_features_t mask)
{
 return netdev_increment_features(features, (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT))), mask);
}

int __netdev_update_features(struct net_device *dev);
void netdev_update_features(struct net_device *dev);
void netdev_change_features(struct net_device *dev);

void netif_stacked_transfer_operstate(const struct net_device *rootdev,
     struct net_device *dev);

netdev_features_t passthru_features_check(struct sk_buff *skb,
       struct net_device *dev,
       netdev_features_t features);
netdev_features_t netif_skb_features(struct sk_buff *skb);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool net_gso_ok(netdev_features_t features, int gso_type)
{
 netdev_features_t feature = (netdev_features_t)gso_type << NETIF_F_GSO_SHIFT;


 do { bool __cond = !(!(SKB_GSO_TCPV4 != (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_93(void) ; if (__cond) __compiletime_assert_93(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_DODGY != (((netdev_features_t)1 << (NETIF_F_GSO_ROBUST_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_94(void) ; if (__cond) __compiletime_assert_94(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCP_ECN != (((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_95(void) ; if (__cond) __compiletime_assert_95(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCP_FIXEDID != (((netdev_features_t)1 << (NETIF_F_TSO_MANGLEID_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_96(void) ; if (__cond) __compiletime_assert_96(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TCPV6 != (((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_97(void) ; if (__cond) __compiletime_assert_97(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_FCOE != (((netdev_features_t)1 << (NETIF_F_FSO_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_98(void) ; if (__cond) __compiletime_assert_98(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_GRE != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_99(void) ; if (__cond) __compiletime_assert_99(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_GRE_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_GRE_CSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_100(void) ; if (__cond) __compiletime_assert_100(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_IPXIP4 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP4_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_101(void) ; if (__cond) __compiletime_assert_101(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_IPXIP6 != (((netdev_features_t)1 << (NETIF_F_GSO_IPXIP6_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_102(void) ; if (__cond) __compiletime_assert_102(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP_TUNNEL != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_103(void) ; if (__cond) __compiletime_assert_103(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP_TUNNEL_CSUM != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_TUNNEL_CSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_104(void) ; if (__cond) __compiletime_assert_104(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_PARTIAL != (((netdev_features_t)1 << (NETIF_F_GSO_PARTIAL_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_105(void) ; if (__cond) __compiletime_assert_105(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_TUNNEL_REMCSUM != (((netdev_features_t)1 << (NETIF_F_GSO_TUNNEL_REMCSUM_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_106(void) ; if (__cond) __compiletime_assert_106(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_SCTP != (((netdev_features_t)1 << (NETIF_F_GSO_SCTP_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_107(void) ; if (__cond) __compiletime_assert_107(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_ESP != (((netdev_features_t)1 << (NETIF_F_GSO_ESP_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_108(void) ; if (__cond) __compiletime_assert_108(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_109(void) ; if (__cond) __compiletime_assert_109(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!(SKB_GSO_UDP_L4 != (((netdev_features_t)1 << (NETIF_F_GSO_UDP_L4_BIT)) >> NETIF_F_GSO_SHIFT))); extern void __compiletime_assert_110(void) ; if (__cond) __compiletime_assert_110(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 return (features & feature) == feature;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool skb_gso_ok(struct sk_buff *skb, netdev_features_t features)
{
 return net_gso_ok(features, ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type) &&
        (!skb_has_frag_list(skb) || (features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_needs_gso(struct sk_buff *skb,
       netdev_features_t features)
{
 return skb_is_gso(skb) && (!skb_gso_ok(skb, features) ||
  __builtin_expect(!!((skb->ip_summed != 3) && (skb->ip_summed != 1)), 0));

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_set_gso_max_size(struct net_device *dev,
       unsigned int size)
{
 dev->gso_max_size = size;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void skb_gso_error_unwind(struct sk_buff *skb, __be16 protocol,
     int pulled_hlen, u16 mac_offset,
     int mac_len)
{
 skb->protocol = protocol;
 skb->encapsulation = 1;
 skb_push(skb, pulled_hlen);
 skb_reset_transport_header(skb);
 skb->mac_header = mac_offset;
 skb->network_header = skb->mac_header + mac_len;
 skb->mac_len = mac_len;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_macsec(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACSEC;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_macvlan(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_macvlan_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_MACVLAN_PORT;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_ipvlan(const struct net_device *dev)
{
 return dev->priv_flags & IFF_IPVLAN_SLAVE;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_ipvlan_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_IPVLAN_MASTER;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_bond_master(const struct net_device *dev)
{
 return dev->flags & IFF_MASTER && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_bond_slave(const struct net_device *dev)
{
 return dev->flags & IFF_SLAVE && dev->priv_flags & IFF_BONDING;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_supports_nofcs(struct net_device *dev)
{
 return dev->priv_flags & IFF_SUPP_NOFCS;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_has_l3_rx_handler(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_RX_HANDLER;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_l3_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_MASTER;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_l3_slave(const struct net_device *dev)
{
 return dev->priv_flags & IFF_L3MDEV_SLAVE;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_bridge_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_EBRIDGE;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_bridge_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_BRIDGE_PORT;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_ovs_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_OPENVSWITCH;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_ovs_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_OVS_DATAPATH;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_team_master(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_team_port(const struct net_device *dev)
{
 return dev->priv_flags & IFF_TEAM_PORT;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_lag_master(const struct net_device *dev)
{
 return netif_is_bond_master(dev) || netif_is_team_master(dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_lag_port(const struct net_device *dev)
{
 return netif_is_bond_slave(dev) || netif_is_team_port(dev);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_is_rxfh_configured(const struct net_device *dev)
{
 return dev->priv_flags & IFF_RXFH_CONFIGURED;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void netif_keep_dst(struct net_device *dev)
{
 dev->priv_flags &= ~(IFF_XMIT_DST_RELEASE | IFF_XMIT_DST_RELEASE_PERM);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netif_reduces_vlan_mtu(struct net_device *dev)
{

 return dev->priv_flags & IFF_MACSEC;
}

extern struct pernet_operations loopback_net_ops;





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *netdev_name(const struct net_device *dev)
{
 if (!dev->name[0] || strchr(dev->name, '%'))
  return "(unnamed net_device)";
 return dev->name;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool netdev_unregistering(const struct net_device *dev)
{
 return dev->reg_state == NETREG_UNREGISTERING;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *netdev_reg_state(const struct net_device *dev)
{
 switch (dev->reg_state) {
 case NETREG_UNINITIALIZED: return " (uninitialized)";
 case NETREG_REGISTERED: return "";
 case NETREG_UNREGISTERING: return " (unregistering)";
 case NETREG_UNREGISTERED: return " (unregistered)";
 case NETREG_RELEASED: return " (released)";
 case NETREG_DUMMY: return " (dummy)";
 }

 ({ static bool __attribute__ ((__section__(".data.unlikely"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("%s: unknown reg_state %d\n", dev->name, dev->reg_state); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 0: .long 1f - 0b; .pushsection .rodata.str,\"aMS\",@progbits,1; 2: .string \"include/linux/netdevice.h\"; .popsection; .long 2b - 0b; .short 4359; .short (1 << 0)|(((9) << 8)); .popsection; 1: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
 return " (unknown)";
}

__attribute__((format(printf, 3, 4)))
void netdev_printk(const char *level, const struct net_device *dev,
     const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_emerg(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_alert(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_crit(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_err(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_warn(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_notice(const struct net_device *dev, const char *format, ...);
__attribute__((format(printf, 2, 3)))
void netdev_info(const struct net_device *dev, const char *format, ...);
# 27 "../include/linux/etherdevice.h" 2

# 1 "./arch/arm64/include/generated/asm/unaligned.h" 1
# 1 "../include/asm-generic/unaligned.h" 1
# 13 "../include/asm-generic/unaligned.h"
# 1 "../include/linux/unaligned/access_ok.h" 1







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u16 get_unaligned_le16(const void *p)
{
 return __le16_to_cpup((__le16 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 get_unaligned_le32(const void *p)
{
 return __le32_to_cpup((__le32 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u64 get_unaligned_le64(const void *p)
{
 return __le64_to_cpup((__le64 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u16 get_unaligned_be16(const void *p)
{
 return __be16_to_cpup((__be16 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 get_unaligned_be32(const void *p)
{
 return __be32_to_cpup((__be32 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u64 get_unaligned_be64(const void *p)
{
 return __be64_to_cpup((__be64 *)p);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le16(u16 val, void *p)
{
 *((__le16 *)p) = (( __le16)(__u16)(val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le32(u32 val, void *p)
{
 *((__le32 *)p) = (( __le32)(__u32)(val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_le64(u64 val, void *p)
{
 *((__le64 *)p) = (( __le64)(__u64)(val));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be16(u16 val, void *p)
{
 *((__be16 *)p) = (( __be16)(__builtin_constant_p((__u16)((val))) ? ((__u16)( (((__u16)((val)) & (__u16)0x00ffU) << 8) | (((__u16)((val)) & (__u16)0xff00U) >> 8))) : __fswab16((val))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be32(u32 val, void *p)
{
 *((__be32 *)p) = (( __be32)(__builtin_constant_p((__u32)((val))) ? ((__u32)( (((__u32)((val)) & (__u32)0x000000ffUL) << 24) | (((__u32)((val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((val)) & (__u32)0xff000000UL) >> 24))) : __fswab32((val))));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void put_unaligned_be64(u64 val, void *p)
{
 *((__be64 *)p) = (( __be64)(__builtin_constant_p((__u64)((val))) ? ((__u64)( (((__u64)((val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((val))));
}
# 14 "../include/asm-generic/unaligned.h" 2







# 1 "../include/linux/unaligned/generic.h" 1








extern void __bad_unaligned_access_size(void);
# 22 "../include/asm-generic/unaligned.h" 2
# 2 "./arch/arm64/include/generated/asm/unaligned.h" 2
# 29 "../include/linux/etherdevice.h" 2



struct device;
int eth_platform_get_mac_address(struct device *dev, u8 *mac_addr);
unsigned char *arch_get_platform_mac_address(void);
u32 eth_get_headlen(void *data, unsigned int max_len);
__be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev);
extern const struct header_ops eth_header_ops;

int eth_header(struct sk_buff *skb, struct net_device *dev, unsigned short type,
        const void *daddr, const void *saddr, unsigned len);
int eth_header_parse(const struct sk_buff *skb, unsigned char *haddr);
int eth_header_cache(const struct neighbour *neigh, struct hh_cache *hh,
       __be16 type);
void eth_header_cache_update(struct hh_cache *hh, const struct net_device *dev,
        const unsigned char *haddr);
int eth_prepare_mac_addr_change(struct net_device *dev, void *p);
void eth_commit_mac_addr_change(struct net_device *dev, void *p);
int eth_mac_addr(struct net_device *dev, void *p);
int eth_change_mtu(struct net_device *dev, int new_mtu);
int eth_validate_addr(struct net_device *dev);

struct net_device *alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs,
         unsigned int rxqs);



struct net_device *devm_alloc_etherdev_mqs(struct device *dev, int sizeof_priv,
        unsigned int txqs,
        unsigned int rxqs);


struct sk_buff **eth_gro_receive(struct sk_buff **head,
     struct sk_buff *skb);
int eth_gro_complete(struct sk_buff *skb, int nhoff);


static const u8 eth_reserved_addr_base[6] __attribute__((aligned(2))) =
{ 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
# 79 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_link_local_ether_addr(const u8 *addr)
{
 __be16 *a = (__be16 *)addr;
 static const __be16 *b = (const __be16 *)eth_reserved_addr_base;
 static const __be16 m = (( __be16)(__builtin_constant_p((__u16)((0xfff0))) ? ((__u16)( (((__u16)((0xfff0)) & (__u16)0x00ffU) << 8) | (((__u16)((0xfff0)) & (__u16)0xff00U) >> 8))) : __fswab16((0xfff0))));


 return (((*(const u32 *)addr) ^ (*(const u32 *)b)) |
  ( int)((a[2] ^ b[2]) & m)) == 0;



}
# 101 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_zero_ether_addr(const u8 *addr)
{

 return ((*(const u32 *)addr) | (*(const u16 *)(addr + 4))) == 0;





}
# 119 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_multicast_ether_addr(const u8 *addr)
{

 u32 a = *(const u32 *)addr;






 return 0x01 & a;

}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_multicast_ether_addr_64bits(const u8 addr[6+2])
{




 return 0x01 & (*(const u64 *)addr);




}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_local_ether_addr(const u8 *addr)
{
 return 0x02 & addr[0];
}
# 165 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_broadcast_ether_addr(const u8 *addr)
{
 return (*(const u16 *)(addr + 0) &
  *(const u16 *)(addr + 2) &
  *(const u16 *)(addr + 4)) == 0xffff;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_unicast_ether_addr(const u8 *addr)
{
 return !is_multicast_ether_addr(addr);
}
# 194 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_valid_ether_addr(const u8 *addr)
{


 return !is_multicast_ether_addr(addr) && !is_zero_ether_addr(addr);
}
# 209 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool eth_proto_is_802_3(__be16 proto)
{


 proto &= (( __be16)(__builtin_constant_p((__u16)((0xFF00))) ? ((__u16)( (((__u16)((0xFF00)) & (__u16)0x00ffU) << 8) | (((__u16)((0xFF00)) & (__u16)0xff00U) >> 8))) : __fswab16((0xFF00))));


 return ( u16)proto >= ( u16)(( __be16)(__builtin_constant_p((__u16)((0x0600))) ? ((__u16)( (((__u16)((0x0600)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0600)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0600))));
}
# 226 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_random_addr(u8 *addr)
{
 get_random_bytes(addr, 6);
 addr[0] &= 0xfe;
 addr[0] |= 0x02;
}
# 241 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_broadcast_addr(u8 *addr)
{
 memset(addr, 0xff, 6);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_zero_addr(u8 *addr)
{
 memset(addr, 0x00, 6);
}
# 266 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_hw_addr_random(struct net_device *dev)
{
 dev->addr_assign_type = 1;
 eth_random_addr(dev->dev_addr);
}
# 279 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void ether_addr_copy(u8 *dst, const u8 *src)
{

 *(u32 *)dst = *(const u32 *)src;
 *(u16 *)(dst + 4) = *(const u16 *)(src + 4);
# 292 "../include/linux/etherdevice.h"
}
# 302 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_hw_addr_inherit(struct net_device *dst,
           struct net_device *src)
{
 dst->addr_assign_type = src->addr_assign_type;
 ether_addr_copy(dst->dev_addr, src->dev_addr);
}
# 318 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ether_addr_equal(const u8 *addr1, const u8 *addr2)
{

 u32 fold = ((*(const u32 *)addr1) ^ (*(const u32 *)addr2)) |
     ((*(const u16 *)(addr1 + 4)) ^ (*(const u16 *)(addr2 + 4)));

 return fold == 0;






}
# 347 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ether_addr_equal_64bits(const u8 addr1[6+2],
        const u8 addr2[6+2])
{

 u64 fold = (*(const u64 *)addr1) ^ (*(const u64 *)addr2);




 return (fold << 16) == 0;




}
# 372 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ether_addr_equal_unaligned(const u8 *addr1, const u8 *addr2)
{

 return ether_addr_equal(addr1, addr2);



}
# 391 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool ether_addr_equal_masked(const u8 *addr1, const u8 *addr2,
        const u8 *mask)
{
 int i;

 for (i = 0; i < 6; i++) {
  if ((addr1[i] ^ addr2[i]) & mask[i])
   return false;
 }

 return true;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 ether_addr_to_u64(const u8 *addr)
{
 u64 u = 0;
 int i;

 for (i = 0; i < 6; i++)
  u = u << 8 | addr[i];

 return u;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void u64_to_ether_addr(u64 u, u8 *addr)
{
 int i;

 for (i = 6 - 1; i >= 0; i--) {
  addr[i] = u & 0xff;
  u = u >> 8;
 }
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void eth_addr_dec(u8 *addr)
{
 u64 u = ether_addr_to_u64(addr);

 u--;
 u64_to_ether_addr(u, addr);
}
# 460 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_etherdev_addr(const struct net_device *dev,
        const u8 addr[6 + 2])
{
 struct netdev_hw_addr *ha;
 bool res = false;

 rcu_read_lock();
 for (ha = ({ void *__mptr = (void *)(({ union { typeof((&dev->dev_addrs.list)->next) __val; char __c[1]; } __u; if (1) __read_once_size(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); else __read_once_size_nocheck(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); do { } while (0); __u.__val; })); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(({ union { typeof((&dev->dev_addrs.list)->next) __val; char __c[1]; } __u; if (1) __read_once_size(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); else __read_once_size_nocheck(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); do { } while (0); __u.__val; }))), typeof(((typeof(*ha) *)0)->list)) && !__builtin_types_compatible_p(typeof(*(({ union { typeof((&dev->dev_addrs.list)->next) __val; char __c[1]; } __u; if (1) __read_once_size(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); else __read_once_size_nocheck(&((&dev->dev_addrs.list)->next), __u.__c, sizeof((&dev->dev_addrs.list)->next)); do { } while (0); __u.__val; }))), typeof(void)))); extern void __compiletime_assert_111(void) ; if (__cond) __compiletime_assert_111(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((typeof(*ha) *)(__mptr - __builtin_offsetof(typeof(*ha), list))); }); &ha->list != (&dev->dev_addrs.list); ha = ({ void *__mptr = (void *)(({ union { typeof(ha->list.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(ha->list.next), __u.__c, sizeof(ha->list.next)); else __read_once_size_nocheck(&(ha->list.next), __u.__c, sizeof(ha->list.next)); do { } while (0); __u.__val; })); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(({ union { typeof(ha->list.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(ha->list.next), __u.__c, sizeof(ha->list.next)); else __read_once_size_nocheck(&(ha->list.next), __u.__c, sizeof(ha->list.next)); do { } while (0); __u.__val; }))), typeof(((typeof(*ha) *)0)->list)) && !__builtin_types_compatible_p(typeof(*(({ union { typeof(ha->list.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(ha->list.next), __u.__c, sizeof(ha->list.next)); else __read_once_size_nocheck(&(ha->list.next), __u.__c, sizeof(ha->list.next)); do { } while (0); __u.__val; }))), typeof(void)))); extern void __compiletime_assert_112(void) ; if (__cond) __compiletime_assert_112(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((typeof(*ha) *)(__mptr - __builtin_offsetof(typeof(*ha), list))); })) {
  res = ether_addr_equal_64bits(addr, ha->addr);
  if (res)
   break;
 }
 rcu_read_unlock();
 return res;
}
# 489 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long compare_ether_header(const void *a, const void *b)
{

 unsigned long fold;
# 502 "../include/linux/etherdevice.h"
 fold = *(unsigned long *)a ^ *(unsigned long *)b;
 fold |= *(unsigned long *)(a + 6) ^ *(unsigned long *)(b + 6);
 return fold;







}
# 521 "../include/linux/etherdevice.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int eth_skb_pad(struct sk_buff *skb)
{
 return skb_put_padto(skb, 60);
}
# 9 "../drivers/of/of_net.c" 2

# 1 "../include/linux/of_net.h" 1
# 11 "../include/linux/of_net.h"
# 1 "../include/linux/of.h" 1
# 22 "../include/linux/of.h"
# 1 "../include/linux/mod_devicetable.h" 1
# 14 "../include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;




struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 102 "../include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 147 "../include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 315 "../include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 64 + 1];
 kernel_ulong_t keybit[0x2ff / 64 + 1];
 kernel_ulong_t relbit[0x0f / 64 + 1];
 kernel_ulong_t absbit[0x3f / 64 + 1];
 kernel_ulong_t mscbit[0x07 / 64 + 1];
 kernel_ulong_t ledbit[0x0f / 64 + 1];
 kernel_ulong_t sndbit[0x07 / 64 + 1];
 kernel_ulong_t ffbit[0x7f / 64 + 1];
 kernel_ulong_t swbit[0x20 / 64 + 1];
 kernel_ulong_t propbit[0x1f / 64 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 366 "../include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 388 "../include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 402 "../include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 uuid_le guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};





struct gpr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct swr_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 536 "../include/linux/mod_devicetable.h"
struct slim_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};




struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 571 "../include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 600 "../include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 624 "../include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 645 "../include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 670 "../include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 691 "../include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 715 "../include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 728 "../include/linux/mod_devicetable.h"
struct mhi_device_id {
 const char chan[32];
 kernel_ulong_t driver_data;
};
# 23 "../include/linux/of.h" 2



# 1 "../include/linux/property.h" 1
# 16 "../include/linux/property.h"
# 1 "../include/linux/fwnode.h" 1
# 17 "../include/linux/fwnode.h"
struct fwnode_operations;

struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 44 "../include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 unsigned int args[8];
};
# 70 "../include/linux/fwnode.h"
struct fwnode_operations {
 void (*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
};
# 17 "../include/linux/property.h" 2


struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_MAX,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);





struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

void fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}
# 177 "../include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_array;
 bool is_string;
 union {
  union {
   const void *raw_data;
   const u8 *u8_data;
   const u16 *u16_data;
   const u32 *u32_data;
   const u64 *u64_data;
   const char * const *str;
  } pointer;
  union {
   unsigned long long raw_data;
   u8 u8_data;
   u16 u16_data;
   u32 u32_data;
   u64 u64_data;
   const char *str;
  } value;
 };
};
# 265 "../include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);

struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);

int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);
# 27 "../include/linux/of.h" 2



# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 31 "../include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;
 unsigned long _flags;
 unsigned int unique_id;

 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 const char *type;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;





};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 node->fwnode.ops = &of_fwnode_ops;
}
# 127 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct device_node *of_node_get(struct device_node *node)
{
 return node;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_node_put(struct device_node *node) { }



extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 150 "../include/linux/of.h"
void of_core_init(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 175 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool of_have_populated_dt(void)
{
 return of_root != ((void *)0);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == ((void *)0));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return test_bit(flag, &n->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return test_and_set_bit(flag, &n->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 set_bit(flag, &n->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 clear_bit(flag, &n->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_check_flag(struct property *p, unsigned long flag)
{
 return test_bit(flag, &p->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_property_set_flag(struct property *p, unsigned long flag)
{
 set_bit(flag, &p->_flags);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void of_property_clear_flag(struct property *p, unsigned long flag)
{
 clear_bit(flag, &p->_flags);
}

extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (__builtin_constant_p((__u32)(( __u32)(__be32)(*cell))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*cell)));
 return r;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 257 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, ((void *)0));
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);



extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 401 "../include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 424 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 454 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 482 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 510 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 530 "../include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);
# 904 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_node_to_nid(struct device_node *device)
{
 return (-1);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_numa_init(void)
{
 return -38;
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}
# 937 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 954 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 971 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 988 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1007 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1026 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 1050 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1066 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1147 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1183 "../include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1208 "../include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1226 "../include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};
# 1281 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_reconfig_notifier_register(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_reconfig_notifier_unregister(struct notifier_block *nb)
{
 return -22;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_reconfig_notify(unsigned long action,
         struct of_reconfig_data *arg)
{
 return -22;
}
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_reconfig_get_state_change(unsigned long action,
      struct of_reconfig_data *arg)
{
 return -22;
}



extern int of_resolve_phandles(struct device_node *tree);







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};
# 1343 "../include/linux/of.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_overlay_create(struct device_node *tree)
{
 return -524;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_overlay_destroy(int id)
{
 return -524;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_overlay_destroy_all(void)
{
 return -524;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_overlay_notifier_register(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int of_overlay_notifier_unregister(struct notifier_block *nb)
{
 return 0;
}
# 12 "../include/linux/of_net.h" 2

struct net_device;
extern int of_get_phy_mode(struct device_node *np);
extern const void *of_get_mac_address(struct device_node *np);
extern struct net_device *of_find_net_device_by_node(struct device_node *np);
# 11 "../drivers/of/of_net.c" 2
# 1 "../include/linux/phy.h" 1
# 22 "../include/linux/phy.h"
# 1 "../include/linux/mdio.h" 1
# 12 "../include/linux/mdio.h"
# 1 "../include/uapi/linux/mdio.h" 1
# 15 "../include/uapi/linux/mdio.h"
# 1 "../include/linux/mii.h" 1
# 13 "../include/linux/mii.h"
# 1 "../include/uapi/linux/mii.h" 1
# 156 "../include/uapi/linux/mii.h"
struct mii_ioctl_data {
 __u16 phy_id;
 __u16 reg_num;
 __u16 val_in;
 __u16 val_out;
};
# 14 "../include/linux/mii.h" 2

struct ethtool_cmd;

struct mii_if_info {
 int phy_id;
 int advertising;
 int phy_id_mask;
 int reg_num_mask;

 unsigned int full_duplex : 1;
 unsigned int force_media : 1;
 unsigned int supports_gmii : 1;

 struct net_device *dev;
 int (*mdio_read) (struct net_device *dev, int phy_id, int location);
 void (*mdio_write) (struct net_device *dev, int phy_id, int location, int val);
};

extern int mii_link_ok (struct mii_if_info *mii);
extern int mii_nway_restart (struct mii_if_info *mii);
extern int mii_ethtool_gset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
extern void mii_ethtool_get_link_ksettings(
 struct mii_if_info *mii, struct ethtool_link_ksettings *cmd);
extern int mii_ethtool_sset(struct mii_if_info *mii, struct ethtool_cmd *ecmd);
extern int mii_ethtool_set_link_ksettings(
 struct mii_if_info *mii, const struct ethtool_link_ksettings *cmd);
extern int mii_check_gmii_support(struct mii_if_info *mii);
extern void mii_check_link (struct mii_if_info *mii);
extern unsigned int mii_check_media (struct mii_if_info *mii,
         unsigned int ok_to_print,
         unsigned int init_media);
extern int generic_mii_ioctl(struct mii_if_info *mii_if,
        struct mii_ioctl_data *mii_data, int cmd,
        unsigned int *duplex_changed);


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
 return (struct mii_ioctl_data *) &rq->ifr_ifru;
}
# 69 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int mii_nway_result (unsigned int negotiated)
{
 unsigned int ret;

 if (negotiated & 0x0100)
  ret = 0x0100;
 else if (negotiated & 0x0200)
  ret = 0x0200;
 else if (negotiated & 0x0080)
  ret = 0x0080;
 else if (negotiated & 0x0040)
  ret = 0x0040;
 else
  ret = 0x0020;

 return ret;
}
# 96 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) unsigned int mii_duplex (unsigned int duplex_lock,
           unsigned int negotiated)
{
 if (duplex_lock)
  return 1;
 if (mii_nway_result(negotiated) & (0x0040 | 0x0100))
  return 1;
 return 0;
}
# 114 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_adv_t(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_10baseT_Half_BIT)))
  result |= 0x0020;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_10baseT_Full_BIT)))
  result |= 0x0040;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Half_BIT)))
  result |= 0x0080;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT)))
  result |= 0x0100;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Pause_BIT)))
  result |= 0x0400;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT)))
  result |= 0x0800;

 return result;
}
# 141 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_adv_to_ethtool_adv_t(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0020)
  result |= (1UL << (ETHTOOL_LINK_MODE_10baseT_Half_BIT));
 if (adv & 0x0040)
  result |= (1UL << (ETHTOOL_LINK_MODE_10baseT_Full_BIT));
 if (adv & 0x0080)
  result |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Half_BIT));
 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (adv & 0x0400)
  result |= (1UL << (ETHTOOL_LINK_MODE_Pause_BIT));
 if (adv & 0x0800)
  result |= (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT));

 return result;
}
# 169 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_ctrl1000_t(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT)))
  result |= 0x0100;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  result |= 0x0200;

 return result;
}
# 189 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_ctrl1000_to_ethtool_adv_t(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (adv & 0x0200)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));

 return result;
}
# 209 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_lpa_to_ethtool_lpa_t(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x4000)
  result |= (1UL << (ETHTOOL_LINK_MODE_Autoneg_BIT));

 return result | mii_adv_to_ethtool_adv_t(lpa);
}
# 227 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_stat1000_to_ethtool_lpa_t(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x0400)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (lpa & 0x0800)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));

 return result;
}
# 247 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 ethtool_adv_to_mii_adv_x(u32 ethadv)
{
 u32 result = 0;

 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT)))
  result |= 0x0040;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  result |= 0x0020;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Pause_BIT)))
  result |= 0x0080;
 if (ethadv & (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT)))
  result |= 0x0100;

 return result;
}
# 271 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_adv_to_ethtool_adv_x(u32 adv)
{
 u32 result = 0;

 if (adv & 0x0040)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Half_BIT));
 if (adv & 0x0020)
  result |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (adv & 0x0080)
  result |= (1UL << (ETHTOOL_LINK_MODE_Pause_BIT));
 if (adv & 0x0100)
  result |= (1UL << (ETHTOOL_LINK_MODE_Asym_Pause_BIT));

 return result;
}
# 295 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mii_lpa_to_ethtool_lpa_x(u32 lpa)
{
 u32 result = 0;

 if (lpa & 0x4000)
  result |= (1UL << (ETHTOOL_LINK_MODE_Autoneg_BIT));

 return result | mii_adv_to_ethtool_adv_x(lpa);
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 mii_advertise_flowctrl(int cap)
{
 u16 adv = 0;

 if (cap & 0x02)
  adv = 0x0400 | 0x0800;
 if (cap & 0x01)
  adv ^= 0x0800;

 return adv;
}
# 328 "../include/linux/mii.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
 u8 cap = 0;

 if (lcladv & rmtadv & 0x0400) {
  cap = 0x01 | 0x02;
 } else if (lcladv & rmtadv & 0x0800) {
  if (lcladv & 0x0400)
   cap = 0x02;
  else if (rmtadv & 0x0400)
   cap = 0x01;
 }

 return cap;
}
# 16 "../include/uapi/linux/mdio.h" 2
# 293 "../include/uapi/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u16 mdio_phy_id_c45(int prtad, int devad)
{
 return 0x8000 | (prtad << 5) | devad;
}
# 13 "../include/linux/mdio.h" 2


struct mii_bus;






enum mdio_mutex_lock_class {
 MDIO_MUTEX_NORMAL,
 MDIO_MUTEX_MUX,
 MDIO_MUTEX_NESTED,
};

struct mdio_device {
 struct device dev;

 const struct dev_pm_ops *pm_ops;
 struct mii_bus *bus;
 char modalias[32];

 int (*bus_match)(struct device *dev, struct device_driver *drv);
 void (*device_free)(struct mdio_device *mdiodev);
 void (*device_remove)(struct mdio_device *mdiodev);


 int addr;
 int flags;
};



struct mdio_driver_common {
 struct device_driver driver;
 int flags;
};





struct mdio_driver {
 struct mdio_driver_common mdiodrv;





 int (*probe)(struct mdio_device *mdiodev);


 void (*remove)(struct mdio_device *mdiodev);
};



void mdio_device_free(struct mdio_device *mdiodev);
struct mdio_device *mdio_device_create(struct mii_bus *bus, int addr);
int mdio_device_register(struct mdio_device *mdiodev);
void mdio_device_remove(struct mdio_device *mdiodev);
int mdio_driver_register(struct mdio_driver *drv);
void mdio_driver_unregister(struct mdio_driver *drv);
int mdio_device_bus_match(struct device *dev, struct device_driver *drv);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool mdio_phy_id_is_c45(int phy_id)
{
 return (phy_id & 0x8000) && !(phy_id & ~(0x8000 | 0x03e0 | 0x001f));
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u16 mdio_phy_id_prtad(int phy_id)
{
 return (phy_id & 0x03e0) >> 5;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __u16 mdio_phy_id_devad(int phy_id)
{
 return phy_id & 0x001f;
}
# 107 "../include/linux/mdio.h"
struct mdio_if_info {
 int prtad;
 u32 mmds;
 unsigned mode_support;

 struct net_device *dev;
 int (*mdio_read)(struct net_device *dev, int prtad, int devad,
    u16 addr);
 int (*mdio_write)(struct net_device *dev, int prtad, int devad,
     u16 addr, u16 val);
};







struct ethtool_cmd;
struct ethtool_pauseparam;
extern int mdio45_probe(struct mdio_if_info *mdio, int prtad);
extern int mdio_set_flag(const struct mdio_if_info *mdio,
    int prtad, int devad, u16 addr, int mask,
    bool sense);
extern int mdio45_links_ok(const struct mdio_if_info *mdio, u32 mmds);
extern int mdio45_nway_restart(const struct mdio_if_info *mdio);
extern void mdio45_ethtool_gset_npage(const struct mdio_if_info *mdio,
          struct ethtool_cmd *ecmd,
          u32 npage_adv, u32 npage_lpa);
extern void
mdio45_ethtool_ksettings_get_npage(const struct mdio_if_info *mdio,
       struct ethtool_link_ksettings *cmd,
       u32 npage_adv, u32 npage_lpa);
# 151 "../include/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void mdio45_ethtool_gset(const struct mdio_if_info *mdio,
           struct ethtool_cmd *ecmd)
{
 mdio45_ethtool_gset_npage(mdio, ecmd, 0, 0);
}
# 167 "../include/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void
mdio45_ethtool_ksettings_get(const struct mdio_if_info *mdio,
        struct ethtool_link_ksettings *cmd)
{
 mdio45_ethtool_ksettings_get_npage(mdio, cmd, 0, 0);
}

extern int mdio_mii_ioctl(const struct mdio_if_info *mdio,
     struct mii_ioctl_data *mii_data, int cmd);
# 184 "../include/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mmd_eee_cap_to_ethtool_sup_t(u16 eee_cap)
{
 u32 supported = 0;

 if (eee_cap & 0x0002)
  supported |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (eee_cap & 0x0004)
  supported |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (eee_cap & 0x0008)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT));
 if (eee_cap & 0x0010)
  supported |= (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT));
 if (eee_cap & 0x0020)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT));
 if (eee_cap & 0x0040)
  supported |= (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT));

 return supported;
}
# 212 "../include/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u32 mmd_eee_adv_to_ethtool_adv_t(u16 eee_adv)
{
 u32 adv = 0;

 if (eee_adv & 0x0002)
  adv |= (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT));
 if (eee_adv & 0x0004)
  adv |= (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT));
 if (eee_adv & 0x0008)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT));
 if (eee_adv & 0x0010)
  adv |= (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT));
 if (eee_adv & 0x0020)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT));
 if (eee_adv & 0x0040)
  adv |= (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT));

 return adv;
}
# 240 "../include/linux/mdio.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
 u16 reg = 0;

 if (adv & (1UL << (ETHTOOL_LINK_MODE_100baseT_Full_BIT)))
  reg |= 0x0002;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_1000baseT_Full_BIT)))
  reg |= 0x0004;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseT_Full_BIT)))
  reg |= 0x0008;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_1000baseKX_Full_BIT)))
  reg |= 0x0010;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseKX4_Full_BIT)))
  reg |= 0x0020;
 if (adv & (1UL << (ETHTOOL_LINK_MODE_10000baseKR_Full_BIT)))
  reg |= 0x0040;

 return reg;
}

int mdiobus_read(struct mii_bus *bus, int addr, u32 regnum);
int mdiobus_read_nested(struct mii_bus *bus, int addr, u32 regnum);
int mdiobus_write(struct mii_bus *bus, int addr, u32 regnum, u16 val);
int mdiobus_write_nested(struct mii_bus *bus, int addr, u32 regnum, u16 val);

int mdiobus_register_device(struct mdio_device *mdiodev);
int mdiobus_unregister_device(struct mdio_device *mdiodev);
bool mdiobus_is_registered_device(struct mii_bus *bus, int addr);
struct phy_device *mdiobus_get_phy(struct mii_bus *bus, int addr);
# 23 "../include/linux/phy.h" 2

# 1 "../include/linux/module.h" 1
# 13 "../include/linux/module.h"
# 1 "../include/linux/kmod.h" 1
# 22 "../include/linux/kmod.h"
# 1 "../include/linux/umh.h" 1
# 11 "../include/linux/umh.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 23 "../include/linux/kmod.h" 2
# 33 "../include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((format(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 14 "../include/linux/module.h" 2

# 1 "../include/linux/elf.h" 1




# 1 "../arch/arm64/include/asm/elf.h" 1
# 25 "../arch/arm64/include/asm/elf.h"
# 1 "./arch/arm64/include/generated/asm/user.h" 1
# 1 "../include/asm-generic/user.h" 1
# 2 "./arch/arm64/include/generated/asm/user.h" 2
# 26 "../arch/arm64/include/asm/elf.h" 2
# 124 "../arch/arm64/include/asm/elf.h"
typedef unsigned long elf_greg_t;





typedef elf_greg_t elf_gregset_t[(sizeof(struct user_pt_regs) / sizeof(elf_greg_t))];
typedef struct user_fpsimd_state elf_fpregset_t;
# 154 "../arch/arm64/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
# 180 "../arch/arm64/include/asm/elf.h"
typedef unsigned int compat_elf_greg_t;
typedef compat_elf_greg_t compat_elf_gregset_t[18];
# 200 "../arch/arm64/include/asm/elf.h"
extern int aarch32_setup_vectors_page(struct linux_binprm *bprm,
          int uses_interp);
# 6 "../include/linux/elf.h" 2
# 1 "../include/uapi/linux/elf.h" 1





# 1 "../include/uapi/linux/elf-em.h" 1
# 7 "../include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 138 "../include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 161 "../include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 303 "../include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 426 "../include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 7 "../include/linux/elf.h" 2
# 37 "../include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 50 "../include/linux/elf.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct elf64_shdr *elf_sheader(struct elf64_hdr *hdr)
{
 return (struct elf64_shdr *)((size_t)hdr + (size_t)hdr->e_shoff);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct elf64_shdr *elf_section(struct elf64_hdr *hdr, int idx)
{
 return &elf_sheader(hdr)[idx];
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct elf64_phdr *elf_pheader(struct elf64_hdr *hdr)
{
 return (struct elf64_phdr *)((size_t)hdr + (size_t)hdr->e_phoff);
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct elf64_phdr *elf_program(struct elf64_hdr *hdr, int idx)
{
 return &elf_pheader(hdr)[idx];
}


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) char *elf_str_table(struct elf64_hdr *hdr)
{
 if (hdr->e_shstrndx == 0)
  return ((void *)0);
 return (char *)hdr + elf_section(hdr, hdr->e_shstrndx)->sh_offset;
}


struct file;
struct coredump_params;


static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 16 "../include/linux/module.h" 2


# 1 "../include/linux/moduleparam.h" 1
# 38 "../include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 238 "../include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 302 "../include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 312 "../include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 341 "../include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 449 "../include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 510 "../include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 19 "../include/linux/module.h" 2


# 1 "../include/linux/rbtree_latch.h" 1
# 39 "../include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_t seq;
 struct rb_root tree[2];
};
# 63 "../include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void)))); extern void __compiletime_assert_113(void) ; if (__cond) __compiletime_assert_113(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ union { typeof(ltr->tree[idx].rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); else __read_once_size_nocheck(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); do { } while (0); __u.__val; }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ union { typeof(node->rb_left) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_left), __u.__c, sizeof(node->rb_left)); else __read_once_size_nocheck(&(node->rb_left), __u.__c, sizeof(node->rb_left)); do { } while (0); __u.__val; }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ union { typeof(node->rb_right) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_right), __u.__c, sizeof(node->rb_right)); else __read_once_size_nocheck(&(node->rb_right), __u.__c, sizeof(node->rb_right)); do { } while (0); __u.__val; }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 142 "../include/linux/rbtree_latch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 169 "../include/linux/rbtree_latch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 198 "../include/linux/rbtree_latch.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_retry(&root->seq, seq));

 return node;
}
# 22 "../include/linux/module.h" 2
# 1 "../include/linux/cfi.h" 1
# 23 "../include/linux/module.h" 2


# 1 "../arch/arm64/include/asm/module.h" 1
# 19 "../arch/arm64/include/asm/module.h"
# 1 "../include/asm-generic/module.h" 1
# 20 "../arch/arm64/include/asm/module.h" 2




struct mod_plt_sec {
 struct elf64_shdr *plt;
 int plt_num_entries;
 int plt_max_entries;
};

struct mod_arch_specific {
 struct mod_plt_sec core;
 struct mod_plt_sec init;


 struct plt_entry *ftrace_trampoline;
};


u64 module_emit_plt_entry(struct module *mod, void *loc, const Elf64_Rela *rela,
     Elf64_Sym *sym);


extern u64 module_alloc_base;




struct plt_entry {
# 57 "../arch/arm64/include/asm/module.h"
 __le32 mov0;
 __le32 mov1;
 __le32 mov2;
 __le32 br;
};

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct plt_entry get_plt_entry(u64 val)
{
# 76 "../arch/arm64/include/asm/module.h"
 return (struct plt_entry){
  (( __le32)(__u32)(0x92800010 | (((~val ) & 0xffff)) << 5)),
  (( __le32)(__u32)(0xf2a00010 | ((( val >> 16) & 0xffff)) << 5)),
  (( __le32)(__u32)(0xf2c00010 | ((( val >> 32) & 0xffff)) << 5)),
  (( __le32)(__u32)(0xd61f0200))
 };
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool plt_entries_equal(const struct plt_entry *a,
         const struct plt_entry *b)
{
 return a->mov0 == b->mov0 &&
        a->mov1 == b->mov1 &&
        a->mov2 == b->mov2;
}
# 26 "../include/linux/module.h" 2
# 35 "../include/linux/module.h"
struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
} __attribute__ ((__aligned__(sizeof(void *))));

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 261 "../include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 314 "../include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
};
# 329 "../include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
# 380 "../include/linux/module.h"
 bool sig_ok;


 bool async_probe_requested;


 const struct kernel_symbol *gpl_future_syms;
 const s32 *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << 7))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;



 unsigned int num_tracepoints;
 struct tracepoint * const *tracepoints_ptrs;






 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_eval_map **trace_evals;
 unsigned int num_trace_evals;
# 468 "../include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;







} __attribute__((__aligned__((1 << 7)))) ;




extern struct mutex module_mutex;




static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);

struct symsearch {
 const struct kernel_symbol *start, *stop;
 const s32 *crcs;
 enum {
  NOT_GPL_ONLY,
  GPL_ONLY,
  WILL_BE_GPL_ONLY,
 } licence;
 bool unused;
};






const struct kernel_symbol *find_symbol(const char *name,
     struct module **owner,
     const s32 **crc,
     bool gplok,
     bool warn);






bool each_symbol_section(bool (*fn)(const struct symsearch *arr,
        struct module *owner,
        void *data), void *data);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);

extern void __attribute__((noreturn)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 605 "../include/linux/module.h"
int ref_module(struct module *a, struct module *b);
# 617 "../include/linux/module.h"
const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool is_livepatch_module(struct module *mod)
{
 return false;
}
# 781 "../include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 793 "../include/linux/module.h"
extern void set_all_modules_text_rw(void);
extern void set_all_modules_text_ro(void);
extern void module_enable_ro(const struct module *mod, bool after_init);
extern void module_disable_ro(const struct module *mod);
# 805 "../include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 822 "../include/linux/module.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}



static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool module_sig_ok(struct module *module)
{
 return module->sig_ok;
}
# 25 "../include/linux/phy.h" 2
# 69 "../include/linux/phy.h"
typedef enum {
 PHY_INTERFACE_MODE_NA,
 PHY_INTERFACE_MODE_INTERNAL,
 PHY_INTERFACE_MODE_MII,
 PHY_INTERFACE_MODE_GMII,
 PHY_INTERFACE_MODE_SGMII,
 PHY_INTERFACE_MODE_TBI,
 PHY_INTERFACE_MODE_REVMII,
 PHY_INTERFACE_MODE_RMII,
 PHY_INTERFACE_MODE_RGMII,
 PHY_INTERFACE_MODE_RGMII_ID,
 PHY_INTERFACE_MODE_RGMII_RXID,
 PHY_INTERFACE_MODE_RGMII_TXID,
 PHY_INTERFACE_MODE_RTBI,
 PHY_INTERFACE_MODE_SMII,
 PHY_INTERFACE_MODE_XGMII,
 PHY_INTERFACE_MODE_MOCA,
 PHY_INTERFACE_MODE_QSGMII,
 PHY_INTERFACE_MODE_TRGMII,
 PHY_INTERFACE_MODE_1000BASEX,
 PHY_INTERFACE_MODE_2500BASEX,
 PHY_INTERFACE_MODE_RXAUI,
 PHY_INTERFACE_MODE_XAUI,

 PHY_INTERFACE_MODE_10GKR,
 PHY_INTERFACE_MODE_MAX,
} phy_interface_t;
# 108 "../include/linux/phy.h"
unsigned int phy_supported_speeds(struct phy_device *phy,
          unsigned int *speeds,
          unsigned int size);






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *phy_modes(phy_interface_t interface)
{
 switch (interface) {
 case PHY_INTERFACE_MODE_NA:
  return "";
 case PHY_INTERFACE_MODE_INTERNAL:
  return "internal";
 case PHY_INTERFACE_MODE_MII:
  return "mii";
 case PHY_INTERFACE_MODE_GMII:
  return "gmii";
 case PHY_INTERFACE_MODE_SGMII:
  return "sgmii";
 case PHY_INTERFACE_MODE_TBI:
  return "tbi";
 case PHY_INTERFACE_MODE_REVMII:
  return "rev-mii";
 case PHY_INTERFACE_MODE_RMII:
  return "rmii";
 case PHY_INTERFACE_MODE_RGMII:
  return "rgmii";
 case PHY_INTERFACE_MODE_RGMII_ID:
  return "rgmii-id";
 case PHY_INTERFACE_MODE_RGMII_RXID:
  return "rgmii-rxid";
 case PHY_INTERFACE_MODE_RGMII_TXID:
  return "rgmii-txid";
 case PHY_INTERFACE_MODE_RTBI:
  return "rtbi";
 case PHY_INTERFACE_MODE_SMII:
  return "smii";
 case PHY_INTERFACE_MODE_XGMII:
  return "xgmii";
 case PHY_INTERFACE_MODE_MOCA:
  return "moca";
 case PHY_INTERFACE_MODE_QSGMII:
  return "qsgmii";
 case PHY_INTERFACE_MODE_TRGMII:
  return "trgmii";
 case PHY_INTERFACE_MODE_1000BASEX:
  return "1000base-x";
 case PHY_INTERFACE_MODE_2500BASEX:
  return "2500base-x";
 case PHY_INTERFACE_MODE_RXAUI:
  return "rxaui";
 case PHY_INTERFACE_MODE_XAUI:
  return "xaui";
 case PHY_INTERFACE_MODE_10GKR:
  return "10gbase-kr";
 default:
  return "unknown";
 }
}
# 188 "../include/linux/phy.h"
struct device;
struct phylink;
struct sk_buff;





struct mii_bus {
 struct module *owner;
 const char *name;
 char id[61];
 void *priv;
 int (*read)(struct mii_bus *bus, int addr, int regnum);
 int (*write)(struct mii_bus *bus, int addr, int regnum, u16 val);
 int (*reset)(struct mii_bus *bus);





 struct mutex mdio_lock;

 struct device *parent;
 enum {
  MDIOBUS_ALLOCATED = 1,
  MDIOBUS_REGISTERED,
  MDIOBUS_UNREGISTERED,
  MDIOBUS_RELEASED,
 } state;
 struct device dev;


 struct mdio_device *mdio_map[32];


 u32 phy_mask;


 u32 phy_ignore_ta_mask;





 int irq[32];


 int reset_delay_us;

 struct gpio_desc *reset_gpiod;
};


struct mii_bus *mdiobus_alloc_size(size_t);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mii_bus *mdiobus_alloc(void)
{
 return mdiobus_alloc_size(0);
}

int __mdiobus_register(struct mii_bus *bus, struct module *owner);

void mdiobus_unregister(struct mii_bus *bus);
void mdiobus_free(struct mii_bus *bus);
struct mii_bus *devm_mdiobus_alloc_size(struct device *dev, int sizeof_priv);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) struct mii_bus *devm_mdiobus_alloc(struct device *dev)
{
 return devm_mdiobus_alloc_size(dev, 0);
}

void devm_mdiobus_free(struct device *dev, struct mii_bus *bus);
struct phy_device *mdiobus_scan(struct mii_bus *bus, int addr);
# 344 "../include/linux/phy.h"
enum phy_state {
 PHY_DOWN = 0,
 PHY_STARTING,
 PHY_READY,
 PHY_PENDING,
 PHY_UP,
 PHY_AN,
 PHY_RUNNING,
 PHY_NOLINK,
 PHY_FORCING,
 PHY_CHANGELINK,
 PHY_HALTED,
 PHY_RESUMING
};






struct phy_c45_device_ids {
 u32 devices_in_package;
 u32 device_ids[8];
};
# 404 "../include/linux/phy.h"
struct phy_device {
 struct mdio_device mdio;



 struct phy_driver *drv;

 u32 phy_id;

 struct phy_c45_device_ids c45_ids;
 bool is_c45;
 bool is_internal;
 bool is_pseudo_fixed_link;
 bool has_fixups;
 bool suspended;
 bool suspended_by_mdio_bus;
 bool sysfs_links;
 bool loopback_enabled;
 bool skip_sw_reset;

 enum phy_state state;

 u32 dev_flags;

 phy_interface_t interface;





 int speed;
 int duplex;
 int pause;
 int asym_pause;


 int link;


 u32 interrupts;



 u32 supported;
 u32 advertising;
 u32 lp_advertising;


 u32 eee_broken_modes;

 int autoneg;

 int link_timeout;
# 468 "../include/linux/phy.h"
 int irq;



 void *priv;


 struct work_struct phy_queue;
 struct delayed_work state_queue;
 atomic_t irq_disable;

 struct mutex lock;

 struct phylink *phylink;
 struct net_device *attached_dev;

 u8 mdix;
 u8 mdix_ctrl;

 void (*phy_link_change)(struct phy_device *, bool up, bool do_carrier);
 void (*adjust_link)(struct net_device *dev);





};
# 519 "../include/linux/phy.h"
struct phy_driver {
 struct mdio_driver_common mdiodrv;
 u32 phy_id;
 char *name;
 unsigned int phy_id_mask;
 u32 features;
 u32 flags;
 const void *driver_data;




 int (*soft_reset)(struct phy_device *phydev);





 int (*config_init)(struct phy_device *phydev);





 int (*probe)(struct phy_device *phydev);


 int (*suspend)(struct phy_device *phydev);
 int (*resume)(struct phy_device *phydev);







 int (*config_aneg)(struct phy_device *phydev);


 int (*aneg_done)(struct phy_device *phydev);


 int (*read_status)(struct phy_device *phydev);


 int (*ack_interrupt)(struct phy_device *phydev);


 int (*config_intr)(struct phy_device *phydev);





 int (*did_interrupt)(struct phy_device *phydev);


 void (*remove)(struct phy_device *phydev);





 int (*match_phy_device)(struct phy_device *phydev);


 int (*ts_info)(struct phy_device *phydev, struct ethtool_ts_info *ti);


 int (*hwtstamp)(struct phy_device *phydev, struct ifreq *ifr);
# 597 "../include/linux/phy.h"
 bool (*rxtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);







 void (*txtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);




 int (*set_wol)(struct phy_device *dev, struct ethtool_wolinfo *wol);


 void (*get_wol)(struct phy_device *dev, struct ethtool_wolinfo *wol);
# 622 "../include/linux/phy.h"
 void (*link_change_notify)(struct phy_device *dev);
# 633 "../include/linux/phy.h"
 int (*read_mmd)(struct phy_device *dev, int devnum, u16 regnum);
# 645 "../include/linux/phy.h"
 int (*write_mmd)(struct phy_device *dev, int devnum, u16 regnum,
    u16 val);



 int (*module_info)(struct phy_device *dev,
      struct ethtool_modinfo *modinfo);


 int (*module_eeprom)(struct phy_device *dev,
        struct ethtool_eeprom *ee, u8 *data);


 int (*get_sset_count)(struct phy_device *dev);
 void (*get_strings)(struct phy_device *dev, u8 *data);
 void (*get_stats)(struct phy_device *dev,
     struct ethtool_stats *stats, u64 *data);


 int (*get_tunable)(struct phy_device *dev,
      struct ethtool_tunable *tuna, void *data);
 int (*set_tunable)(struct phy_device *dev,
       struct ethtool_tunable *tuna,
       const void *data);
 int (*set_loopback)(struct phy_device *dev, bool enable);
};







struct phy_fixup {
 struct list_head list;
 char bus_id[61 + 3];
 u32 phy_uid;
 u32 phy_uid_mask;
 int (*run)(struct phy_device *phydev);
};

const char *phy_speed_to_str(int speed);
const char *phy_duplex_to_str(unsigned int duplex);




struct phy_setting {
 u32 speed;
 u8 duplex;
 u8 bit;
};

const struct phy_setting *
phy_lookup_setting(int speed, int duplex, const unsigned long *mask,
     size_t maxbit, bool exact);
size_t phy_speeds(unsigned int *speeds, size_t size,
    unsigned long *mask, size_t maxbit);
# 713 "../include/linux/phy.h"
int phy_read_mmd(struct phy_device *phydev, int devad, u32 regnum);
# 724 "../include/linux/phy.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int phy_read(struct phy_device *phydev, u32 regnum)
{
 return mdiobus_read(phydev->mdio.bus, phydev->mdio.addr, regnum);
}
# 739 "../include/linux/phy.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int phy_write(struct phy_device *phydev, u32 regnum, u16 val)
{
 return mdiobus_write(phydev->mdio.bus, phydev->mdio.addr, regnum, val);
}
# 751 "../include/linux/phy.h"
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool phy_interrupt_is_valid(struct phy_device *phydev)
{
 return phydev->irq != -1 && phydev->irq != -2;
}





static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool phy_is_internal(struct phy_device *phydev)
{
 return phydev->is_internal;
}






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool phy_interface_mode_is_rgmii(phy_interface_t mode)
{
 return mode >= PHY_INTERFACE_MODE_RGMII &&
  mode <= PHY_INTERFACE_MODE_RGMII_TXID;
};






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool phy_interface_is_rgmii(struct phy_device *phydev)
{
 return phy_interface_mode_is_rgmii(phydev->interface);
};






static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) bool phy_is_pseudo_fixed_link(struct phy_device *phydev)
{
 return phydev->is_pseudo_fixed_link;
}
# 806 "../include/linux/phy.h"
int phy_write_mmd(struct phy_device *phydev, int devad, u32 regnum, u16 val);

struct phy_device *phy_device_create(struct mii_bus *bus, int addr, int phy_id,
         bool is_c45,
         struct phy_c45_device_ids *c45_ids);

struct phy_device *get_phy_device(struct mii_bus *bus, int addr, bool is_c45);
int phy_device_register(struct phy_device *phy);
void phy_device_free(struct phy_device *phydev);
# 829 "../include/linux/phy.h"
void phy_device_remove(struct phy_device *phydev);
int phy_init_hw(struct phy_device *phydev);
int phy_suspend(struct phy_device *phydev);
int phy_resume(struct phy_device *phydev);
int __phy_resume(struct phy_device *phydev);
int phy_loopback(struct phy_device *phydev, bool enable);
struct phy_device *phy_attach(struct net_device *dev, const char *bus_id,
         phy_interface_t interface);
struct phy_device *phy_find_first(struct mii_bus *bus);
int phy_attach_direct(struct net_device *dev, struct phy_device *phydev,
        u32 flags, phy_interface_t interface);
int phy_connect_direct(struct net_device *dev, struct phy_device *phydev,
         void (*handler)(struct net_device *),
         phy_interface_t interface);
struct phy_device *phy_connect(struct net_device *dev, const char *bus_id,
          void (*handler)(struct net_device *),
          phy_interface_t interface);
void phy_disconnect(struct phy_device *phydev);
void phy_detach(struct phy_device *phydev);
void phy_start(struct phy_device *phydev);
void phy_stop(struct phy_device *phydev);
int phy_start_aneg(struct phy_device *phydev);
int phy_aneg_done(struct phy_device *phydev);

int phy_stop_interrupts(struct phy_device *phydev);
int phy_restart_aneg(struct phy_device *phydev);

static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int phy_read_status(struct phy_device *phydev)
{
 if (!phydev->drv)
  return -5;

 return phydev->drv->read_status(phydev);
}







static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) const char *phydev_name(const struct phy_device *phydev)
{
 return dev_name(&phydev->mdio.dev);
}

void phy_attached_print(struct phy_device *phydev, const char *fmt, ...)
 __attribute__((format(printf, 2, 3)));
void phy_attached_info(struct phy_device *phydev);


int genphy_config_init(struct phy_device *phydev);
int genphy_setup_forced(struct phy_device *phydev);
int genphy_restart_aneg(struct phy_device *phydev);
int genphy_config_aneg(struct phy_device *phydev);
int genphy_aneg_done(struct phy_device *phydev);
int genphy_update_link(struct phy_device *phydev);
int genphy_read_status(struct phy_device *phydev);
int genphy_suspend(struct phy_device *phydev);
int genphy_resume(struct phy_device *phydev);
int genphy_loopback(struct phy_device *phydev, bool enable);
int genphy_soft_reset(struct phy_device *phydev);
static inline __attribute__((always_inline, unused)) __attribute__((no_instrument_function)) int genphy_no_soft_reset(struct phy_device *phydev)
{
 return 0;
}
int genphy_read_mmd_unsupported(struct phy_device *phdev, int devad,
    u16 regnum);
int genphy_write_mmd_unsupported(struct phy_device *phdev, int devnum,
     u16 regnum, u16 val);


int genphy_c45_restart_aneg(struct phy_device *phydev);
int genphy_c45_aneg_done(struct phy_device *phydev);
int genphy_c45_read_link(struct phy_device *phydev, u32 mmd_mask);
int genphy_c45_read_lpa(struct phy_device *phydev);
int genphy_c45_read_pma(struct phy_device *phydev);
int genphy_c45_pma_setup_forced(struct phy_device *phydev);
int genphy_c45_an_disable_aneg(struct phy_device *phydev);

void phy_driver_unregister(struct phy_driver *drv);
void phy_drivers_unregister(struct phy_driver *drv, int n);
int phy_driver_register(struct phy_driver *new_driver, struct module *owner);
int phy_drivers_register(struct phy_driver *new_driver, int n,
    struct module *owner);
void phy_state_machine(struct work_struct *work);
void phy_change_work(struct work_struct *work);
void phy_mac_interrupt(struct phy_device *phydev, int new_link);
void phy_start_machine(struct phy_device *phydev);
void phy_stop_machine(struct phy_device *phydev);
void phy_trigger_machine(struct phy_device *phydev, bool sync);
int phy_ethtool_sset(struct phy_device *phydev, struct ethtool_cmd *cmd);
void phy_ethtool_ksettings_get(struct phy_device *phydev,
          struct ethtool_link_ksettings *cmd);
int phy_ethtool_ksettings_set(struct phy_device *phydev,
         const struct ethtool_link_ksettings *cmd);
int phy_mii_ioctl(struct phy_device *phydev, struct ifreq *ifr, int cmd);
int phy_start_interrupts(struct phy_device *phydev);
void phy_print_status(struct phy_device *phydev);
int phy_set_max_speed(struct phy_device *phydev, u32 max_speed);

int phy_register_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask,
         int (*run)(struct phy_device *));
int phy_register_fixup_for_id(const char *bus_id,
         int (*run)(struct phy_device *));
int phy_register_fixup_for_uid(u32 phy_uid, u32 phy_uid_mask,
          int (*run)(struct phy_device *));

int phy_unregister_fixup(const char *bus_id, u32 phy_uid, u32 phy_uid_mask);
int phy_unregister_fixup_for_id(const char *bus_id);
int phy_unregister_fixup_for_uid(u32 phy_uid, u32 phy_uid_mask);

int phy_init_eee(struct phy_device *phydev, bool clk_stop_enable);
int phy_get_eee_err(struct phy_device *phydev);
int phy_ethtool_set_eee(struct phy_device *phydev, struct ethtool_eee *data);
int phy_ethtool_get_eee(struct phy_device *phydev, struct ethtool_eee *data);
int phy_ethtool_set_wol(struct phy_device *phydev, struct ethtool_wolinfo *wol);
void phy_ethtool_get_wol(struct phy_device *phydev,
    struct ethtool_wolinfo *wol);
int phy_ethtool_get_link_ksettings(struct net_device *ndev,
       struct ethtool_link_ksettings *cmd);
int phy_ethtool_set_link_ksettings(struct net_device *ndev,
       const struct ethtool_link_ksettings *cmd);
int phy_ethtool_nway_reset(struct net_device *ndev);


int __attribute__ ((__section__(".init.text"))) mdio_bus_init(void);
void mdio_bus_exit(void);


extern struct bus_type mdio_bus_type;

struct mdio_board_info {
 const char *bus_id;
 char modalias[32];
 int mdio_addr;
 const void *platform_data;
};


int mdiobus_register_board_info(const struct mdio_board_info *info,
    unsigned int n);
# 12 "../drivers/of/of_net.c" 2
# 22 "../drivers/of/of_net.c"
int of_get_phy_mode(struct device_node *np)
{
 const char *pm;
 int err, i;

 err = of_property_read_string(np, "phy-mode", &pm);
 if (err < 0)
  err = of_property_read_string(np, "phy-connection-type", &pm);
 if (err < 0)
  return err;

 for (i = 0; i < PHY_INTERFACE_MODE_MAX; i++)
  if (!strcasecmp(pm, phy_modes(i)))
   return i;

 return -19;
}
EXPORT_SYMBOL_GPL(of_get_phy_mode);

static const void *of_get_mac_addr(struct device_node *np, const char *name)
{
 struct property *pp = of_find_property(np, name, ((void *)0));

 if (pp && pp->length == 6 && is_valid_ether_addr(pp->value))
  return pp->value;
 return ((void *)0);
}
# 68 "../drivers/of/of_net.c"
const void *of_get_mac_address(struct device_node *np)
{
 const void *addr;

 addr = of_get_mac_addr(np, "mac-address");
 if (addr)
  return addr;

 addr = of_get_mac_addr(np, "local-mac-address");
 if (addr)
  return addr;

 return of_get_mac_addr(np, "address");
}
EXPORT_SYMBOL(of_get_mac_address);
